<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JeremyAnsel.DirectX.D3D11</name>
    </assembly>
    <members>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous">
            <summary>
            This interface encapsulates methods for retrieving data from the GPU asynchronously.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous.GetDataSize">
            <summary>
            Get the size of the data (in bytes) that is output when calling <c>GetData</c>.
            </summary>
            <returns>The size of the data (in bytes) that is output when calling <c>GetData</c>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11BlendState">
            <summary>
            The blend-state interface holds a description for blending state that you can bind to the output-merger stage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11BlendState.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11BlendState.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11BlendState.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11BlendState.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11BlendState.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11BlendDesc@)">
            <summary>
            Gets the description for blending state that you used to create the blend-state object.
            </summary>
            <param name="desc">A description of the blend state.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer">
            <summary>
            A buffer interface accesses a buffer resource, which is unstructured memory.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer.GetDimension(JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension@)">
            <summary>
            Get the type of the resource.
            </summary>
            <param name="dimension">The resource type.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer.SetEvictionPriority(JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority)">
            <summary>
            Set the eviction priority of a resource.
            </summary>
            <param name="evictionPriority">The eviction priority for the resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer.GetEvictionPriority">
            <summary>
            Get the eviction priority of a resource.
            </summary>
            <returns>The eviction priority for the resource.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11BufferDesc@)">
            <summary>
            Get the properties of a buffer resource.
            </summary>
            <param name="desc">A resource description.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance">
            <summary>
            This interface encapsulates an HLSL class.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance.GetClassLinkage(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage@)">
            <summary>
            Gets the <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage"/> object associated with the current HLSL class.
            </summary>
            <param name="linkage">A <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage"/> interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc@)">
            <summary>
            Gets a description of the current HLSL class.
            </summary>
            <param name="desc">A description of the current HLSL class.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance.GetInstanceName(System.Text.StringBuilder,System.UIntPtr@)">
            <summary>
            Gets the instance name of the current HLSL class.
            </summary>
            <param name="instanceName">The instance name of the current HLSL class.</param>
            <param name="bufferLength">The length of the <paramref name="instanceName"/> parameter.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance.GetTypeName(System.Text.StringBuilder,System.UIntPtr@)">
            <summary>
            Gets the type of the current HLSL class.
            </summary>
            <param name="typeName">The type of the current HLSL class.</param>
            <param name="bufferLength">The length of the <paramref name="typeName"/> parameter.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage">
            <summary>
            This interface encapsulates an HLSL dynamic linkage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage.GetClassInstance(System.String,System.UInt32)">
            <summary>
            Gets the class-instance object that represents the specified HLSL class.
            </summary>
            <param name="classInstanceName">The name of a class for which to get the class instance.</param>
            <param name="instanceIndex">The index of the class instance.</param>
            <returns>An <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance"/> interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage.CreateClassInstance(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a class-instance object that represents an HLSL class instance.
            </summary>
            <param name="classTypeName">The type name of a class to initialize.</param>
            <param name="constantBufferOffset">Identifies the constant buffer that contains the class data.</param>
            <param name="constantVectorOffset">The four-component vector offset from the start of the constant buffer where the class data will begin. Consequently, this is not a byte offset.</param>
            <param name="textureOffset">The texture slot for the first texture; there may be multiple textures following the offset.</param>
            <param name="samplerOffset">The sampler slot for the first sampler; there may be multiple samplers following the offset.</param>
            <returns>An <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance"/> interface.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11CommandList">
            <summary>
            Encapsulates a list of graphics commands for play back.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11CommandList.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11CommandList.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11CommandList.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11CommandList.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11CommandList.GetContextOptions">
            <summary>
            Gets the initialization flags associated with the deferred context that created the command list.
            </summary>
            <returns>The context flag is reserved for future use and is always 0.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ComputeShader">
            <summary>
            A compute shader interface manages an executable program (a compute shader) that controls the compute shader stage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ComputeShader.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ComputeShader.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ComputeShader.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ComputeShader.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Counter">
            <summary>
            This interface encapsulates methods for measuring GPU performance.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Counter.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Counter.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Counter.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Counter.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Counter.GetDataSize">
            <summary>
            Get the size of the data (in bytes) that is output when calling <c>GetData</c>.
            </summary>
            <returns>The size of the data (in bytes) that is output when calling <c>GetData</c>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Counter.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11CounterDesc@)">
            <summary>
            Get a counter description.
            </summary>
            <param name="desc">A counter description.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilState">
            <summary>
            The depth-stencil-state interface holds a description for depth-stencil state that you can bind to the output-merger stage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilState.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilState.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilState.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilState.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilState.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc@)">
            <summary>
            Gets the description for depth-stencil state that you used to create the depth-stencil-state object.
            </summary>
            <param name="desc">A description of the depth-stencil state.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView">
            <summary>
            A depth-stencil-view interface accesses a texture resource during depth-stencil testing.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView.GetResource(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource@)">
            <summary>
            Get the resource that is accessed through this view.
            </summary>
            <param name="resource">The resource that is accessed through this view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc@)">
            <summary>
            Get the depth-stencil view.
            </summary>
            <param name="desc">A depth-stencil-view description.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device">
            <summary>
            The device interface represents a virtual adapter; it is used to create resources.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateBuffer(JeremyAnsel.DirectX.D3D11.D3D11BufferDesc@,System.IntPtr)">
            <summary>
            Creates a buffer (vertex buffer, index buffer, or shader constant buffer).
            </summary>
            <param name="desc">Describes the buffer.</param>
            <param name="initialData">Describes the initialization data.</param>
            <returns>The buffer object created.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateTexture1D(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc@,JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr[])">
            <summary>
            Creates an array of 1D textures.
            </summary>
            <param name="desc">Describes a 1D texture resource.</param>
            <param name="initialData">Describe subresources for the 1D texture resource.</param>
            <returns>The created texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateTexture2D(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc@,JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr[])">
            <summary>
            Create an array of 2D textures.
            </summary>
            <param name="desc">Describes a 2D texture resource.</param>
            <param name="initialData">Describe subresources for the 2D texture resource.</param>
            <returns>The created texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateTexture3D(JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc@,JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr[])">
            <summary>
            Create a single 3D texture.
            </summary>
            <param name="desc">Describes a 3D texture resource.</param>
            <param name="initialData">Describe subresources for the 3D texture resource.</param>
            <returns>The created texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateShaderResourceView(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.IntPtr)">
            <summary>
            Create a shader resource view for accessing data in a resource.
            </summary>
            <param name="resource">The resource that will serve as input to a shader.</param>
            <param name="desc">A pointer to a shader resource view description.</param>
            <returns>The created shader resource view.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateUnorderedAccessView(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.IntPtr)">
            <summary>
            Creates a view for accessing an unordered access resource.
            </summary>
            <param name="resource">A resources that will serve as an input to a shader.</param>
            <param name="desc">A pointer to a shader resource view description.</param>
            <returns>The created unordered-access view.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateRenderTargetView(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.IntPtr)">
            <summary>
            Creates a render-target view for accessing resource data.
            </summary>
            <param name="resource">A render target resource.</param>
            <param name="desc">A pointer to a render-target view description.</param>
            <returns>The created render target view.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateDepthStencilView(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.IntPtr)">
            <summary>
            Create a depth-stencil view for accessing resource data.
            </summary>
            <param name="resource">The resource that will serve as the depth-stencil surface.</param>
            <param name="desc">A pointer to a depth-stencil-view description.</param>
            <returns>The created depth-stencil view.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateInputLayout(JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc[],System.UInt32,System.Byte[],System.UIntPtr)">
            <summary>
            Create an input-layout object to describe the input-buffer data for the input-assembler stage.
            </summary>
            <param name="inputElementDescs">An array of the input-assembler stage input data types; each type is described by an element description.</param>
            <param name="numElements">The number of input-data types in the array of input-elements.</param>
            <param name="shaderBytecodeWithInputSignature">The compiled shader. The compiled shader code contains a input signature which is validated against the array of elements.</param>
            <param name="bytecodeLength">The size of the compiled shader.</param>
            <returns>The created input-layout object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateVertexShader(System.Byte[],System.UIntPtr,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage)">
            <summary>
            Create a vertex shader object from a compiled shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="bytecodeLength">The size of the compiled vertex shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created vertex shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateGeometryShader(System.Byte[],System.UIntPtr,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage)">
            <summary>
            Create a geometry shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="bytecodeLength">The size of the compiled geometry shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created geometry shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateGeometryShaderWithStreamOutput(System.Byte[],System.UIntPtr,JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry[],System.UInt32,System.UInt32[],System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage)">
            <summary>
            Creates a geometry shader that can write to streaming output buffers.
            </summary>
            <param name="shaderBytecode">The compiled geometry shader for a standard geometry shader plus stream output.</param>
            <param name="bytecodeLength">The size of the compiled geometry shader.</param>
            <param name="streamOutputDeclaration">A <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry"/> array.</param>
            <param name="numEntries">The number of entries in the stream output declaration.</param>
            <param name="bufferStrides">An array of buffer strides; each stride is the size of an element for that buffer.</param>
            <param name="numStrides">The number of strides (or buffers).</param>
            <param name="rasterizedStream">The index number of the stream to be sent to the rasterizer stage.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created geometry shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreatePixelShader(System.Byte[],System.UIntPtr,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage)">
            <summary>
            Create a pixel shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="bytecodeLength">The size of the compiled pixel shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created pixel shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateHullShader(System.Byte[],System.UIntPtr,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage)">
            <summary>
            Create a hull shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="bytecodeLength">The size of the compiled shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created hull shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateDomainShader(System.Byte[],System.UIntPtr,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage)">
            <summary>
            Create a domain shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="bytecodeLength">The size of the compiled shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created domain shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateComputeShader(System.Byte[],System.UIntPtr,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage)">
            <summary>
            Create a compute shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="bytecodeLength">The size of the compiled shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created compute shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateClassLinkage">
            <summary>
            Creates class linkage libraries to enable dynamic shader linkage.
            </summary>
            <returns>The created class linkage.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateBlendState(JeremyAnsel.DirectX.D3D11.D3D11BlendDesc@)">
            <summary>
            Create a blend-state object that encapsules blend state for the output-merger stage.
            </summary>
            <param name="desc">A blend-state description.</param>
            <returns>The created blend-state object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateDepthStencilState(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc@)">
            <summary>
            Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage.
            </summary>
            <param name="desc">A depth-stencil state description.</param>
            <returns>The created depth-stencil state object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateRasterizerState(JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc@)">
            <summary>
            Create a rasterizer state object that tells the rasterizer stage how to behave.
            </summary>
            <param name="desc">A rasterizer state description.</param>
            <returns>The created rasterizer state object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateSamplerState(JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc@)">
            <summary>
            Create a sampler-state object that encapsulates sampling information for a texture.
            </summary>
            <param name="desc">A sampler state description.</param>
            <returns>The created sampler-state object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateQuery(JeremyAnsel.DirectX.D3D11.D3D11QueryDesc@)">
            <summary>
            Creates an object for querying information from the GPU.
            </summary>
            <param name="desc">A query description.</param>
            <returns>The created query.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreatePredicate(JeremyAnsel.DirectX.D3D11.D3D11QueryDesc@)">
            <summary>
            Creates a predicate.
            </summary>
            <param name="desc">A query description for a predicate.</param>
            <returns>The created predicate.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateCounter(JeremyAnsel.DirectX.D3D11.D3D11CounterDesc@)">
            <summary>
            Create a counter object for measuring GPU performance.
            </summary>
            <param name="desc">A counter description.</param>
            <returns>The created counter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CreateDeferredContext(System.UInt32)">
            <summary>
            Creates a deferred context, which can record command lists.
            </summary>
            <param name="contextOptions">Reserved for future use.</param>
            <returns>The created deferred context.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.OpenSharedResource(System.IntPtr,System.Guid@)">
            <summary>
            Give a device access to a shared resource created on a different device.
            </summary>
            <param name="resourceHandle">A resource handle.</param>
            <param name="returnedInterface">The globally unique identifier (GUID) for the resource interface.</param>
            <returns>A pointer to the resource we are gaining access to.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CheckFormatSupport(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.D3D11.D3D11FormatSupport@)">
            <summary>
            Get the support of a given format on the installed video device.
            </summary>
            <param name="format">A format for which to check for support.</param>
            <param name="formatSupport">Describes how the specified format is supported on the installed device.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CheckMultisampleQualityLevels(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32@)">
            <summary>
            Get the number of quality levels available during multisampling.
            </summary>
            <param name="format">The texture format.</param>
            <param name="sampleCount">The number of samples during multisampling.</param>
            <param name="numQualityLevels">The number of quality levels supported by the adapter.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CheckCounterInfo(JeremyAnsel.DirectX.D3D11.D3D11CounterInfo@)">
            <summary>
            Get a counter's information.
            </summary>
            <param name="counterInfo">A pointer to counter information.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CheckCounter(JeremyAnsel.DirectX.D3D11.D3D11CounterDesc@,JeremyAnsel.DirectX.D3D11.D3D11CounterDataType@,System.UInt32@,System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            Get the type, name, units of measure, and a description of an existing counter.
            </summary>
            <param name="desc">A counter description.</param>
            <param name="type">The data type of a counter.</param>
            <param name="activeCounters">The number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.</param>
            <param name="name">String to be filled with a brief name for the counter.</param>
            <param name="nameLength">Length of the string returned to <paramref name="name"/>.</param>
            <param name="units">Name of the units a counter measures.</param>
            <param name="unitsLength">Length of the string returned to <paramref name="units"/>.</param>
            <param name="description">A description of the counter.</param>
            <param name="descriptionLength">Length of the string returned to <paramref name="description"/>.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.CheckFeatureSupport(JeremyAnsel.DirectX.D3D11.D3D11Feature,System.IntPtr,System.UInt32)">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <param name="feature">Describes which feature to query for support.</param>
            <param name="featureSupportData">Upon completion of the method, the passed structure is filled with data that describes the feature support.</param>
            <param name="featureSupportDataSize">The size of the structure passed to the <paramref name="featureSupportData"/> parameter.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.GetFeatureLevel">
            <summary>
            Gets the feature level of the hardware device.
            </summary>
            <returns>The feature level of the hardware device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.GetCreationOptions">
            <summary>
            Get the options used during the call to create the device.
            </summary>
            <returns>The options used to create the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.GetDeviceRemovedReason">
            <summary>
            Get the reason why the device was removed.
            </summary>
            <returns>The removed reason.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.GetImmediateContext(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext@)">
            <summary>
            Gets an immediate context, which can play back command lists.
            </summary>
            <param name="immediateContext">An immediate context.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.SetExceptionMode(JeremyAnsel.DirectX.D3D11.D3D11RaiseOptions)">
            <summary>
            Set the exception-mode options.
            </summary>
            <param name="raiseOptions">The exception options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device.GetExceptionMode">
            <summary>
            Get the exception-mode options.
            </summary>
            <returns>The exception options.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild">
            <summary>
            A device-child interface accesses data used by a device.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext">
            <summary>
            Represents a device context which generates rendering commands.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.VertexShaderSetConstantBuffers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the vertex shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
            <param name="numBuffers">Number of buffers to set.</param>
            <param name="constantBuffers">Array of constant buffers being given to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.PixelShaderSetShaderResources(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the pixel shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="numViews">Number of shader resources to set.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.PixelShaderSetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11PixelShader,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance[],System.UInt32)">
            <summary>
            Sets a pixel shader to the device.
            </summary>
            <param name="pixelShader">A pixel shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance interfaces in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.PixelShaderSetSamplers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the pixel shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="numSamplers">Number of samplers in the array.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.VertexShaderSetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11VertexShader,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance[],System.UInt32)">
            <summary>
            Set a vertex shader to the device.
            </summary>
            <param name="vertexShader">A vertex shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance interfaces in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DrawIndexed(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Draw indexed, non-instanced primitives.
            </summary>
            <param name="indexCount">Number of indices to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.Draw(System.UInt32,System.UInt32)">
            <summary>
            Draw non-indexed, non-instanced primitives.
            </summary>
            <param name="vertexCount">Number of vertices to draw.</param>
            <param name="startVertexLocation">Index of the first vertex, which is usually an offset in a vertex buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.Map(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission,JeremyAnsel.DirectX.D3D11.D3D11MapOptions)">
            <summary>
            Gets a pointer to the data contained in a subresource, and denies the GPU access to that subresource.
            </summary>
            <param name="resource">A <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource"/> interface.</param>
            <param name="subresource">Index number of the subresource.</param>
            <param name="mapType">The CPU's read and write permissions for a resource.</param>
            <param name="mapOptions">Specifies what the CPU does when the GPU is busy.</param>
            <returns>The mapped subresource.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.Unmap(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.UInt32)">
            <summary>
            Invalidate the pointer to a resource and reenable the GPU's access to that resource.
            </summary>
            <param name="resource">A <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource"/> interface.</param>
            <param name="subresource">A subresource to be unmapped.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.PixelShaderSetConstantBuffers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the pixel shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
            <param name="numBuffers">Number of buffers to set.</param>
            <param name="constantBuffers">Array of constant buffers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.InputAssemblerSetInputLayout(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11InputLayout)">
            <summary>
            Bind an input-layout object to the input-assembler stage.
            </summary>
            <param name="inputLayout">The input-layout object.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.InputAssemblerSetVertexBuffers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer[],System.UInt32[],System.UInt32[])">
            <summary>
            Bind an array of vertex buffers to the input-assembler stage.
            </summary>
            <param name="startSlot">The first input slot for binding.</param>
            <param name="numBuffers">The number of vertex buffers in the array.</param>
            <param name="vertexBuffers">An array of vertex buffers.</param>
            <param name="strides">An array of stride values; one stride value for each buffer in the vertex-buffer array.</param>
            <param name="offsets">An array of offset values; one offset value for each buffer in the vertex-buffer array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.InputAssemblerSetIndexBuffer(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Bind an index buffer to the input-assembler stage.
            </summary>
            <param name="indexBuffer">An <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer"/> object, that contains indices.</param>
            <param name="format">The format of the data in the index buffer.</param>
            <param name="offset">Offset (in bytes) from the start of the index buffer to the first index to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DrawIndexedInstanced(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Draw indexed, instanced primitives.
            </summary>
            <param name="indexCountPerInstance">Number of indices read from the index buffer for each instance.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DrawInstanced(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Draw non-indexed, instanced primitives.
            </summary>
            <param name="vertexCountPerInstance">Number of vertices to draw.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startVertexLocation">Index of the first vertex.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GeometryShaderSetConstantBuffers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the geometry shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
            <param name="numBuffers">Number of buffers to set.</param>
            <param name="constantBuffers">Array of constant buffers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GeometryShaderSetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11GeometryShader,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance[],System.UInt32)">
            <summary>
            Set a geometry shader to the device.
            </summary>
            <param name="shader">A geometry shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance interfaces in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.InputAssemblerSetPrimitiveTopology(JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology)">
            <summary>
            Bind information about the primitive type, and data order that describes input data for the input assembler stage.
            </summary>
            <param name="topology">The type of primitive and ordering of the primitive data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.VertexShaderSetShaderResources(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the vertex shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="numViews">Number of shader resources to set.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.VertexShaderSetSamplers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the vertex shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="numSamplers">Number of samplers in the array.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous)">
            <summary>
            Mark the beginning of a series of commands.
            </summary>
            <param name="async">An <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous"/> interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous)">
            <summary>
            Mark the end of a series of commands.
            </summary>
            <param name="async">An <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous"/> interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GetData(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous,System.IntPtr,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11AsyncGetDataOptions)">
            <summary>
            Get data from the graphics processing unit (GPU) asynchronously.
            </summary>
            <param name="async">An <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous"/> interface for the object about which <c>GetData</c> retrieves data.</param>
            <param name="dataPtr">Address of memory that will receive the data.</param>
            <param name="dataSize">Size of the data to retrieve or 0.</param>
            <param name="options">Optional flags.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.SetPredication(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate,System.Boolean)">
            <summary>
            Set a rendering predicate.
            </summary>
            <param name="predicate">A predicate.</param>
            <param name="predicateValue">A value indicating whether rendering will be affected by when the predicate's conditions are met or not met.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GeometryShaderSetShaderResources(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the geometry shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="numView">Number of shader resources to set.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GeometryShaderSetSamplers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the geometry shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="numSamplers">Number of samplers in the array.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.OutputMergerSetRenderTargets(System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView[],JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView)">
            <summary>
            Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage.
            </summary>
            <param name="numViews">Number of render targets to bind.</param>
            <param name="renderTargetViews">The render targets to bind to the device.</param>
            <param name="depthStencilView">The depth-stencil view to bind to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.OutputMergerSetRenderTargetsAndUnorderedAccessViews(System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView[],JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView[],System.UInt32[])">
            <summary>
            Binds resources to the output-merger stage.
            </summary>
            <param name="numRenderTargetViews">Number of render targets to bind.</param>
            <param name="renderTargetViews">The render targets to bind to the device.</param>
            <param name="depthStencilView">The depth-stencil view to bind to the device.</param>
            <param name="uavStartSlot">Index into a zero-based array to begin setting unordered-access views.</param>
            <param name="numUnorderedAccessViews">Number of unordered-access views (UAVs).</param>
            <param name="unorderedAccessViews">The unordered-access views to bind to the device.</param>
            <param name="uavInitialCounts">An array of append and consume buffer offsets. A value of <value>-1</value> indicates to keep the current offset.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.OutputMergerSetBlendState(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11BlendState,System.Single[],System.UInt32)">
            <summary>
            Set the blend state of the output-merger stage.
            </summary>
            <param name="blendState">A blend-state interface.</param>
            <param name="blendFactor">Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both.</param>
            <param name="sampleMask">32-bit sample coverage. The default value is <value>0xffffffff</value>.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.OutputMergerSetDepthStencilState(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilState,System.UInt32)">
            <summary>
            Sets the depth-stencil state of the output-merger stage.
            </summary>
            <param name="depthStencilState">A depth-stencil state interface.</param>
            <param name="stencilReference">Reference value to perform against when doing a depth-stencil test.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.StreamOutputSetTargets(System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer[],System.UInt32[])">
            <summary>
            Reference value to perform against when doing a depth-stencil test.
            </summary>
            <param name="numBuffers">The number of buffer to bind to the device.</param>
            <param name="targets">The array of output buffers to bind to the device.</param>
            <param name="offsets">Array of offsets to the output buffers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DrawAuto">
            <summary>
            Draw geometry of an unknown size.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DrawIndexedInstancedIndirect(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer,System.UInt32)">
            <summary>
            Draw indexed, instanced, GPU-generated primitives.
            </summary>
            <param name="bufferForArgs">A buffer containing the GPU generated primitives.</param>
            <param name="alignedByteOffsetForArgs">Offset to the start of the GPU generated primitives.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DrawInstancedIndirect(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer,System.UInt32)">
            <summary>
            Draw instanced, GPU-generated primitives.
            </summary>
            <param name="bufferForArgs">A buffer containing the GPU generated primitives.</param>
            <param name="alignedByteOffsetForArgs">Offset to the start of the GPU generated primitives.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.Dispatch(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Execute a command list from a thread group.
            </summary>
            <param name="threadGroupCountX">The number of groups dispatched in the x direction.</param>
            <param name="threadGroupCountY">The number of groups dispatched in the y direction.</param>
            <param name="threadGroupCountZ">The number of groups dispatched in the z direction.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DispatchIndirect(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer,System.UInt32)">
            <summary>
            Execute a command list over one or more thread groups.
            </summary>
            <param name="bufferForArgs">A buffer, which must be loaded with data that matches the argument list.</param>
            <param name="alignedByteOffsetForArgs">A byte-aligned offset between the start of the buffer and the arguments.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.RasterizerStageSetState(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RasterizerState)">
            <summary>
            Set the rasterizer state for the rasterizer stage of the pipeline.
            </summary>
            <param name="rasterizerState">A rasterizer-state interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.RasterizerStageSetViewports(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Viewport[])">
            <summary>
            Bind an array of viewports to the rasterizer stage of the pipeline.
            </summary>
            <param name="numViewports">Number of viewports to bind.</param>
            <param name="viewports">An array of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> structures to bind to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.RasterizerStageSetScissorRects(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Rect[])">
            <summary>
            Bind an array of scissor rectangles to the rasterizer stage.
            </summary>
            <param name="numRects">Number of scissor rectangles to bind.</param>
            <param name="rects">An array of scissor rectangles.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.CopySubresourceRegion(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Box@)">
            <summary>
            Copy a region from a source resource to a destination resource.
            </summary>
            <param name="destinationResource">The destination resource.</param>
            <param name="destinationSubresource">Destination subresource index.</param>
            <param name="destinationX">The x-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationY">The y-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationZ">The z-coordinate of the upper left corner of the destination region.</param>
            <param name="sourceResource">The source resource.</param>
            <param name="sourceSubresource">Source subresource index.</param>
            <param name="sourceBox">A 3D box that defines the source subresource that can be copied.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.CopyResource(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource)">
            <summary>
            Copy the entire contents of the source resource to the destination resource using the GPU.
            </summary>
            <param name="destinationResource">The destination resource.</param>
            <param name="sourceResource">The source resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.UpdateSubresource(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            The CPU copies data from memory to a subresource created in non-mappable memory.
            </summary>
            <param name="destinationResource">The destination resource.</param>
            <param name="destinationSubresource">A zero-based index, that identifies the destination subresource.</param>
            <param name="destinationBox">A box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures.</param>
            <param name="sourceData">A pointer to the source data in memory.</param>
            <param name="sourceRowPitch">The size of one row of the source data.</param>
            <param name="sourceDepthPitch">The size of one depth slice of source data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.CopyStructureCount(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView)">
            <summary>
            Copies data from a buffer holding variable length data.
            </summary>
            <param name="destinationBuffer">The destination buffer.</param>
            <param name="destinationAlignedByteOffset">Offset from the start of the buffer to write 32-bit UINT structure (vertex) count.</param>
            <param name="sourceView">A structured buffer resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ClearRenderTargetView(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView,System.Single[])">
            <summary>
            Set all the elements in a render target to one value.
            </summary>
            <param name="renderTargetView">The render target.</param>
            <param name="colorRGBA">A 4-component array that represents the color to fill the render target with.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ClearUnorderedAccessViewUInt(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView,System.UInt32[])">
            <summary>
            Clears an unordered access resource with bit-precise values.
            </summary>
            <param name="unorderedAccessView">The unordered access resource to clear.</param>
            <param name="values">Values to copy to corresponding channels.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ClearUnorderedAccessViewFloat(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView,System.Single[])">
            <summary>
            Clears an unordered access resource with a float value.
            </summary>
            <param name="unorderedAccessView">The unordered access resource to clear.</param>
            <param name="values">Values to copy to corresponding channels.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ClearDepthStencilView(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView,JeremyAnsel.DirectX.D3D11.D3D11ClearOptions,System.Single,System.Byte)">
            <summary>
            Clears the depth-stencil resource.
            </summary>
            <param name="depthStencilView">The depth stencil to be cleared.</param>
            <param name="clearOptions">Identify the type of data to clear.</param>
            <param name="depth">Clear the depth buffer with this value. This value will be clamped between 0 and 1.</param>
            <param name="stencil">Clear the stencil buffer with this value.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GenerateMips(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView)">
            <summary>
            Generates mipmaps for the given shader resource.
            </summary>
            <param name="shaderResourceView">The shader resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.SetResourceMinLod(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.Single)">
            <summary>
            Sets the minimum level-of-detail (LOD) for a resource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="minLod">The level-of-detail, which ranges between 0 and the maximum number of mipmap levels of the resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GetResourceMinLod(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource)">
            <summary>
            Gets the minimum level-of-detail (LOD).
            </summary>
            <param name="resource">The resource.</param>
            <returns>The minimum LOD.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ResolveSubresource(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Copy a multisampled resource into a non-multisampled resource.
            </summary>
            <param name="destinationResource">Destination resource.</param>
            <param name="destinationSubresource">A zero-based index, that identifies the destination subresource.</param>
            <param name="sourceResource">Source resource.</param>
            <param name="sourceSubresource">The source subresource of the source resource.</param>
            <param name="format">Indicates how the multisampled resource will be resolved to a single-sampled resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ExecuteCommandList(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11CommandList,System.Boolean)">
            <summary>
            Queues commands from a command list onto a device.
            </summary>
            <param name="commandList">A command list.</param>
            <param name="restoreContextState">A value indicating whether the target context state is saved prior to and restored after the execution of a command list.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.HullShaderSetShaderResources(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the hull shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="numViews">Number of shader resources to set.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.HullShaderSetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11HullShader,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance[],System.UInt32)">
            <summary>
            Set a hull shader to the device.
            </summary>
            <param name="hullShader">A hull shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance interfaces in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.HullShaderSetSamplers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the hull shader stage.
            </summary>
            <param name="startSlot">Index into the zero-based array to begin setting samplers to.</param>
            <param name="numSamplers">Number of samplers in the array.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.HullShaderSetConstantBuffers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer[])">
            <summary>
            Set the constant buffers used by the hull shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
            <param name="numBuffers">Number of buffers to set.</param>
            <param name="constantBuffers">Array of constant buffers being given to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DomainShaderSetShaderResources(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the domain shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="numViews">Number of shader resources to set.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DomainShaderSetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DomainShader,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance[],System.UInt32)">
            <summary>
            Set a domain shader to the device.
            </summary>
            <param name="domainShader">A domain shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance interfaces in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DomainShaderSetSamplers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the domain shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="numSamplers">Number of samplers in the array.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DomainShaderSetConstantBuffers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the domain shader stage.
            </summary>
            <param name="startSlot">Index into the zero-based array to begin setting constant buffers to.</param>
            <param name="numBuffers">Number of buffers to set.</param>
            <param name="constantBuffers">Array of constant buffers being given to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderSetShaderResources(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the compute shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="numViews">Number of shader resources to set.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderSetUnorderedAccessViews(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView[],System.UInt32[])">
            <summary>
            Sets an array of views for an unordered resource.
            </summary>
            <param name="startSlot">Index of the first element in the zero-based array to begin setting.</param>
            <param name="numUnorderedAccessViews">Number of views to set.</param>
            <param name="unorderedAccessViews">An array of unordered access views to be set.</param>
            <param name="uavInitialCounts">An array of append and consume buffer offsets. A value of <value>-1</value> indicates to keep the current offset.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderSetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ComputeShader,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance[],System.UInt32)">
            <summary>
            Set a compute shader to the device.
            </summary>
            <param name="computeShader">A compute shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance interfaces in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderSetSamplers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the compute shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="numSamplers">Number of samplers in the array.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderSetConstantBuffers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the compute shader stage.
            </summary>
            <param name="startSlot">Index into the zero-based array to begin setting constant buffers to.</param>
            <param name="numBuffers">Number of buffers to set.</param>
            <param name="constantBuffers">Array of constant buffers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.VertexShaderGetConstantBuffers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the constant buffers used by the vertex shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <param name="constantBuffers">Array of constant buffer interface pointers to be returned.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.PixelShaderGetShaderResources(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the pixel shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to be returned by the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.PixelShaderGetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11PixelShader@,System.Object[],System.UInt32@)">
            <summary>
            Get the pixel shader currently set on the device.
            </summary>
            <param name="pixelShader">A pixel shader.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.PixelShaderGetSamplers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get an array of sampler states from the pixel shader pipeline stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <param name="samplers">Array of sampler-state interface pointers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.VertexShaderGetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11VertexShader@,System.Object[],System.UInt32@)">
            <summary>
            Get the vertex shader currently set on the device.
            </summary>
            <param name="vertexShader">A vertex shader.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.PixelShaderGetConstantBuffers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the constant buffers used by the pixel shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <param name="constantBuffers">Array of constant buffer interface pointers to be returned.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.InputAssemblerGetInputLayout(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11InputLayout@)">
            <summary>
            Get a pointer to the input-layout object that is bound to the input-assembler stage.
            </summary>
            <param name="inputLayout">The input-layout object.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.InputAssemblerGetVertexBuffers(System.UInt32,System.UInt32,System.Object[],System.UInt32[],System.UInt32[])">
            <summary>
            Get the vertex buffers bound to the input-assembler stage.
            </summary>
            <param name="startSlot">The input slot of the first vertex buffer to get.</param>
            <param name="numBuffers">The number of vertex buffers to get starting at the offset.</param>
            <param name="vertexBuffers">An array of vertex buffers.</param>
            <param name="strides">An array of stride values.</param>
            <param name="offsets">An array of offset values.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.InputAssemblerGetIndexBuffer(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer@,JeremyAnsel.DirectX.Dxgi.DxgiFormat@,System.UInt32@)">
            <summary>
            Get a pointer to the index buffer that is bound to the input-assembler stage.
            </summary>
            <param name="indexBuffer">An index buffer.</param>
            <param name="format">The format of the data in the index buffer.</param>
            <param name="offset">Offset (in bytes) from the start of the index buffer, to the first index to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GeometryShaderGetConstantBuffers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the constant buffers used by the geometry shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <param name="constantBuffers">Array of constant buffer interface pointers to be returned.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GeometryShaderGetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11GeometryShader@,System.Object[],System.UInt32@)">
            <summary>
            Get the geometry shader currently set on the device.
            </summary>
            <param name="geometryShader">A geometry shader.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.InputAssemblerGetPrimitiveTopology(JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology@)">
            <summary>
            Get information about the primitive type, and data order that describes input data for the input assembler stage.
            </summary>
            <param name="topology">The type of primitive, and ordering of the primitive data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.VertexShaderGetShaderResources(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the vertex shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to be returned by the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.VertexShaderGetSamplers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get an array of sampler states from the vertex shader pipeline stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <param name="samplers">Array of sampler-state interface pointers to be returned by the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GetPredication(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate@,System.Boolean@)">
            <summary>
            Get the rendering predicate state.
            </summary>
            <param name="predicate">A predicate.</param>
            <param name="predicateValue">The predicate comparison value.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GeometryShaderGetShaderResources(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the geometry shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to be returned by the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GeometryShaderGetSamplers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get an array of sampler state interfaces from the geometry shader pipeline stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.OutputMergerGetRenderTargets(System.UInt32,System.Object[],JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView@)">
            <summary>
            Get pointers to the resources bound to the output-merger stage.
            </summary>
            <param name="numViews">Number of render targets to retrieve.</param>
            <param name="renderTargetViews">The render target views.</param>
            <param name="depthStencilView">A depth-stencil view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.OutputMergerGetRenderTargetsAndUnorderedAccessViews(System.UInt32,System.Object[],JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView@,System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get pointers to the resources bound to the output-merger stage.
            </summary>
            <param name="numRenderTargetViews">The number of render-target views to retrieve.</param>
            <param name="renderTargetViews">The render-target views.</param>
            <param name="depthStencilView">A depth-stencil view.</param>
            <param name="uavStartSlot">Index into a zero-based array to begin retrieving unordered-access views.</param>
            <param name="numUnorderedAccessViews">Number of unordered-access views to return.</param>
            <param name="unorderedAccessViews">The  unordered-access views that are retrieved.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.OutputMergerGetBlendState(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11BlendState@,System.Single[],System.UInt32@)">
            <summary>
            Get the blend state of the output-merger stage.
            </summary>
            <param name="blendState">A blend-state interface.</param>
            <param name="blendFactor">Array of blend factors, one for each RGBA component.</param>
            <param name="sampleMask">A sample mask.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.OutputMergerGetDepthStencilState(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilState@,System.UInt32@)">
            <summary>
            Gets the depth-stencil state of the output-merger stage.
            </summary>
            <param name="depthStencilState">A depth-stencil state interface.</param>
            <param name="stencilReference">The stencil reference value used in the depth-stencil test.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.StreamOutputGetTargets(System.UInt32,System.Object[])">
            <summary>
            Get the target output buffers for the stream-output stage of the pipeline.
            </summary>
            <param name="numBuffers">Number of buffers to get.</param>
            <param name="targets">An array of output buffers to be retrieved from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.RasterizerStageGetState(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RasterizerState@)">
            <summary>
            Get the rasterizer state from the rasterizer stage of the pipeline.
            </summary>
            <param name="rasterizerState">A rasterizer-state interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.RasterizerStageGetViewports(System.UInt32@,JeremyAnsel.DirectX.D3D11.D3D11Viewport[])">
            <summary>
            Gets the array of viewports bound to the rasterizer stage.
            </summary>
            <param name="numViewports">The number of viewports.</param>
            <param name="viewports">The viewports that are bound to the rasterizer stage.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.RasterizerStageGetScissorRects(System.UInt32@,JeremyAnsel.DirectX.D3D11.D3D11Rect[])">
            <summary>
            Get the array of scissor rectangles bound to the rasterizer stage.
            </summary>
            <param name="numRects">The number of scissor rectangles bound.</param>
            <param name="rects">An array of scissor rectangles.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.HullShaderGetShaderResources(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the hull shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to be returned by the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.HullShaderGetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11HullShader@,System.Object[],System.UInt32@)">
            <summary>
            Get the hull shader currently set on the device.
            </summary>
            <param name="hullShader">A hull shader.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.HullShaderGetSamplers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get an array of sampler state interfaces from the hull shader stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.HullShaderGetConstantBuffers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the constant buffers used by the hull shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <param name="constantBuffers">Array of constant buffer interface pointers to be returned by the method.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DomainShaderGetShaderResources(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the domain shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to be returned by the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DomainShaderGetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DomainShader@,System.Object[],System.UInt32@)">
            <summary>
            Get the domain shader currently set on the device.
            </summary>
            <param name="domainShader">A domain shader.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DomainShaderGetSamplers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get an array of sampler state interfaces from the domain shader stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.DomainShaderGetConstantBuffers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the constant buffers used by the domain shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <param name="constantBuffers">Array of constant buffer interface pointers to be returned by the method.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderGetShaderResources(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the compute shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to be returned by the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderGetUnorderedAccessViews(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Gets an array of views for an unordered resource.
            </summary>
            <param name="startSlot">Index of the first element in the zero-based array to return.</param>
            <param name="numUnorderedAccessViews">Number of views to get.</param>
            <param name="unorderedAccessViews">An array of interface pointers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderGetShader(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ComputeShader@,System.Object[],System.UInt32@)">
            <summary>
            Get the compute shader currently set on the device.
            </summary>
            <param name="computeShader">A compute shader.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderGetSamplers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get an array of sampler state interfaces from the compute shader stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ComputeShaderGetConstantBuffers(System.UInt32,System.UInt32,System.Object[])">
            <summary>
            Get the constant buffers used by the compute shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <param name="constantBuffers">Array of constant buffer interface pointers to be returned by the method.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.ClearState">
            <summary>
            Restore all default settings.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.Flush">
            <summary>
            Sends queued-up commands in the command buffer to the graphics processing unit (GPU).
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GetContextType">
            <summary>
            Gets the type of device context.
            </summary>
            <returns>The type of device context.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.GetContextOptions">
            <summary>
            Gets the initialization flags associated with the current deferred context.
            </summary>
            <returns>The options that were supplied to the <c>ContextFlags</c> parameter of <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateDeferredContext"/></returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext.FinishCommandList(System.Boolean)">
            <summary>
            Create a command list and record graphics commands into it.
            </summary>
            <param name="restoreDeferredContextState">A value indicating whether the runtime saves deferred context state before it executes <c>FinishCommandList</c> and restores it afterwards.</param>
            <returns>The recorded command list.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DomainShader">
            <summary>
            A domain shader interface manages an executable program (a domain shader) that controls the domain shader stage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DomainShader.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DomainShader.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DomainShader.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DomainShader.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11GeometryShader">
            <summary>
            A geometry shader interface manages an executable program (a geometry shader) that controls the geometry shader stage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11GeometryShader.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11GeometryShader.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11GeometryShader.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11GeometryShader.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11HullShader">
            <summary>
            A hull shader interface manages an executable program (a hull shader) that controls the hull shader stage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11HullShader.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11HullShader.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11HullShader.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11HullShader.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11InputLayout">
            <summary>
            An input-layout interface holds a definition of how to feed vertex data that is laid out in memory into the input-assembler stage of the graphics pipeline.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11InputLayout.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11InputLayout.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11InputLayout.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11InputLayout.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11PixelShader">
            <summary>
            A pixel shader interface manages an executable program (a pixel shader) that controls the pixel shader stage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11PixelShader.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11PixelShader.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11PixelShader.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11PixelShader.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate">
            <summary>
            A predicate interface determines whether geometry should be processed depending on the results of a previous draw call.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Query"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate.GetDataSize">
            <summary>
            Get the size of the data (in bytes) that is output when calling <c>GetData</c>.
            </summary>
            <returns>The size of the data (in bytes) that is output when calling <c>GetData</c>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11QueryDesc@)">
            <summary>
            Get a query description.
            </summary>
            <param name="desc">A query description.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Query">
            <summary>
            A query interface queries information from the GPU.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Asynchronous"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Query.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Query.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Query.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Query.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Query.GetDataSize">
            <summary>
            Get the size of the data (in bytes) that is output when calling <c>GetData</c>.
            </summary>
            <returns>The size of the data (in bytes) that is output when calling <c>GetData</c>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Query.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11QueryDesc@)">
            <summary>
            Get a query description.
            </summary>
            <param name="desc">A query description.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RasterizerState">
            <summary>
            The rasterizer-state interface holds a description for rasterizer state that you can bind to the rasterizer stage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RasterizerState.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RasterizerState.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RasterizerState.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RasterizerState.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RasterizerState.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc@)">
            <summary>
            Gets the description for rasterizer state that you used to create the rasterizer-state object.
            </summary>
            <param name="desc">A description of the rasterizer state.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView">
            <summary>
            A render-target-view interface identifies the render-target subresources that can be accessed during rendering.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView.GetResource(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource@)">
            <summary>
            Get the resource that is accessed through this view.
            </summary>
            <param name="resource">The resource that is accessed through this view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc@)">
            <summary>
            Get the properties of a render target view.
            </summary>
            <param name="desc">The description of a render target view.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource">
            <summary>
            A resource interface provides common actions on all resources.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource.GetDimension(JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension@)">
            <summary>
            Get the type of the resource.
            </summary>
            <param name="dimension">The resource type.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource.SetEvictionPriority(JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority)">
            <summary>
            Set the eviction priority of a resource.
            </summary>
            <param name="evictionPriority">The eviction priority for the resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource.GetEvictionPriority">
            <summary>
            Get the eviction priority of a resource.
            </summary>
            <returns>The eviction priority for the resource.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState">
            <summary>
            The sampler-state interface holds a description for sampler state that you can bind to any shader stage of the pipeline for reference by texture sample operations.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc@)">
            <summary>
            Gets the description for sampler state that you used to create the sampler-state object.
            </summary>
            <param name="desc">A description of the sampler state.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView">
            <summary>
            A shader-resource-view interface specifies the subresources a shader can access during rendering.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView.GetResource(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource@)">
            <summary>
            Get the resource that is accessed through this view.
            </summary>
            <param name="resource">The resource that is accessed through this view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc@)">
            <summary>
            Get the shader resource view's description.
            </summary>
            <param name="desc">The data about the shader resource view.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D">
            <summary>
            A 1D texture interface accesses texel data, which is structured memory.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D.GetDimension(JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension@)">
            <summary>
            Get the type of the resource.
            </summary>
            <param name="dimension">The resource type.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D.SetEvictionPriority(JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority)">
            <summary>
            Set the eviction priority of a resource.
            </summary>
            <param name="evictionPriority">The eviction priority for the resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D.GetEvictionPriority">
            <summary>
            Get the eviction priority of a resource.
            </summary>
            <returns>The eviction priority for the resource.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc@)">
            <summary>
            Get the properties of the texture resource.
            </summary>
            <param name="desc">A resource description.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D">
            <summary>
            A 2D texture interface manages texel data, which is structured memory.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D.GetDimension(JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension@)">
            <summary>
            Get the type of the resource.
            </summary>
            <param name="dimension">The resource type.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D.SetEvictionPriority(JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority)">
            <summary>
            Set the eviction priority of a resource.
            </summary>
            <param name="evictionPriority">The eviction priority for the resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D.GetEvictionPriority">
            <summary>
            Get the eviction priority of a resource.
            </summary>
            <returns>The eviction priority for the resource.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc@)">
            <summary>
            Get the properties of the texture resource.
            </summary>
            <param name="desc">A resource description.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D">
            <summary>
            A 3D texture interface accesses texel data, which is structured memory.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D.GetDimension(JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension@)">
            <summary>
            Get the type of the resource.
            </summary>
            <param name="dimension">The resource type.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D.SetEvictionPriority(JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority)">
            <summary>
            Set the eviction priority of a resource.
            </summary>
            <param name="evictionPriority">The eviction priority for the resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D.GetEvictionPriority">
            <summary>
            Get the eviction priority of a resource.
            </summary>
            <returns>The eviction priority for the resource.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc@)">
            <summary>
            Get the properties of the texture resource.
            </summary>
            <param name="desc">A resource description.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView">
            <summary>
            A view interface specifies the parts of a resource the pipeline can access during rendering.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView.GetResource(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource@)">
            <summary>
            Get the resource that is accessed through this view.
            </summary>
            <param name="resource">The resource that is accessed through this view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView.GetDesc(JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc@)">
            <summary>
            Get a description of the resource.
            </summary>
            <param name="desc">A resource description.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11VertexShader">
            <summary>
            A vertex shader interface manages an executable program (a vertex shader) that controls the vertex shader stage.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11VertexShader.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11VertexShader.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11VertexShader.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11VertexShader.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View">
            <summary>
            A view interface specifies the parts of a resource the pipeline can access during rendering.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceChild"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View.GetDevice(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@)">
            <summary>
            Get a pointer to the device that created this interface.
            </summary>
            <param name="device">A device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get application-defined data from a device.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer.</param>
            <param name="data">A pointer to a buffer that will be filled with data from the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Set data to a device and associate that data with a guid.
            </summary>
            <param name="name">The Guid associated with the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">The data to be stored with this device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Associate an IUnknown-derived interface with this device child and associate that interface with an application-defined guid.
            </summary>
            <param name="name">The Guid associated with the interface.</param>
            <param name="unknown">An <c>IUnknown</c>-derived interface to be associated with the device child.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11View.GetResource(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Resource@)">
            <summary>
            Get the resource that is accessed through this view.
            </summary>
            <param name="resource">The resource that is accessed through this view.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Asynchronous">
            <summary>
            This interface encapsulates methods for retrieving data from the GPU asynchronously.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Asynchronous.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Asynchronous"/> class.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Asynchronous.DataSize">
            <summary>
            Gets the size of the data (in bytes) that is output when calling <c>GetData</c>.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BlendState">
            <summary>
            The blend-state interface holds a description for blending state that you can bind to the output-merger stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendState.blendState">
            <summary>
            The D3D11 blend state interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BlendState.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11BlendState)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BlendState"/> class.
            </summary>
            <param name="blendState">A D3D11 blend state interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BlendState.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BlendState.Description">
            <summary>
            Gets the description for blending state that you used to create the blend-state object.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Buffer">
            <summary>
            A buffer interface accesses a buffer resource, which is unstructured memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Buffer.buffer">
            <summary>
            The D3D11 buffer interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Buffer.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Buffer)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Buffer"/> class.
            </summary>
            <param name="buffer">A D3D11 buffer interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Buffer.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Buffer.Description">
            <summary>
            Gets the properties of a buffer resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ClassInstance">
            <summary>
            This interface encapsulates an HLSL class.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassInstance.classInstance">
            <summary>
            The D3D11 class instance interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassInstance.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ClassInstance"/> class.
            </summary>
            <param name="classInstance">A D3D11 class instance interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstance.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstance.Description">
            <summary>
            Gets a description of the current HLSL class.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstance.InstanceName">
            <summary>
            Gets the instance name of the current HLSL class.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstance.TypeName">
            <summary>
            Gets the type of the current HLSL class.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassInstance.GetClassLinkage">
            <summary>
            Gets the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage"/> object associated with the current HLSL class.
            </summary>
            <returns>A class linkage object.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage">
            <summary>
            This interface encapsulates an HLSL dynamic linkage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage.classLinkage">
            <summary>
            The D3D11 class linkage interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ClassLinkage)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage"/> class.
            </summary>
            <param name="classLinkage">A D3D11 class linkage interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage.GetClassInstance(System.String,System.UInt32)">
            <summary>
            Gets the class-instance object that represents the specified HLSL class.
            </summary>
            <param name="name">The name of a class for which to get the class instance.</param>
            <param name="index">The index of the class instance.</param>
            <returns>A class instance interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage.CreateClassInstance(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a class-instance object that represents an HLSL class instance.
            </summary>
            <param name="classTypeName">The type name of a class to initialize.</param>
            <param name="constantBufferOffset">Identifies the constant buffer that contains the class data.</param>
            <param name="constantVectorOffset">The four-component vector offset from the start of the constant buffer where the class data will begin. Consequently, this is not a byte offset.</param>
            <param name="textureOffset">The texture slot for the first texture; there may be multiple textures following the offset.</param>
            <param name="samplerOffset">The sampler slot for the first sampler; there may be multiple samplers following the offset.</param>
            <returns>A class instance interface.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11CommandList">
            <summary>
            Encapsulates a list of graphics commands for play back.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CommandList.commandList">
            <summary>
            The D3D11 command list interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CommandList.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11CommandList)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CommandList"/> class.
            </summary>
            <param name="commandList">A D3D11 command list interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11CommandList.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ComputeShader">
            <summary>
            A compute shader interface manages an executable program (a compute shader) that controls the compute shader stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComputeShader.computeShader">
            <summary>
            The D3D11 compute shader interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ComputeShader.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ComputeShader)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ComputeShader"/> class.
            </summary>
            <param name="computeShader">A D3D11 compute shader interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ComputeShader.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Constants">
            <summary>
            Constants generated from the D3D11 hardware spec.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel91ReqTexture1DDimension">
            <summary>
            Feature Level 9.1 Req Texture 1D Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel93ReqTexture1DDimension">
            <summary>
            Feature Level 9.3 Req Texture 1D Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel91ReqTexture2DDimension">
            <summary>
            Feature Level 9.1 Req Texture 2D Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel93ReqTexture2DDimension">
            <summary>
            Feature Level 9.3 Req Texture 2D Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel91ReqTextureCubeDimension">
            <summary>
            Feature Level 9.1 Req Texture Cube Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel93ReqTextureCubeDimension">
            <summary>
            Feature Level 9.3 Req Texture Cube Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel91ReqTexture3DDimension">
            <summary>
            Feature Level 9.1 Req Texture 3D Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel91DefaultMaxAnisotropy">
            <summary>
            Feature Level 9.1 Default Max Anisotropy.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel91InputAssemblerPrimitiveMaxCount">
            <summary>
            Feature Level 9.1 Input Assembler Primitive Max Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel92InputAssemblerPrimitiveMaxCount">
            <summary>
            Feature Level 9.2 Input Assembler Primitive Max Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel91SimultaneousRenderTargetCount">
            <summary>
            Feature Level 9.1 Simultaneous Render Target Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel93SimultaneousRenderTargetCount">
            <summary>
            Feature Level 9.3 Simultaneous Render Target Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel91MaxTextureRepeat">
            <summary>
            Feature Level 9.1 Max Texture Repeat.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel92MaxTextureRepeat">
            <summary>
            Feature Level 9.2 Max Texture Repeat.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FeatureLevel93MaxTextureRepeat">
            <summary>
            Feature Level 9.3 Max Texture Repeat.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.IndexStripCutValue16Bit">
            <summary>
            Index Strip Cut Value 16-Bit.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.IndexStripCutValue32Bit">
            <summary>
            Index Strip Cut Value 32-Bit.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.IndexStripCutValue8Bit">
            <summary>
            Index Strip Cut Value 8-Bit.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ArrayAxisAddressRangeBitCount">
            <summary>
            Array Axis Address Range Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ClipOrCullDistanceCull">
            <summary>
            Clip Or Cull Distance Cull.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ClipOrCullDistanceElementCount">
            <summary>
            Clip Or Cull Distance Element Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderConstantBufferApiSlotCount">
            <summary>
            Common Shader Constant Buffer Api Slot Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderConstantBufferComponents">
            <summary>
            Common Shader Constant Buffer Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderConstantBufferComponentBitCount">
            <summary>
            Common Shader Constant Buffer Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderConstantBufferHardwareSlotCount">
            <summary>
            Common Shader Constant Buffer Hardware Slot Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderConstantBufferPartialUpdateExtentsByteAlignment">
            <summary>
            Common Shader Constant Buffer Partial Update Extents Byte Alignment.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderConstantBufferRegisterComponents">
            <summary>
            Common Shader Constant Buffer Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderConstantBufferRegisterCount">
            <summary>
            Common Shader Constant Buffer Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderConstantBufferRegisterReadsPerInstance">
            <summary>
            Common Shader Constant Buffer Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderConstantBufferRegisterReadPorts">
            <summary>
            Common Shader Constant Buffer Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderFlowControlNestingLimit">
            <summary>
            Common Shader Flow Control Nesting Limit.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderImmediateConstantBufferRegisterComponents">
            <summary>
            Common Shader Immediate Constant Buffer Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderImmediateConstantBufferRegisterCount">
            <summary>
            Common Shader Immediate Constant Buffer Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderImmediateConstantBufferRegisterReadsPerInstance">
            <summary>
            Common Shader Immediate Constant Buffer Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderImmediateConstantBufferRegisterReadPorts">
            <summary>
            Common Shader Immediate Constant Buffer Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderImmediateValueComponentBitCount">
            <summary>
            Common Shader Immediate Value Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderInputResourceRegisterComponents">
            <summary>
            Common Shader Input Resource Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderInputResourceRegisterCount">
            <summary>
            Common Shader Input Resource Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderInputResourceRegisterReadsPerInstance">
            <summary>
            Common Shader Input Resource Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderInputResourceRegisterReadPorts">
            <summary>
            Common Shader Input Resource Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderInputResourceSlotCount">
            <summary>
            Common Shader Input Resource Slot Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderSamplerRegisterComponents">
            <summary>
            Common Shader Sampler Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderSamplerRegisterCount">
            <summary>
            Common Shader Sampler Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderSamplerRegisterReadsPerInstance">
            <summary>
            Common Shader Sampler Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderSamplerRegisterReadPorts">
            <summary>
            Common Shader Sampler Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderSamplerSlotCount">
            <summary>
            Common Shader Sampler Slot Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderSubroutineNestingLimit">
            <summary>
            Common Shader Subroutine Nesting Limit.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderTempRegisterComponents">
            <summary>
            Common Shader Temp Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderTempRegisterComponentBitCount">
            <summary>
            Common Shader Temp Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderTempRegisterCount">
            <summary>
            Common Shader Temp Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderTempRegisterReadsPerInstance">
            <summary>
            Common Shader Temp Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderTempRegisterReadPorts">
            <summary>
            Common Shader Temp Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderTexCoordRangeReductionMax">
            <summary>
            Common Shader Tex Coord Range Reduction Max.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderTexCoordRangeReductionMin">
            <summary>
            Common Shader Tex Coord Range Reduction Min.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderTexelOffsetMaxNegative">
            <summary>
            Common Shader Texel Offset Max Negative.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.CommonShaderTexelOffsetMaxPositive">
            <summary>
            Common Shader Texel Offset Max Positive.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket00MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 00 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket00MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 00 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket01MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 01 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket01MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 01 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket02MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 02 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket02MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 02 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket03MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 03 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket03MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 03 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket04MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 04 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket04MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 04 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket05MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 05 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket05MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 05 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket06MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 06 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket06MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 06 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket07MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 07 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket07MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 07 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket08MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 08 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket08MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 08 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket09MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 09 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket09MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 09 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket10MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 10 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket10MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 10 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket11MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 11 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket11MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 11 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket12MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 12 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket12MaxThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 12 Max Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucker13MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucker 13 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket13MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 13 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket14MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 14 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket14MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 14 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket15MaxBytesTgsmWritablePerThread">
            <summary>
            Compute Shader 4X Bucket 15 Max Bytes Tgsm Writable Per Thread.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XBucket15MaxNumThreadsPerGroup">
            <summary>
            Compute Shader 4X Bucket 15 Max Num Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XDispatchMaxThreadGroupsInZDimension">
            <summary>
            Compute Shader 4X Dispatch Max Thread Groups In Z Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XRawUavByteAlignment">
            <summary>
            Compute Shader 4X Raw UAV Byte Alignment.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XThreadGroupMaxThreadsPerGroup">
            <summary>
            Compute Shader 4X Thread Group Max Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XThreadGroupMaxX">
            <summary>
            Compute Shader 4X Thread Group Max X.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XThreadGroupMaxY">
            <summary>
            Compute Shader 4X Thread Group Max Y.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShader4XUavRegisterCount">
            <summary>
            Compute Shader 4X UAV Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderDispatchMaxThreadGroupsPerDimension">
            <summary>
            Compute Shader Dispatch Max Thread Groups Per Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderTgsmRegisterCount">
            <summary>
            Compute Shader Tgsm Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderTgsmRegisterReadsPerInstance">
            <summary>
            Compute Shader Tgsm Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderTgsmResourceRegisterComponents">
            <summary>
            Compute Shader Tgsm Resource Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderTgsmResourceRegisterReadPorts">
            <summary>
            Compute Shader Tgsm Resource Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadGroupIdRegisterComponents">
            <summary>
            Compute Shader Thread Group Id Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadGroupIdRegisterCount">
            <summary>
            Compute Shader Thread Group Id Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadIdInGroupFlattenedRegisterComponents">
            <summary>
            Compute Shader Thread Id In Group Flattened Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadIdInGroupFlattenedRegisterCount">
            <summary>
            Compute Shader Thread Id In Group Flattened Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadIdInGroupRegisterComponents">
            <summary>
            Compute Shader Thread Id In Group Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadIdInGroupRegisterCount">
            <summary>
            Compute Shader Thread Id In Group Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadIdRegisterComponents">
            <summary>
            Compute Shader Thread Id Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadIdRegisterCount">
            <summary>
            Compute Shader Thread Id Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadGroupMaxThreadsPerGroup">
            <summary>
            Compute Shader Thread Group Max Threads Per Group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadGroupMaxX">
            <summary>
            Compute Shader Thread Group Max X.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadGroupMaxY">
            <summary>
            Compute Shader Thread Group Max Y.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadGroupMaxZ">
            <summary>
            Compute Shader Thread Group Max Z.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadGroupMinX">
            <summary>
            Compute Shader Thread Group Min X.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadGroupMinY">
            <summary>
            Compute Shader Thread Group Min Y.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadGroupMinZ">
            <summary>
            Compute Shader Thread Group Min Z.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ComputeShaderThreadLocalTempRegisterPool">
            <summary>
            Compute Shader Thread Local Temp Register Pool.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultBlendFactorAlpha">
            <summary>
            Default Blend Factor Alpha.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultBlendFactorBlue">
            <summary>
            Default Blend Factor Blue.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultBlendFactorGreen">
            <summary>
            Default Blend Factor Green.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultBlendFactorRed">
            <summary>
            Default Blend Factor Red
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultBorderColorComponent">
            <summary>
            Default Border Color Component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultDepthBias">
            <summary>
            Default Depth Bias.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultDepthBiasClamp">
            <summary>
            Default Depth Bias Clamp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultMaxAnisotropy">
            <summary>
            Default Max Anisotropy.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultMipLodBias">
            <summary>
            Default Mip Lod Bias.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultRenderTargetArrayIndex">
            <summary>
            Default Render Target Array Index.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultSampleMask">
            <summary>
            Default Sample Mask.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultScissorEndX">
            <summary>
            Default Scissor End X.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultScissorEndY">
            <summary>
            Default Scissor End Y.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultScissorStartX">
            <summary>
            Default Scissor Start X.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultScissorStartY">
            <summary>
            Default Scissor Start Y.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultSlopeScaledDepthBias">
            <summary>
            Default Slope Scaled Depth Bias.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultStencilReadMask">
            <summary>
            Default Stencil Read Mask.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultStencilReference">
            <summary>
            Default Stencil Reference.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultStencilWriteMask">
            <summary>
            Default Stencil Write Mask.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultViewportAndScissorRectIndex">
            <summary>
            Default Viewport And Scissor Rect Index.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultViewportHeight">
            <summary>
            Default Viewport Height.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultViewportMaxDepth">
            <summary>
            Default Viewport Max Depth.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultViewportMinDepth">
            <summary>
            Default Viewport Min Depth.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultViewportTopLeftX">
            <summary>
            Default Viewport Top Left X.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultViewportTopLeftY">
            <summary>
            Default Viewport Top Left Y.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DefaultViewportWidth">
            <summary>
            Default Viewport Width.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputControlPointsMaxTotalScalars">
            <summary>
            Domain Shader Input Control Points Max Total Scalars.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputControlPointRegisterComponents">
            <summary>
            Domain Shader Input Control Point Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputControlPointRegisterComponentBitCount">
            <summary>
            Domain Shader Input Control Point Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputControlPointRegisterCount">
            <summary>
            Domain Shader Input Control Point Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputControlPointRegisterReadsPerInstance">
            <summary>
            Domain Shader Input Control Point Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputControlPointRegisterReadPorts">
            <summary>
            Domain Shader Input Control Point Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputDomainPointRegisterComponents">
            <summary>
            Domain Shader Input Domain Point Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputDomainPointRegisterComponentBitCount">
            <summary>
            Domain Shader Input Domain Point Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputDomainPointRegisterCount">
            <summary>
            Domain Shader Input Domain Point Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputDomainPointRegisterReadsPerInstance">
            <summary>
            Domain Shader Input Domain Point Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputDomainPointRegisterReadPorts">
            <summary>
            Domain Shader Input Domain Point Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPatchConstantRegisterComponents">
            <summary>
            Domain Shader Input Patch Constant Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPatchConstantRegisterBitCount">
            <summary>
            Domain Shader Input Patch Constant Register Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPatchConstantRegisterCount">
            <summary>
            Domain Shader Input Patch Constant Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPatchConstantRegisterReadsPerInstance">
            <summary>
            Domain Shader Input Patch Constant Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPatchConstantRegisterReadPorts">
            <summary>
            Domain Shader Input Patch Constant Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPrimitiveIdRegisterComponents">
            <summary>
            Domain Shader Input Primitive Id Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPrimitiveIdRegisterBitCount">
            <summary>
            Domain Shader Input Primitive Id Register Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPrimitiveIdRegisterCount">
            <summary>
            Domain Shader Input Primitive Id Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPrimitiveIdRegisterReadsPerInstance">
            <summary>
            Domain Shader Input Primitive Id Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderInputPrimitiveIdRegisterReadPorts">
            <summary>
            Domain Shader Input Primitive Id Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderOutputRegisterComponents">
            <summary>
            Domain Shader Output Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderOutputRegisterComponentBitCount">
            <summary>
            Domain Shader Output Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.DomainShaderOutputRegisterCount">
            <summary>
            Domain Shader Output Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.Float16FusedToleranceInUlp">
            <summary>
            Float16 Fused Tolerance In Ulp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.Float32Max">
            <summary>
            Float32 Max.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.Float32ToIntegerToleranceInUlp">
            <summary>
            Float32 To Integer Tolerance In Ulp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToSrgbExponentDenominator">
            <summary>
            Float To Srgb Exponent Denominator.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToSrgbExponentNumerator">
            <summary>
            Float To Srgb Exponent Numerator.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToSrgbOffset">
            <summary>
            Float To Srgb Offset.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToSrgbScale1">
            <summary>
            Float To Srgb Scale 1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToSrgbScale2">
            <summary>
            Float To Srgb Scale 2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToSrgbThreshold">
            <summary>
            Float To Srgb Threshold.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToIntInstructionMaxInput">
            <summary>
            Float To Int Instruction Max Input.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToIntInstructionMinInput">
            <summary>
            Float To Int Instruction Min Input.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToUIntInstructionMaxInput">
            <summary>
            Float To UInt Instruction Max Input.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.FloatToUintInstructionMinInput">
            <summary>
            Float To Uint Instruction Min Input.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputInstanceIdReadsPerInstance">
            <summary>
            Geometry Shader Input Instance Id Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputInstanceIdReadPorts">
            <summary>
            Geometry Shader Input Instance Id Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputInstanceIdRegisterComponents">
            <summary>
            Geometry Shader Input Instance Id Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputInstanceIdRegisterComponentBitCount">
            <summary>
            Geometry Shader Input Instance Id Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputInstanceIdRegisterCount">
            <summary>
            Geometry Shader Input Instance Id Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputPrimConstRegisterComponents">
            <summary>
            Geometry Shader Input Prim Const Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputPrimConstRegisterComponentBitCount">
            <summary>
            Geometry Shader Input Prim Const Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputPrimConstRegisterCount">
            <summary>
            Geometry Shader Input Prim Const Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputPrimConstRegisterReadsPerInstance">
            <summary>
            Geometry Shader Input Prim Const Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputPrimConstRegisterReadPorts">
            <summary>
            Geometry Shader Input Prim Const Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputRegisterComponents">
            <summary>
            Geometry Shader Input Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputRegisterComponentBitCount">
            <summary>
            Geometry Shader Input Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputRegisterCount">
            <summary>
            Geometry Shader Input Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputRegisterReadsPerInstance">
            <summary>
            Geometry Shader Input Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputRegisterReadPorts">
            <summary>
            Geometry Shader Input Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderInputRegisterVertices">
            <summary>
            Geometry Shader Input Register Vertices.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderMaxInstanceCount">
            <summary>
            Geometry Shader Max Instance Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderMaxOutputVertexCountAcrossInstances">
            <summary>
            Geometry Shader Max Output Vertex Count Across Instances.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderOutputElements">
            <summary>
            Geometry Shader Output Elements.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderOutputRegisterComponents">
            <summary>
            Geometry Shader Output Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderOutputRegisterComponentBitCount">
            <summary>
            Geometry Shader Output Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.GeometryShaderOutputRegisterCount">
            <summary>
            Geometry Shader Output Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderControlPointPhaseInputRegisterCount">
            <summary>
            Hull Shader Control Point Phase Input Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderControlPointPhaseOutputRegisterCount">
            <summary>
            Hull Shader Control Point Phase Output Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderControlPointRegisterComponents">
            <summary>
            Hull Shader Control Point Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderControlPointRegisterComponentBitCount">
            <summary>
            Hull Shader Control Point Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderControlPointRegisterReadsPerInstance">
            <summary>
            Hull Shader Control Point Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderControlPointRegisterReadPorts">
            <summary>
            Hull Shader Control Point Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderForkPhaseInstanceCountUpperBound">
            <summary>
            Hull Shader Fork Phase Instance Count Upper Bound.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputForkInstanceIdRegisterComponents">
            <summary>
            Hull Shader Input Fork Instance Id Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputForkInstanceIdRegisterComponentBitCount">
            <summary>
            Hull Shader Input Fork Instance Id Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputForkInstanceIdRegisterCount">
            <summary>
            Hull Shader Input Fork Instance Id Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputForkInstanceIdRegisterReadsPerInstance">
            <summary>
            Hull Shader Input Fork Instance Id Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputForkInstanceIdRegisterReadPorts">
            <summary>
            Hull Shader Input Fork Instance Id Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputJoinInstanceIdRegisterComponents">
            <summary>
            Hull Shader Input Join Instance Id Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputJoinInstanceIdRegisterComponentBitCount">
            <summary>
            Hull Shader Input Join Instance Id Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputJoinInstanceIdRegisterCount">
            <summary>
            Hull Shader Input Join Instance Id Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputJoinInstanceIdRegisterReadsPerInstance">
            <summary>
            Hull Shader Input Join Instance Id Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputJoinInstanceIdRegisterReadPorts">
            <summary>
            Hull Shader Input Join Instance Id Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputPrimitiveIdRegisterComponents">
            <summary>
            Hull Shader Input Primitive Id Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputPrimitiveIdRegisterComponentBitCount">
            <summary>
            Hull Shader Input Primitive Id Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputPrimitiveIdRegisterCount">
            <summary>
            Hull Shader Input Primitive Id Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputPrimitiveIdRegisterReadsPerInstance">
            <summary>
            Hull Shader Input Primitive Id Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderInputPrimitiveIdRegisterReadPorts">
            <summary>
            Hull Shader Input Primitive Id Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderJoinPhaseInstanceCountUpperBound">
            <summary>
            Hull Shader Join Phase Instance Count Upper Bound.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderMaxTessellationFactorLowerBound">
            <summary>
            Hull Shader Max Tessellation Factor Lower Bound.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderMaxTessellationFactorUpperBound">
            <summary>
            Hull Shader Max Tessellation Factor Upper Bound.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputControlPointsMaxTotalScalars">
            <summary>
            Hull Shader Output Control Points Max Total Scalars.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputControlPointIdRegisterComponents">
            <summary>
            Hull Shader Output Control Point Id Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputControlPointIdRegisterComponentBitCount">
            <summary>
            Hull Shader Output Control Point Id Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputControlPointIdRegisterCount">
            <summary>
            Hull Shader Output Control Point Id Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputControlPointIdRegisterReadsPerInstance">
            <summary>
            Hull Shader Output Control Point Id Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputControlPointIdRegisterReadPorts">
            <summary>
            Hull Shader Output Control Point Id Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputPatchConstantRegisterComponents">
            <summary>
            Hull Shader Output Patch Constant Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputPatchConstantRegisterComponentBitCount">
            <summary>
            Hull Shader Output Patch Constant Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputPatchConstantRegisterCount">
            <summary>
            Hull Shader Output Patch Constant Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputPatchConstantRegisterReadsPerInstance">
            <summary>
            Hull Shader Output Patch Constant Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputPatchConstantRegisterReadPorts">
            <summary>
            Hull Shader Output Patch Constant Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.HullShaderOutputPatchConstantRegisterScalarComponents">
            <summary>
            Hull Shader Output Patch Constant Register Scalar Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerDefaultIndexBufferOffsetInBytes">
            <summary>
            Input Assembler Default Index Buffer Offset In Bytes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerDefaultPrimitiveTopology">
            <summary>
            Input Assembler Default Primitive Topology.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerDefaultVertexBufferOffsetInBytes">
            <summary>
            Input Assembler Default Vertex Buffer Offset In Bytes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerIndexInputResourceSlotCount">
            <summary>
            Input Assembler Index Input Resource Slot Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerInstanceIdBitCount">
            <summary>
            Input Assembler Instance Id Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerIntegerArithmeticBitCount">
            <summary>
            Input Assembler Integer Arithmetic Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerPatchMaxControlPointCount">
            <summary>
            Input Assembler Patch Max Control Point Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerPrimitiveIdBitCount">
            <summary>
            Input Assembler Primitive Id Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerVertexIdBitCount">
            <summary>
            Input Assembler Vertex Id Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerVertexInputResourceSlotCount">
            <summary>
            Input Assembler Vertex Input Resource Slot Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerVertexInputStructureElementsComponents">
            <summary>
            Input Assembler Vertex Input Structure Elements Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.InputAssemblerVertexInputStructureElementCount">
            <summary>
            Input Assembler Vertex Input Structure Element Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.IntegerDivideByZeroQuotient">
            <summary>
            Integer Divide By Zero Quotient.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.IntegerDivideByZeroRemainder">
            <summary>
            Integer Divide By Zero Remainder.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.KeepRenderTargetsAndDepthStencil">
            <summary>
            Keep Render Targets And Depth Stencil.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.KeepUnorderedAccessViews">
            <summary>
            Keep Unordered Access Views.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.LinearGamma">
            <summary>
            Linear Gamma.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MajorVersion">
            <summary>
            Major Version.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MaxBorderColorComponent">
            <summary>
            Max Border Color Component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MaxDepth">
            <summary>
            Max Depth.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MaxAnisotropy">
            <summary>
            Max Anisotropy.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MaxMultisampleSampleCount">
            <summary>
            Max Multisample Sample Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MaxPositionValue">
            <summary>
            Max Position Value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MaxTextureDimension2ToExp">
            <summary>
            Max Texture Dimension 2 To Exp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MinorVersion">
            <summary>
            Minor Version.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MinBorderColorComponent">
            <summary>
            Min Border Color Component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MinDepth">
            <summary>
            Min Depth.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MinMaxAnisotropy">
            <summary>
            Min Max Anisotropy.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MipLodBiasMax">
            <summary>
            Mip Lod Bias Max.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MipLodBiasMin">
            <summary>
            Mip Lod Bias Min.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MipLodFractionalBitCount">
            <summary>
            Mip Lod Fractional Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MipLodRangeBitCount">
            <summary>
            Mip Lod Range Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.MultisampleAntialiasLineWidth">
            <summary>
            Multisample Antialias Line Width.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.NonSampleFetchOutOfRangeAccessResult">
            <summary>
            Non Sample Fetch Out Of Range Access Result.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelAddressRangeBitCount">
            <summary>
            Pixel Address Range Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PreScissorPixelAddressRangeBitCount">
            <summary>
            Pre Scissor Pixel Address Range Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderComputeShaderUavRegisterComponents">
            <summary>
            Pixel Shader Compute Shader UAV Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderComputeShaderUavRegisterCount">
            <summary>
            Pixel Shader Compute Shader UAV Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderComputeShaderUavRegisterReadsPerInstance">
            <summary>
            Pixel Shader Compute Shader UAV Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderComputeShaderUavRegisterReadPorts">
            <summary>
            Pixel Shader Compute Shader UAV Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderFrontFacingDefaultValue">
            <summary>
            Pixel Shader Front Facing Default Value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderFrontFacingFalseValue">
            <summary>
            Pixel Shader Front Facing False Value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderFrontFacingTrueValue">
            <summary>
            Pixel Shader Front Facing True Value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderInputRegisterComponents">
            <summary>
            Pixel Shader Input Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderInputRegisterComponentBitCount">
            <summary>
            Pixel Shader Input Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderInputRegisterCount">
            <summary>
            Pixel Shader Input Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderInputRegisterReadsPerInstance">
            <summary>
            Pixel Shader Input Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderInputRegisterReadPorts">
            <summary>
            Pixel Shader Input Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderLegacyPixelCenterFractionalComponent">
            <summary>
            Pixel Shader Legacy Pixel Center Fractional Component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderOutputDepthRegisterComponents">
            <summary>
            Pixel Shader Output Depth Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderOutputDepthRegisterComponentBitCount">
            <summary>
            Pixel Shader Output Depth Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderOutputDepthRegisterCount">
            <summary>
            Pixel Shader Output Depth Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderOutputMaskRegisterComponents">
            <summary>
            Pixel Shader Output Mask Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderOutputMaskRegisterComponentBitCount">
            <summary>
            Pixel Shader Output Mask Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderOutputMaskRegisterCount">
            <summary>
            Pixel Shader Output Mask Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderOutputRegisterComponents">
            <summary>
            Pixel Shader Output Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderOutputRegisterComponentBitCount">
            <summary>
            Pixel Shader Output Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderOutputRegisterCount">
            <summary>
            Pixel Shader Output Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.PixelShaderPixelCenterFractionalComponent">
            <summary>
            Pixel Shader Pixel Center Fractional Component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.RawUavSrvByteAlignment">
            <summary>
            Raw UAV SRV Byte Alignment.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqBlendObjectCountPerDevice">
            <summary>
            Req Blend Object Count Per Device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqBufferResourceTexelCount2ToExp">
            <summary>
            Req Buffer Resource Texel Count 2 To Exp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqConstantBufferElementCount">
            <summary>
            Req Constant Buffer Element Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqDepthStencilObjectCountPerDevice">
            <summary>
            Req Depth Stencil Object Count Per Device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqDrawIndexedIndexCount2ToExp">
            <summary>
            Req Draw Indexed Index Count 2 To Exp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqDrawVertexCount2ToExp">
            <summary>
            Req Draw Vertex Count 2 To Exp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqFilteringHardwareAddressableResourceDimension">
            <summary>
            Req Filtering Hardware Addressable Resource Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqGeometryShaderInvocation32BitOutputComponentLimit">
            <summary>
            Req Geometry Shader Invocation 32 Bit Output Component Limit.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqImmediateConstantBufferElementCount">
            <summary>
            Req Immediate Constant Buffer Element Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqMaxAnisotropy">
            <summary>
            Req Max Anisotropy.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqMipLevels">
            <summary>
            Req Mip Levels.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqMultiElementStructureSizeInBytes">
            <summary>
            Req Multi Element Structure Size In Bytes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqRasterizerObjectCountPerDevice">
            <summary>
            Req Rasterizer Object Count Per Device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqRenderToBufferWindowWidth">
            <summary>
            Req Render To Buffer Window Width.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqResourceSizeInMegabytesExpressionATerm">
            <summary>
            Req Resource Size In Megabytes Expression A Term.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqResourceSizeInMegabytesExpressionBTerm">
            <summary>
            Req Resource Size In Megabytes Expression B Term.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqResourceSizeInMegabytesExpressionCTerm">
            <summary>
            Req Resource Size In Megabytes Expression C Term.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqResourceViewCountPerDevice2ToExp">
            <summary>
            Req Resource View Count Per Device 2 To Exp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqSamplerObjectCountPerDevice">
            <summary>
            Req Sampler Object Count Per Device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqTexture1DArrayAxisDimension">
            <summary>
            Req Texture 1D Array Axis Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqTexture1DDimension">
            <summary>
            Req Texture 1D Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqTexture2DArrayAxisDimension">
            <summary>
            Req Texture 2D Array Axis Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqTexture2DDimension">
            <summary>
            Req Texture 2D Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqTexture3DDimension">
            <summary>
            Req Texture 3D Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ReqTextureCubeDimension">
            <summary>
            Req Texture Cube Dimension.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ResinfoInstructionMissingComponentRetval">
            <summary>
            Resinfo Instruction Missing Component Retval.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ShaderMajorVersion">
            <summary>
            Shader Major Version.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ShaderMaxInstances">
            <summary>
            Shader Max Instances.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ShaderMaxInterfaces">
            <summary>
            Shader Max Interfaces.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ShaderMaxInterfaceCallSites">
            <summary>
            Shader Max Interface Call Sites.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ShaderMaxTypes">
            <summary>
            Shader Max Types.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ShaderMinorVersion">
            <summary>
            Shader Minor Version.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ShiftInstructionPadValue">
            <summary>
            Shift Instruction Pad Value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ShiftInstructionShiftValueBitCount">
            <summary>
            Shift Instruction Shift Value Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SimultaneousRenderTargetCount">
            <summary>
            Simultaneous Render Target Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StreamOutputBufferMaxStrideInBytes">
            <summary>
            Stream Output Buffer Max Stride In Bytes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StreamOutputBufferMaxWriteWindowInBytes">
            <summary>
            Stream Output Buffer Max Write Window In Bytes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StreamOutputBufferSlotCount">
            <summary>
            Stream Output Buffer Slot Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StreamOutputDdiRegisterIndexDenotingGap">
            <summary>
            Stream Output Ddi Register Index Denoting Gap.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StreamOutputNoRasterizedStream">
            <summary>
            Stream Output No Rasterized Stream.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StreamOutputOutputComponentCount">
            <summary>
            Stream Output Output Component Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StreamOutputStreamCount">
            <summary>
            Stream Output Stream Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SpecDateDay">
            <summary>
            Spec Date Day.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SpecDateMonth">
            <summary>
            Spec Date Month.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SpecDateYear">
            <summary>
            Spec Date Year.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SpecVersion">
            <summary>
            Spec Version.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SrgbGamma">
            <summary>
            Srgb Gamma.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SrgbToFloatDenominator1">
            <summary>
            Srgb To Float Denominator 1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SrgbToFloatDenominator2">
            <summary>
            Srgb To Float Denominator 2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SrgbToFloatExponent">
            <summary>
            Srgb To Float Exponent.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SrgbToFloatOffset">
            <summary>
            Srgb To Float Offset.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SrgbToFloatThreshold">
            <summary>
            Srgb To Float Threshold.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SrgbToFloatToleranceInUlp">
            <summary>
            Srgb To Float Tolerance In Ulp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StandardComponentBitCount">
            <summary>
            Standard Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StandardComponentBitCountDoubled">
            <summary>
            Standard Component Bit Count Doubled.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StandardMaximumElementAlignmentByteMultiple">
            <summary>
            Standard Maximum Element Alignment Byte Multiple.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StandardPixelComponentCount">
            <summary>
            Standard Pixel Component Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StandardPixelElementCount">
            <summary>
            Standard Pixel Element Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StandardVectorSize">
            <summary>
            Standard Vector Size.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StandardVertexElementCount">
            <summary>
            Standard Vertex Element Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.StandardVertexTotalComponentCount">
            <summary>
            Standard Vertex Total Component Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SubpixelFractionalBitCount">
            <summary>
            Subpixel Fractional Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.SubtexelFractionalBitCount">
            <summary>
            Subtexel Fractional Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.TesselatorMaxEvenTessellationFactor">
            <summary>
            Tesselator Max Even Tessellation Factor.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.TesselatorMaxIsolineDensityTessellationFactor">
            <summary>
            Tesselator Max Isoline Density Tessellation Factor.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.TesselatorMaxOddTessellationFactor">
            <summary>
            Tesselator Max Odd Tessellation Factor.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.TesselatorMaxTessellationFactor">
            <summary>
            Tesselator Max Tessellation Factor.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.TesselatorMinEvenTessellationFactor">
            <summary>
            Tesselator Min Even Tessellation Factor.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.TesselatorMinIsolineDensityTessellationFactor">
            <summary>
            Tesselator Min Isoline Density Tessellation Factor.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.TesselatorMinOddTessellationFactor">
            <summary>
            Tesselator Min Odd Tessellation Factor.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.TexelAddressRangeBitCount">
            <summary>
            Texel Address Range Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.UnboundMemoryAccessResult">
            <summary>
            Unbound Memory Access Result.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ViewportAndScissorRectMaxIndex">
            <summary>
            Viewport And Scissor Rect Max Index.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ViewportAndScissorRectObjectCountPerPipeline">
            <summary>
            Viewport And Scissor Rect Object Count Per Pipeline.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ViewportBoundsMax">
            <summary>
            Viewport Bounds Max.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.ViewportBoundsMin">
            <summary>
            Viewport Bounds Min.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.VertexShaderInputRegisterComponents">
            <summary>
            Vertex Shader Input Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.VertexShaderInputRegisterComponentBitCount">
            <summary>
            Vertex Shader Input Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.VertexShaderInputRegisterCount">
            <summary>
            Vertex Shader Input Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.VertexShaderInputRegisterReadsPerInstance">
            <summary>
            Vertex Shader Input Register Reads Per Instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.VertexShaderInputRegisterReadPorts">
            <summary>
            Vertex Shader Input Register Read Ports.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.VertexShaderOutputRegisterComponents">
            <summary>
            Vertex Shader Output Register Components.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.VertexShaderOutputRegisterComponentBitCount">
            <summary>
            Vertex Shader Output Register Component Bit Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.VertexShaderOutputRegisterCount">
            <summary>
            Vertex Shader Output Register Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.WhqlContextCountForResourceLimit">
            <summary>
            WHQL Context Count For Resource Limit.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.WhqlDrawIndexedIndexCount2ToExp">
            <summary>
            WHQL Draw Indexed Index Count 2 To Exp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.WhqlDrawVertexCount2ToExp">
            <summary>
            WHQL Draw Vertex Count 2 To Exp.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.UnorderedAccessViewSlotCount">
            <summary>
            Unordered Access View Slot Count.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Constants.TiledResourceTileSizeInBytes">
            <summary>
            Tiled Resource Tile Size In Bytes.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Counter">
            <summary>
            This interface encapsulates methods for measuring GPU performance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Counter.counter">
            <summary>
            The D3D11 counter interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Counter.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Counter)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Counter"/> class.
            </summary>
            <param name="counter">A D3D11 counter interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Counter.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Counter.Description">
            <summary>
            Gets a counter description.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState">
            <summary>
            The depth-stencil-state interface holds a description for depth-stencil state that you can bind to the output-merger stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState.depthStencilState">
            <summary>
            The D3D11 depth stencil state interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilState)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState"/> class.
            </summary>
            <param name="depthStencilState">A D3D11 depth stencil depth interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState.Description">
            <summary>
            Gets the description for depth-stencil state that you used to create the depth-stencil-state object.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView">
            <summary>
            A depth-stencil-view interface accesses a texture resource during depth-stencil testing.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView.depthStencilView">
            <summary>
            The D3D11 depth stencil view interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DepthStencilView)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView"/> class.
            </summary>
            <param name="depthStencilView">A D3D11 depth stencil view interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView.Description">
            <summary>
            Gets the depth-stencil view.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Device">
            <summary>
            The device interface represents a virtual adapter; it is used to create resources.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Device.device">
            <summary>
            The D3D11 device interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Device"/> class.
            </summary>
            <param name="device">A D3D11 device interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Device.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Device.FeatureLevel">
            <summary>
            Gets the feature level of the hardware device.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Device.CreationOptions">
            <summary>
            Gets the options used during the call to create the device.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.op_Implicit(JeremyAnsel.DirectX.D3D11.D3D11Device)~System.Boolean">
            <summary>
            Gets a boolean indicating if the handle is not null.
            </summary>
            <param name="value">A D3D11 device.</param>
            <returns>A boolean</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateDevice(System.Object,JeremyAnsel.DirectX.D3D11.D3D11DriverType,JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions,JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel[],JeremyAnsel.DirectX.D3D11.D3D11Device@,JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel@,JeremyAnsel.DirectX.D3D11.D3D11DeviceContext@)">
            <summary>
            Creates a device that represents the display adapter.
            </summary>
            <param name="adapter">A pointer to the video adapter to use when creating a device.</param>
            <param name="driverType">The driver type to create.</param>
            <param name="options">The runtime layers to enable.</param>
            <param name="featureLevels">Determine the order of feature levels to attempt to create.</param>
            <param name="device">The created device.</param>
            <param name="featureLevel">If successful, returns the first feature level from the <paramref name="featureLevels"/> array which succeeded.</param>
            <param name="immediateContext">The device context.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateDeviceAndSwapChain(System.Object,JeremyAnsel.DirectX.D3D11.D3D11DriverType,JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions,JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel[],JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc,System.Object@,JeremyAnsel.DirectX.D3D11.D3D11Device@,JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel@,JeremyAnsel.DirectX.D3D11.D3D11DeviceContext@)">
            <summary>
            Creates a device that represents the display adapter and a swap chain used for rendering.
            </summary>
            <param name="adapter">The video adapter to use when creating a device.</param>
            <param name="driverType">The driver type to create.</param>
            <param name="options">The runtime layers to enable.</param>
            <param name="featureLevels">Determine the order of feature levels to attempt to create.</param>
            <param name="swapChainDesc">A swap chain description that contains initialization parameters for the swap chain.</param>
            <param name="swapChain">The swap chain used for rendering.</param>
            <param name="device">The created device.</param>
            <param name="featureLevel">If successful, returns the first feature level from the <paramref name="featureLevels"/> array which succeeded.</param>
            <param name="immediateContext">The device context.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.ToBoolean">
            <summary>
            Gets a boolean indicating if the handle is not null.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.Dispose">
            <summary>
            Immediately releases the unmanaged resources used by the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Device"/> object.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.Release">
            <summary>
            Releases the managed reference to the COM D3D11 interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.SetPrivateDataText(System.Guid,System.String)">
            <summary>
            Sets an application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="text">The object's text.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.GetPrivateDataText(System.Guid)">
            <summary>
            Gets an application-defined data from the object that is associated with a GUID.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <returns>The object's text.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.SetDebugName(System.String)">
            <summary>
            Sets a unique name to objects in order to assist the developer during debugging.
            </summary>
            <param name="name">The friendly name.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.GetDebugName">
            <summary>
            Gets a unique name to objects in order to assist the developer during debugging.
            </summary>
            <returns>The friendly name.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateBuffer(JeremyAnsel.DirectX.D3D11.D3D11BufferDesc)">
            <summary>
            Creates a buffer (vertex buffer, index buffer, or shader constant buffer).
            </summary>
            <param name="desc">Describes the buffer.</param>
            <returns>The buffer object created.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateBuffer(JeremyAnsel.DirectX.D3D11.D3D11BufferDesc,JeremyAnsel.DirectX.D3D11.D3D11SubResourceData)">
            <summary>
            Creates a buffer (vertex buffer, index buffer, or shader constant buffer).
            </summary>
            <param name="desc">Describes the buffer.</param>
            <param name="data">Describes the initialization data.</param>
            <returns>The buffer object created.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateBuffer``1(JeremyAnsel.DirectX.D3D11.D3D11BufferDesc,``0,System.UInt32,System.UInt32)">
            <summary>
            Creates a buffer (vertex buffer, index buffer, or shader constant buffer).
            </summary>
            <typeparam name="T">A struct.</typeparam>
            <param name="desc">Describes the buffer.</param>
            <param name="data">Describes the initialization data.</param>
            <param name="sysMemPitch">The distance (in bytes) from the beginning of one line of a texture to the next line.</param>
            <param name="sysMemSlicePitch">The distance (in bytes) from the beginning of one depth level to the next.</param>
            <returns>The buffer object created.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateBuffer``1(JeremyAnsel.DirectX.D3D11.D3D11BufferDesc,``0[],System.UInt32,System.UInt32)">
            <summary>
            Creates a buffer (vertex buffer, index buffer, or shader constant buffer).
            </summary>
            <typeparam name="T">A array of struct.</typeparam>
            <param name="desc">Describes the buffer.</param>
            <param name="data">Describes the initialization data.</param>
            <param name="sysMemPitch">The distance (in bytes) from the beginning of one line of a texture to the next line.</param>
            <param name="sysMemSlicePitch">The distance (in bytes) from the beginning of one depth level to the next.</param>
            <returns>The buffer object created.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateTexture1D(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc)">
            <summary>
            Creates an array of 1D textures.
            </summary>
            <param name="desc">Describes a 1D texture resource.</param>
            <returns>The created texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateTexture1D(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc,JeremyAnsel.DirectX.D3D11.D3D11SubResourceData[])">
            <summary>
            Creates an array of 1D textures.
            </summary>
            <param name="desc">Describes a 1D texture resource.</param>
            <param name="data">Describe subresources for the 1D texture resource.</param>
            <returns>The created texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateTexture2D(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc)">
            <summary>
            Create an array of 2D textures.
            </summary>
            <param name="desc">Describes a 2D texture resource.</param>
            <returns>The created texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateTexture2D(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc,JeremyAnsel.DirectX.D3D11.D3D11SubResourceData[])">
            <summary>
            Create an array of 2D textures.
            </summary>
            <param name="desc">Describes a 2D texture resource.</param>
            <param name="data">Describe subresources for the 2D texture resource.</param>
            <returns>The created texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateTexture3D(JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc)">
            <summary>
            Create a single 3D texture.
            </summary>
            <param name="desc">Describes a 3D texture resource.</param>
            <returns>The created texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateTexture3D(JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc,JeremyAnsel.DirectX.D3D11.D3D11SubResourceData[])">
            <summary>
            Create a single 3D texture.
            </summary>
            <param name="desc">Describes a 3D texture resource.</param>
            <param name="data">Describe subresources for the 3D texture resource.</param>
            <returns>The created texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateShaderResourceView(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.Nullable{JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc})">
            <summary>
            Create a shader resource view for accessing data in a resource.
            </summary>
            <param name="resource">The resource that will serve as input to a shader.</param>
            <param name="desc">A shader resource view description.</param>
            <returns>The created shader resource view.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateUnorderedAccessView(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.Nullable{JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc})">
            <summary>
            Creates a view for accessing an unordered access resource.
            </summary>
            <param name="resource">A resources that will serve as an input to a shader.</param>
            <param name="desc">A shader resource view description.</param>
            <returns>The created unordered-access view.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateRenderTargetView(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.Nullable{JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc})">
            <summary>
            Creates a render-target view for accessing resource data.
            </summary>
            <param name="resource">A render target resource.</param>
            <param name="desc">A render-target view description.</param>
            <returns>The created render target view.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateDepthStencilView(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.Nullable{JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc})">
            <summary>
            Create a depth-stencil view for accessing resource data.
            </summary>
            <param name="resource">The resource that will serve as the depth-stencil surface.</param>
            <param name="desc">A depth-stencil-view description.</param>
            <returns>The created depth-stencil view.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateInputLayout(JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc[],System.Byte[])">
            <summary>
            Create an input-layout object to describe the input-buffer data for the input-assembler stage.
            </summary>
            <param name="elementDescs">An array of the input-assembler stage input data types; each type is described by an element description.</param>
            <param name="shaderBytecodeWithInputSignature">The compiled shader. The compiled shader code contains a input signature which is validated against the array of elements.</param>
            <returns>The created input-layout object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateVertexShader(System.Byte[],JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage)">
            <summary>
            Create a vertex shader object from a compiled shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created vertex shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateGeometryShader(System.Byte[],JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage)">
            <summary>
            Create a geometry shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created geometry shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateGeometryShaderWithStreamOutput(System.Byte[],JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry[],System.UInt32[],System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage)">
            <summary>
            Creates a geometry shader that can write to streaming output buffers.
            </summary>
            <param name="shaderBytecode">The compiled geometry shader for a standard geometry shader plus stream output.</param>
            <param name="streamOutputDeclaration">A <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry"/> array.</param>
            <param name="bufferStrides">An array of buffer strides; each stride is the size of an element for that buffer.</param>
            <param name="rasterizedStream">The index number of the stream to be sent to the rasterizer stage.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created geometry shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreatePixelShader(System.Byte[],JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage)">
            <summary>
            Create a pixel shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created pixel shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateHullShader(System.Byte[],JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage)">
            <summary>
            Create a hull shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created hull shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateDomainShader(System.Byte[],JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage)">
            <summary>
            Create a domain shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created domain shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateComputeShader(System.Byte[],JeremyAnsel.DirectX.D3D11.D3D11ClassLinkage)">
            <summary>
            Create a compute shader.
            </summary>
            <param name="shaderBytecode">The compiled shader.</param>
            <param name="classLinkage">A class linkage interface.</param>
            <returns>The created compute shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateClassLinkage">
            <summary>
            Creates class linkage libraries to enable dynamic shader linkage.
            </summary>
            <returns>The created class linkage.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateBlendState(JeremyAnsel.DirectX.D3D11.D3D11BlendDesc)">
            <summary>
            Create a blend-state object that encapsules blend state for the output-merger stage.
            </summary>
            <param name="desc">A blend-state description.</param>
            <returns>The created blend-state object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateDepthStencilState(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc)">
            <summary>
            Create a depth-stencil state object that encapsulates depth-stencil test information for the output-merger stage.
            </summary>
            <param name="desc">A depth-stencil state description.</param>
            <returns>The created depth-stencil state object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateRasterizerState(JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc)">
            <summary>
            Create a rasterizer state object that tells the rasterizer stage how to behave.
            </summary>
            <param name="desc">A rasterizer state description.</param>
            <returns>The created rasterizer state object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateSamplerState(JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc)">
            <summary>
            Create a sampler-state object that encapsulates sampling information for a texture.
            </summary>
            <param name="desc">A sampler state description.</param>
            <returns>The created sampler-state object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateQuery(JeremyAnsel.DirectX.D3D11.D3D11QueryDesc)">
            <summary>
            Creates an object for querying information from the GPU.
            </summary>
            <param name="desc">A query description.</param>
            <returns>The created query.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreatePredicate(JeremyAnsel.DirectX.D3D11.D3D11QueryDesc)">
            <summary>
            Creates a predicate.
            </summary>
            <param name="desc">A query description for a predicate.</param>
            <returns>The created predicate.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateCounter(JeremyAnsel.DirectX.D3D11.D3D11CounterDesc)">
            <summary>
            Create a counter object for measuring GPU performance.
            </summary>
            <param name="desc">A counter description.</param>
            <returns>The created counter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateDeferredContext">
            <summary>
            Creates a deferred context, which can record command lists.
            </summary>
            <returns>The created deferred context.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.OpenSharedResource(System.IntPtr,System.Guid)">
            <summary>
            Give a device access to a shared resource created on a different device.
            </summary>
            <param name="resourceHandle">A resource handle.</param>
            <param name="returnedInterface">The globally unique identifier (GUID) for the resource interface.</param>
            <returns>A pointer to the resource we are gaining access to.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFormatSupport(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.D3D11.D3D11FormatSupport@)">
            <summary>
            Get the support of a given format on the installed video device.
            </summary>
            <param name="format">A format for which to check for support.</param>
            <param name="formatSupport">Describes how the specified format is supported on the installed device.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckMultisampleQualityLevels(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32@)">
            <summary>
            Get the number of quality levels available during multisampling.
            </summary>
            <param name="format">The texture format.</param>
            <param name="sampleCount">The number of samples during multisampling.</param>
            <param name="numQualityLevels">The number of quality levels supported by the adapter.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckCounterInfo">
            <summary>
            Get a counter's information.
            </summary>
            <returns>A counter information.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckCounter(JeremyAnsel.DirectX.D3D11.D3D11CounterDesc,JeremyAnsel.DirectX.D3D11.D3D11CounterDataType@,System.UInt32@)">
            <summary>
            Get the type, name, units of measure, and a description of an existing counter.
            </summary>
            <param name="desc">A counter description.</param>
            <param name="type">The data type of a counter.</param>
            <param name="activeCounters">The number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckCounter(JeremyAnsel.DirectX.D3D11.D3D11CounterDesc,JeremyAnsel.DirectX.D3D11.D3D11CounterDataType@,System.UInt32@,System.String@,System.String@,System.String@)">
            <summary>
            Get the type, name, units of measure, and a description of an existing counter.
            </summary>
            <param name="desc">A counter description.</param>
            <param name="type">The data type of a counter.</param>
            <param name="activeCounters">The number of hardware counters that are needed for this counter type to be created. All instances of the same counter type use the same hardware counters.</param>
            <param name="name">String to be filled with a brief name for the counter.</param>
            <param name="units">Name of the units a counter measures.</param>
            <param name="description">A description of the counter.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupport(JeremyAnsel.DirectX.D3D11.D3D11Feature)">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <param name="feature">Describes which feature to query for support.</param>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportThreading">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportDoubles">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportFormatSupport">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportFormatSupport2">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportD3D10XHardwareOptions">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportD3D11Options">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportArchitectureInfo">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportD3D9Options">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportShaderMinPrecisionSupport">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportD3D9ShadowSupport">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportD3D11Options1">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportD3D9SimpleInstancingSupport">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportMarkerSupport">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupportD3D9Options1">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.GetDeviceRemovedReason">
            <summary>
            Get the reason why the device was removed.
            </summary>
            <returns>The removed reason exception.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.ThrowDeviceRemovedReason">
            <summary>
            Throw a device removed reason exception.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.GetImmediateContext">
            <summary>
            Gets an immediate context, which can play back command lists.
            </summary>
            <returns>An immediate context.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CheckFeatureSupport``1(JeremyAnsel.DirectX.D3D11.D3D11Feature)">
            <summary>
            Gets information about the features that are supported by the current graphics driver.
            </summary>
            <typeparam name="T">The type of structure to return.</typeparam>
            <param name="feature">Describes which feature to query for support.</param>
            <returns>A structure filled with data that describes the feature support.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild">
            <summary>
            A device-child interface accesses data used by a device.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild"/> class.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.op_Implicit(JeremyAnsel.DirectX.D3D11.D3D11DeviceChild)~System.Boolean">
            <summary>
            Gets a boolean indicating if the handle is not null.
            </summary>
            <param name="value">A D3D11 device child.</param>
            <returns>A boolean</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.ToBoolean">
            <summary>
            Gets a boolean indicating if the handle is not null.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.Dispose">
            <summary>
            Immediately releases the unmanaged resources used by the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild"/> object.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.Release">
            <summary>
            Releases the managed reference to the COM D3D11 interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.SetPrivateDataText(System.Guid,System.String)">
            <summary>
            Sets an application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="text">The object's text.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.GetPrivateDataText(System.Guid)">
            <summary>
            Gets an application-defined data from the object that is associated with a GUID.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <returns>The object's text.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.SetDebugName(System.String)">
            <summary>
            Sets a unique name to objects in order to assist the developer during debugging.
            </summary>
            <param name="name">The friendly name.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.GetDebugName">
            <summary>
            Gets a unique name to objects in order to assist the developer during debugging.
            </summary>
            <returns>The friendly name.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.GetDevice">
            <summary>
            Get the device that created this interface.
            </summary>
            <returns>A device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceChild.GetHandle``1">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
            <typeparam name="T">A D3D11 interface type.</typeparam>
            <returns>The D3D11 interface.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext">
            <summary>
            Represents a device context which generates rendering commands.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.deviceContext">
            <summary>
            The D3D11 device context interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext"/> class.
            </summary>
            <param name="deviceContext">A D3D11 device context interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ContextType">
            <summary>
            Gets the type of device context.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ContextOptions">
            <summary>
            Gets the initialization flags associated with the current deferred context.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.VertexShaderSetConstantBuffers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the vertex shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
            <param name="constantBuffers">Array of constant buffers being given to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.PixelShaderSetShaderResources(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the pixel shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.PixelShaderSetShader(JeremyAnsel.DirectX.D3D11.D3D11PixelShader,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[])">
            <summary>
            Sets a pixel shader to the device.
            </summary>
            <param name="pixelShader">A pixel shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.PixelShaderSetSamplers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the pixel shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.VertexShaderSetShader(JeremyAnsel.DirectX.D3D11.D3D11VertexShader,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[])">
            <summary>
            Set a vertex shader to the device.
            </summary>
            <param name="vertexShader">A vertex shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DrawIndexed(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Draw indexed, non-instanced primitives.
            </summary>
            <param name="indexCount">Number of indices to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Draw(System.UInt32,System.UInt32)">
            <summary>
            Draw non-indexed, non-instanced primitives.
            </summary>
            <param name="vertexCount">Number of vertices to draw.</param>
            <param name="startVertexLocation">Index of the first vertex, which is usually an offset in a vertex buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Map(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission,JeremyAnsel.DirectX.D3D11.D3D11MapOptions)">
            <summary>
            Gets a pointer to the data contained in a subresource, and denies the GPU access to that subresource.
            </summary>
            <param name="resource">A <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Resource"/> interface.</param>
            <param name="subresource">Index number of the subresource.</param>
            <param name="cpuPermission">The CPU's read and write permissions for a resource.</param>
            <param name="options">Specifies what the CPU does when the GPU is busy.</param>
            <returns>The mapped subresource.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Unmap(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32)">
            <summary>
            Invalidate the pointer to a resource and reenable the GPU's access to that resource.
            </summary>
            <param name="resource">A <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Resource"/> interface.</param>
            <param name="subresource">A subresource to be unmapped.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.PixelShaderSetConstantBuffers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the pixel shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
            <param name="constantBuffers">Array of constant buffers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.InputAssemblerSetInputLayout(JeremyAnsel.DirectX.D3D11.D3D11InputLayout)">
            <summary>
            Bind an input-layout object to the input-assembler stage.
            </summary>
            <param name="inputLayout">The input-layout object.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.InputAssemblerSetVertexBuffers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Buffer[],System.UInt32[],System.UInt32[])">
            <summary>
            Bind an array of vertex buffers to the input-assembler stage.
            </summary>
            <param name="startSlot">The first input slot for binding.</param>
            <param name="vertexBuffers">An array of vertex buffers.</param>
            <param name="strides">An array of stride values; one stride value for each buffer in the vertex-buffer array.</param>
            <param name="offsets">An array of offset values; one offset value for each buffer in the vertex-buffer array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.InputAssemblerSetIndexBuffer(JeremyAnsel.DirectX.D3D11.D3D11Buffer,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Bind an index buffer to the input-assembler stage.
            </summary>
            <param name="indexBuffer">An <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Buffer"/> object, that contains indices.</param>
            <param name="format">The format of the data in the index buffer.</param>
            <param name="offset">Offset (in bytes) from the start of the index buffer to the first index to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DrawIndexedInstanced(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Draw indexed, instanced primitives.
            </summary>
            <param name="indexCountPerInstance">Number of indices read from the index buffer for each instance.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
            <param name="baseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DrawInstanced(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Draw non-indexed, instanced primitives.
            </summary>
            <param name="vertexCountPerInstance">Number of vertices to draw.</param>
            <param name="instanceCount">Number of instances to draw.</param>
            <param name="startVertexLocation">Index of the first vertex.</param>
            <param name="startInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GeometryShaderSetConstantBuffers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the geometry shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
            <param name="constantBuffers">Array of constant buffers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GeometryShaderSetShader(JeremyAnsel.DirectX.D3D11.D3D11GeometryShader,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[])">
            <summary>
            Set a geometry shader to the device.
            </summary>
            <param name="shader">A geometry shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.InputAssemblerSetPrimitiveTopology(JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology)">
            <summary>
            Bind information about the primitive type, and data order that describes input data for the input assembler stage.
            </summary>
            <param name="topology">The type of primitive and ordering of the primitive data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.VertexShaderSetShaderResources(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the vertex shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.VertexShaderSetSamplers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the vertex shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)">
            <summary>
            Mark the beginning of a series of commands.
            </summary>
            <param name="async">A <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Asynchronous"/> interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)">
            <summary>
            Mark the end of a series of commands.
            </summary>
            <param name="async">A <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Asynchronous"/> interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GetData``1(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous,JeremyAnsel.DirectX.D3D11.D3D11AsyncGetDataOptions)">
            <summary>
            Get data from the graphics processing unit (GPU) asynchronously.
            </summary>
            <typeparam name="T">The type of data.</typeparam>
            <param name="async">A <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Asynchronous"/> interface for the object about which <c>GetData</c> retrieves data.</param>
            <param name="options">Optional flags.</param>
            <returns>The data.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.SetPredication(JeremyAnsel.DirectX.D3D11.D3D11Predicate,System.Boolean)">
            <summary>
            Set a rendering predicate.
            </summary>
            <param name="predicate">A predicate.</param>
            <param name="value">A value indicating whether rendering will be affected by when the predicate's conditions are met or not met.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GeometryShaderSetShaderResources(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the geometry shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GeometryShaderSetSamplers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the geometry shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerSetRenderTargets(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView[],JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView)">
            <summary>
            Bind one or more render targets atomically and the depth-stencil buffer to the output-merger stage.
            </summary>
            <param name="renderTargetViews">The render targets to bind to the device.</param>
            <param name="depthStencilView">The depth-stencil view to bind to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerSetRenderTargetsAndUnorderedAccessViews(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView[],JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView[],System.UInt32[])">
            <summary>
            Binds resources to the output-merger stage.
            </summary>
            <param name="renderTargetViews">The render targets to bind to the device.</param>
            <param name="depthStencilView">The depth-stencil view to bind to the device.</param>
            <param name="uavStartSlot">Index into a zero-based array to begin setting unordered-access views.</param>
            <param name="unorderedAccessViews">The unordered-access views to bind to the device.</param>
            <param name="uavInitialCounts">An array of append and consume buffer offsets. A value of <value>-1</value> indicates to keep the current offset.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerSetBlendState(JeremyAnsel.DirectX.D3D11.D3D11BlendState,System.Single[],System.UInt32)">
            <summary>
            Set the blend state of the output-merger stage.
            </summary>
            <param name="blendState">A blend-state interface.</param>
            <param name="blendFactor">Array of blend factors, one for each RGBA component. The blend factors modulate values for the pixel shader, render target, or both.</param>
            <param name="sampleMask">32-bit sample coverage. The default value is <value>0xffffffff</value>.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerSetDepthStencilState(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState,System.UInt32)">
            <summary>
            Sets the depth-stencil state of the output-merger stage.
            </summary>
            <param name="depthStencilState">A depth-stencil state interface.</param>
            <param name="stencilReference">Reference value to perform against when doing a depth-stencil test.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.StreamOutputSetTargets(JeremyAnsel.DirectX.D3D11.D3D11Buffer[],System.UInt32[])">
            <summary>
            Reference value to perform against when doing a depth-stencil test.
            </summary>
            <param name="targets">The array of output buffers to bind to the device.</param>
            <param name="offsets">Array of offsets to the output buffers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DrawAuto">
            <summary>
            Draw geometry of an unknown size.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DrawIndexedInstancedIndirect(JeremyAnsel.DirectX.D3D11.D3D11Buffer,System.UInt32)">
            <summary>
            Draw indexed, instanced, GPU-generated primitives.
            </summary>
            <param name="bufferForArgs">A buffer containing the GPU generated primitives.</param>
            <param name="alignedByteOffsetForArgs">Offset to the start of the GPU generated primitives.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DrawInstancedIndirect(JeremyAnsel.DirectX.D3D11.D3D11Buffer,System.UInt32)">
            <summary>
            Draw instanced, GPU-generated primitives.
            </summary>
            <param name="bufferForArgs">A buffer containing the GPU generated primitives.</param>
            <param name="alignedByteOffsetForArgs">Offset to the start of the GPU generated primitives.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Dispatch(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Execute a command list from a thread group.
            </summary>
            <param name="threadGroupCountX">The number of groups dispatched in the x direction.</param>
            <param name="threadGroupCountY">The number of groups dispatched in the y direction.</param>
            <param name="threadGroupCountZ">The number of groups dispatched in the z direction.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DispatchIndirect(JeremyAnsel.DirectX.D3D11.D3D11Buffer,System.UInt32)">
            <summary>
            Execute a command list over one or more thread groups.
            </summary>
            <param name="bufferForArgs">A buffer, which must be loaded with data that matches the argument list.</param>
            <param name="alignedByteOffsetForArgs">A byte-aligned offset between the start of the buffer and the arguments.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.RasterizerStageSetState(JeremyAnsel.DirectX.D3D11.D3D11RasterizerState)">
            <summary>
            Set the rasterizer state for the rasterizer stage of the pipeline.
            </summary>
            <param name="rasterizerState">A rasterizer-state interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.RasterizerStageSetViewports(JeremyAnsel.DirectX.D3D11.D3D11Viewport[])">
            <summary>
            Bind an array of viewports to the rasterizer stage of the pipeline.
            </summary>
            <param name="viewports">An array of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> structures to bind to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.RasterizerStageSetScissorRects(JeremyAnsel.DirectX.D3D11.D3D11Rect[])">
            <summary>
            Bind an array of scissor rectangles to the rasterizer stage.
            </summary>
            <param name="rects">An array of scissor rectangles.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.CopySubresourceRegion(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Box)">
            <summary>
            Copy a region from a source resource to a destination resource.
            </summary>
            <param name="destinationResource">The destination resource.</param>
            <param name="destinationSubresource">Destination subresource index.</param>
            <param name="destinationX">The x-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationY">The y-coordinate of the upper left corner of the destination region.</param>
            <param name="destinationZ">The z-coordinate of the upper left corner of the destination region.</param>
            <param name="sourceResource">The source resource.</param>
            <param name="sourceSubresource">Source subresource index.</param>
            <param name="sourceBox">A 3D box that defines the source subresource that can be copied.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.CopyResource(JeremyAnsel.DirectX.D3D11.D3D11Resource,JeremyAnsel.DirectX.D3D11.D3D11Resource)">
            <summary>
            Copy the entire contents of the source resource to the destination resource using the GPU.
            </summary>
            <param name="destination">The destination resource.</param>
            <param name="source">The source resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.UpdateSubresource``1(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32,System.Nullable{JeremyAnsel.DirectX.D3D11.D3D11Box},``0,System.UInt32,System.UInt32)">
            <summary>
            The CPU copies data from memory to a subresource created in non-mappable memory.
            </summary>
            <typeparam name="T">The type of data.</typeparam>
            <param name="destinationResource">The destination resource.</param>
            <param name="destinationSubresource">A zero-based index, that identifies the destination subresource.</param>
            <param name="destinationBox">A box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures.</param>
            <param name="sourceData">A pointer to the source data in memory.</param>
            <param name="sourceRowPitch">The size of one row of the source data.</param>
            <param name="sourceDepthPitch">The size of one depth slice of source data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.UpdateSubresource``1(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32,System.Nullable{JeremyAnsel.DirectX.D3D11.D3D11Box},``0[],System.UInt32,System.UInt32)">
            <summary>
            The CPU copies data from memory to a subresource created in non-mappable memory.
            </summary>
            <typeparam name="T">The type of data.</typeparam>
            <param name="destinationResource">The destination resource.</param>
            <param name="destinationSubresource">A zero-based index, that identifies the destination subresource.</param>
            <param name="destinationBox">A box that defines the portion of the destination subresource to copy the resource data into. Coordinates are in bytes for buffers and in texels for textures.</param>
            <param name="sourceData">A pointer to the source data in memory.</param>
            <param name="sourceRowPitch">The size of one row of the source data.</param>
            <param name="sourceDepthPitch">The size of one depth slice of source data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.CopyStructureCount(JeremyAnsel.DirectX.D3D11.D3D11Buffer,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView)">
            <summary>
            Copies data from a buffer holding variable length data.
            </summary>
            <param name="destinationBuffer">The destination buffer.</param>
            <param name="destinationAlignedByteOffset">Offset from the start of the buffer to write 32-bit UINT structure (vertex) count.</param>
            <param name="sourceView">A structured buffer resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ClearRenderTargetView(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView,System.Single[])">
            <summary>
            Set all the elements in a render target to one value.
            </summary>
            <param name="renderTargetView">The render target.</param>
            <param name="colorRgba">A 4-component array that represents the color to fill the render target with.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ClearUnorderedAccessViewUInt(JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView,System.UInt32[])">
            <summary>
            Clears an unordered access resource with bit-precise values.
            </summary>
            <param name="unorderedAccessView">The unordered access resource to clear.</param>
            <param name="values">Values to copy to corresponding channels.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ClearUnorderedAccessViewFloat(JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView,System.Single[])">
            <summary>
            Clears an unordered access resource with a float value.
            </summary>
            <param name="unorderedAccessView">The unordered access resource to clear.</param>
            <param name="values">Values to copy to corresponding channels.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ClearDepthStencilView(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView,JeremyAnsel.DirectX.D3D11.D3D11ClearOptions,System.Single,System.Byte)">
            <summary>
            Clears the depth-stencil resource.
            </summary>
            <param name="depthStencilView">The depth stencil to be cleared.</param>
            <param name="clearOptions">Identify the type of data to clear.</param>
            <param name="depth">Clear the depth buffer with this value. This value will be clamped between 0 and 1.</param>
            <param name="stencil">Clear the stencil buffer with this value.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GenerateMips(JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView)">
            <summary>
            Generates mipmaps for the given shader resource.
            </summary>
            <param name="shaderResourceView">The shader resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.SetResourceMinLod(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.Single)">
            <summary>
            Sets the minimum level-of-detail (LOD) for a resource.
            </summary>
            <param name="resource">The resource.</param>
            <param name="minLod">The level-of-detail, which ranges between 0 and the maximum number of mipmap levels of the resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GetResourceMinLod(JeremyAnsel.DirectX.D3D11.D3D11Resource)">
            <summary>
            Gets the minimum level-of-detail (LOD).
            </summary>
            <param name="resource">The resource.</param>
            <returns>The minimum LOD.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ResolveSubresource(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Copy a multisampled resource into a non-multisampled resource.
            </summary>
            <param name="destinationResource">Destination resource.</param>
            <param name="destinationSubresource">A zero-based index, that identifies the destination subresource.</param>
            <param name="sourceResource">Source resource.</param>
            <param name="sourceSubresource">The source subresource of the source resource.</param>
            <param name="format">Indicates how the multisampled resource will be resolved to a single-sampled resource.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ExecuteCommandList(JeremyAnsel.DirectX.D3D11.D3D11CommandList,System.Boolean)">
            <summary>
            Queues commands from a command list onto a device.
            </summary>
            <param name="commandList">A command list.</param>
            <param name="restoreContextState">A value indicating whether the target context state is saved prior to and restored after the execution of a command list.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.HullShaderSetShaderResources(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the hull shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.HullShaderSetShader(JeremyAnsel.DirectX.D3D11.D3D11HullShader,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[])">
            <summary>
            Set a hull shader to the device.
            </summary>
            <param name="hullShader">A hull shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.HullShaderSetSamplers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the hull shader stage.
            </summary>
            <param name="startSlot">Index into the zero-based array to begin setting samplers to.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.HullShaderSetConstantBuffers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Buffer[])">
            <summary>
            Set the constant buffers used by the hull shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting constant buffers to.</param>
            <param name="constantBuffers">Array of constant buffers being given to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DomainShaderSetShaderResources(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the domain shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DomainShaderSetShader(JeremyAnsel.DirectX.D3D11.D3D11DomainShader,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[])">
            <summary>
            Set a domain shader to the device.
            </summary>
            <param name="domainShader">A domain shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DomainShaderSetSamplers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the domain shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DomainShaderSetConstantBuffers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the domain shader stage.
            </summary>
            <param name="startSlot">Index into the zero-based array to begin setting constant buffers to.</param>
            <param name="constantBuffers">Array of constant buffers being given to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderSetShaderResources(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView[])">
            <summary>
            Bind an array of shader resources to the compute shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting shader resources to.</param>
            <param name="shaderResourceViews">Array of shader resource view interfaces to set to the device.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderSetUnorderedAccessViews(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView[],System.UInt32[])">
            <summary>
            Sets an array of views for an unordered resource.
            </summary>
            <param name="startSlot">Index of the first element in the zero-based array to begin setting.</param>
            <param name="unorderedAccessViews">An array of unordered access views to be set.</param>
            <param name="uavInitialCounts">An array of append and consume buffer offsets. A value of <value>-1</value> indicates to keep the current offset.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderSetShader(JeremyAnsel.DirectX.D3D11.D3D11ComputeShader,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[])">
            <summary>
            Set a compute shader to the device.
            </summary>
            <param name="computeShader">A compute shader.</param>
            <param name="classInstances">An array of class-instance interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderSetSamplers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11SamplerState[])">
            <summary>
            Set an array of sampler states to the compute shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin setting samplers to.</param>
            <param name="samplers">An array of sampler-state interfaces.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderSetConstantBuffers(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Buffer[])">
            <summary>
            Sets the constant buffers used by the compute shader stage.
            </summary>
            <param name="startSlot">Index into the zero-based array to begin setting constant buffers to.</param>
            <param name="constantBuffers">Array of constant buffers.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.VertexShaderGetConstantBuffers(System.UInt32,System.UInt32)">
            <summary>
            Get the constant buffers used by the vertex shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <returns>Array of constant buffer interface pointers to be returned.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.PixelShaderGetShaderResources(System.UInt32,System.UInt32)">
            <summary>
            Get the pixel shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <returns>Array of shader resource view interfaces to be returned by the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.PixelShaderGetShader">
            <summary>
            Get the pixel shader currently set on the device.
            </summary>
            <returns>A pixel shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.PixelShaderGetShader(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[]@)">
            <summary>
            Get the pixel shader currently set on the device.
            </summary>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <returns>A pixel shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.PixelShaderGetSamplers(System.UInt32,System.UInt32)">
            <summary>
            Get an array of sampler states from the pixel shader pipeline stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <returns>Array of sampler-state interface pointers.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.VertexShaderGetShader">
            <summary>
            Get the vertex shader currently set on the device.
            </summary>
            <returns>A vertex shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.VertexShaderGetShader(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[]@)">
            <summary>
            Get the vertex shader currently set on the device.
            </summary>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <returns>A vertex shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.PixelShaderGetConstantBuffers(System.UInt32,System.UInt32)">
            <summary>
            Get the constant buffers used by the pixel shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <returns>Array of constant buffer interface pointers to be returned.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.InputAssemblerGetInputLayout">
            <summary>
            Get the input-layout object that is bound to the input-assembler stage.
            </summary>
            <returns>The input-layout object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.InputAssemblerGetVertexBuffers(System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11Buffer[]@,System.UInt32[]@,System.UInt32[]@)">
            <summary>
            Get the vertex buffers bound to the input-assembler stage.
            </summary>
            <param name="startSlot">The input slot of the first vertex buffer to get.</param>
            <param name="numBuffers">The number of vertex buffers to get starting at the offset.</param>
            <param name="vertexBuffers">An array of vertex buffers.</param>
            <param name="strides">An array of stride values.</param>
            <param name="offsets">An array of offset values.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.InputAssemblerGetIndexBuffer(JeremyAnsel.DirectX.D3D11.D3D11Buffer@,JeremyAnsel.DirectX.Dxgi.DxgiFormat@,System.UInt32@)">
            <summary>
            Get the index buffer that is bound to the input-assembler stage.
            </summary>
            <param name="indexBuffer">An index buffer.</param>
            <param name="format">The format of the data in the index buffer.</param>
            <param name="offset">Offset (in bytes) from the start of the index buffer, to the first index to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GeometryShaderGetConstantBuffers(System.UInt32,System.UInt32)">
            <summary>
            Get the constant buffers used by the geometry shader pipeline stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <returns>Array of constant buffer interface pointers to be returned.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GeometryShaderGetShader">
            <summary>
            Get the geometry shader currently set on the device.
            </summary>
            <returns>A geometry shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GeometryShaderGetShader(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[]@)">
            <summary>
            Get the geometry shader currently set on the device.
            </summary>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <returns>A geometry shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.InputAssemblerGetPrimitiveTopology">
            <summary>
            Get information about the primitive type, and data order that describes input data for the input assembler stage.
            </summary>
            <returns>The type of primitive, and ordering of the primitive data.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.VertexShaderGetShaderResources(System.UInt32,System.UInt32)">
            <summary>
            Get the vertex shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <returns>Array of shader resource view interfaces to be returned by the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.VertexShaderGetSamplers(System.UInt32,System.UInt32)">
            <summary>
            Get an array of sampler states from the vertex shader pipeline stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <returns>Array of sampler-state interface pointers to be returned by the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GetPredication(JeremyAnsel.DirectX.D3D11.D3D11Predicate@,System.Boolean@)">
            <summary>
            Get the rendering predicate state.
            </summary>
            <param name="predicate">A predicate.</param>
            <param name="predicateValue">The predicate comparison value.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GeometryShaderGetShaderResources(System.UInt32,System.UInt32)">
            <summary>
            Get the geometry shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <returns>Array of shader resource view interfaces to be returned by the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GeometryShaderGetSamplers(System.UInt32,System.UInt32)">
            <summary>
            Get an array of sampler state interfaces from the geometry shader pipeline stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <returns>An array of sampler-state interfaces.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerGetRenderTargets(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView[]@,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView@)">
            <summary>
            Get pointers to the resources bound to the output-merger stage.
            </summary>
            <param name="numViews">Number of render targets to retrieve.</param>
            <param name="renderTargetViews">The render target views.</param>
            <param name="depthStencilView">A depth-stencil view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerGetRenderTargetsAndUnorderedAccessViews(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView[]@,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilView@,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView[]@)">
            <summary>
            Get pointers to the resources bound to the output-merger stage.
            </summary>
            <param name="numRenderTargetViews">The number of render-target views to retrieve.</param>
            <param name="renderTargetViews">The render-target views.</param>
            <param name="depthStencilView">A depth-stencil view.</param>
            <param name="uavStartSlot">Index into a zero-based array to begin retrieving unordered-access views.</param>
            <param name="numUnorderedAccessViews">Number of unordered-access views to return.</param>
            <param name="unorderedAccessViews">The  unordered-access views that are retrieved.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerGetBlendState(JeremyAnsel.DirectX.D3D11.D3D11BlendState@,System.Single[]@,System.UInt32@)">
            <summary>
            Get the blend state of the output-merger stage.
            </summary>
            <param name="blendState">A blend-state interface.</param>
            <param name="blendFactor">Array of blend factors, one for each RGBA component.</param>
            <param name="sampleMask">A sample mask.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerGetDepthStencilState(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilState@,System.UInt32@)">
            <summary>
            Gets the depth-stencil state of the output-merger stage.
            </summary>
            <param name="depthStencilState">A depth-stencil state interface.</param>
            <param name="stencilReference">The stencil reference value used in the depth-stencil test.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.StreamOutputGetTargets(System.UInt32)">
            <summary>
            Get the target output buffers for the stream-output stage of the pipeline.
            </summary>
            <param name="numBuffers">Number of buffers to get.</param>
            <returns>An array of output buffers to be retrieved from the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.RasterizerStageGetState">
            <summary>
            Get the rasterizer state from the rasterizer stage of the pipeline.
            </summary>
            <returns>A rasterizer-state interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.RasterizerStageGetViewports">
            <summary>
            Gets the array of viewports bound to the rasterizer stage.
            </summary>
            <returns>The viewports that are bound to the rasterizer stage.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.RasterizerStageGetScissorRects">
            <summary>
            Get the array of scissor rectangles bound to the rasterizer stage.
            </summary>
            <returns>An array of scissor rectangles.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.HullShaderGetShaderResources(System.UInt32,System.UInt32)">
            <summary>
            Get the hull shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <returns>Array of shader resource view interfaces to be returned by the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.HullShaderGetShader">
            <summary>
            Get the hull shader currently set on the device.
            </summary>
            <returns>A hull shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.HullShaderGetShader(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[]@)">
            <summary>
            Get the hull shader currently set on the device.
            </summary>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <returns>A hull shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.HullShaderGetSamplers(System.UInt32,System.UInt32)">
            <summary>
            Get an array of sampler state interfaces from the hull shader stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <returns>An array of sampler-state interfaces.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.HullShaderGetConstantBuffers(System.UInt32,System.UInt32)">
            <summary>
            Get the constant buffers used by the hull shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <returns>Array of constant buffer interface pointers to be returned by the method.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DomainShaderGetShaderResources(System.UInt32,System.UInt32)">
            <summary>
            Get the domain shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <returns>Array of shader resource view interfaces to be returned by the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DomainShaderGetShader">
            <summary>
            Get the domain shader currently set on the device.
            </summary>
            <returns>A domain shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DomainShaderGetShader(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[]@)">
            <summary>
            Get the domain shader currently set on the device.
            </summary>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <returns>A domain shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DomainShaderGetSamplers(System.UInt32,System.UInt32)">
            <summary>
            Get an array of sampler state interfaces from the domain shader stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <returns>An array of sampler-state interfaces.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.DomainShaderGetConstantBuffers(System.UInt32,System.UInt32)">
            <summary>
            Get the constant buffers used by the domain shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <returns>Array of constant buffer interface pointers to be returned by the method.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderGetShaderResources(System.UInt32,System.UInt32)">
            <summary>
            Get the compute shader resources.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin getting shader resources from.</param>
            <param name="numViews">The number of resources to get from the device.</param>
            <returns>Array of shader resource view interfaces to be returned by the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderGetUnorderedAccessViews(System.UInt32,System.UInt32)">
            <summary>
            Gets an array of views for an unordered resource.
            </summary>
            <param name="startSlot">Index of the first element in the zero-based array to return.</param>
            <param name="numUnorderedAccessViews">Number of views to get.</param>
            <returns>An array of interface pointers.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderGetShader">
            <summary>
            Get the compute shader currently set on the device.
            </summary>
            <returns>A compute shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderGetShader(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ClassInstance[]@)">
            <summary>
            Get the compute shader currently set on the device.
            </summary>
            <param name="numClassInstances">The number of class-instance elements in the array.</param>
            <param name="classInstances">An array of class instance interfaces.</param>
            <returns>A compute shader.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderGetSamplers(System.UInt32,System.UInt32)">
            <summary>
            Get an array of sampler state interfaces from the compute shader stage.
            </summary>
            <param name="startSlot">Index into a zero-based array to begin getting samplers from.</param>
            <param name="numSamplers">Number of samplers to get from a device context.</param>
            <returns>An array of sampler-state interfaces.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ComputeShaderGetConstantBuffers(System.UInt32,System.UInt32)">
            <summary>
            Get the constant buffers used by the compute shader stage.
            </summary>
            <param name="startSlot">Index into the device's zero-based array to begin retrieving constant buffers from.</param>
            <param name="numBuffers">Number of buffers to retrieve.</param>
            <returns>Array of constant buffer interface pointers to be returned by the method.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.ClearState">
            <summary>
            Restore all default settings.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Flush">
            <summary>
            Sends queued-up commands in the command buffer to the graphics processing unit (GPU).
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.FinishCommandList(System.Boolean)">
            <summary>
            Create a command list and record graphics commands into it.
            </summary>
            <param name="restoreDeferredContextState">A value indicating whether the runtime saves deferred context state before it executes <c>FinishCommandList</c> and restores it afterwards.</param>
            <returns>The recorded command list.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DomainShader">
            <summary>
            A domain shader interface manages an executable program (a domain shader) that controls the domain shader stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DomainShader.domainShader">
            <summary>
            The D3D11 domain shader interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DomainShader.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DomainShader)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DomainShader"/> class.
            </summary>
            <param name="domainShader">A D3D11 domain shader interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DomainShader.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Error">
            <summary>
            D3D11 error codes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Error.TooManyUniqueStateObjects">
            <summary>
            The application has exceeded the maximum number of unique state objects per Direct3D device.
            The limit is 4096 for feature levels up to 11.1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Error.FileNotFound">
            <summary>
            The specified file was not found.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Error.TooManyUniqueViewObjects">
            <summary>
            The application has exceeded the maximum number of unique view objects per Direct3D device.
            The limit is 2^20 for feature levels up to 11.1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Error.DeferredContextMapWithoutInitialDiscard">
            <summary>
            The application's first call per command list to Map on a deferred context did not use D3D11_MAP_WRITE_DISCARD.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11GeometryShader">
            <summary>
            A geometry shader interface manages an executable program (a geometry shader) that controls the geometry shader stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11GeometryShader.geometryShader">
            <summary>
            The D3D11 geometry shader interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11GeometryShader.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11GeometryShader)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11GeometryShader"/> class.
            </summary>
            <param name="geometryShader">A D3D11 geometry shader interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11GeometryShader.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11HullShader">
            <summary>
            A hull shader interface manages an executable program (a hull shader) that controls the hull shader stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11HullShader.hullShader">
            <summary>
            The D3D11 hull shader interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11HullShader.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11HullShader)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11HullShader"/> class.
            </summary>
            <param name="hullShader">A D3D11 hull shader interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11HullShader.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11InputLayout">
            <summary>
            An input-layout interface holds a definition of how to feed vertex data that is laid out in memory into the input-assembler stage of the graphics pipeline.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputLayout.inputLayout">
            <summary>
            The D3D11 input layout interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11InputLayout.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11InputLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11InputLayout"/> class.
            </summary>
            <param name="inputLayout">A D3D11 input layout interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11InputLayout.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11PixelShader">
            <summary>
            A pixel shader interface manages an executable program (a pixel shader) that controls the pixel shader stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PixelShader.pixelShader">
            <summary>
            The D3D11 pixel shader interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11PixelShader.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11PixelShader)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11PixelShader"/> class.
            </summary>
            <param name="pixelShader">A D3D11 pixel shader interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11PixelShader.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Predicate">
            <summary>
            A predicate interface determines whether geometry should be processed depending on the results of a previous draw call.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Predicate.predicate">
            <summary>
            The D3D11 predicate interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Predicate.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Predicate)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Predicate"/> class.
            </summary>
            <param name="predicate">A D3D11 predicate interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Predicate.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Predicate.Description">
            <summary>
            Gets a query description.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Query">
            <summary>
            A query interface queries information from the GPU.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Query.query">
            <summary>
            The D3D11 query interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Query.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Query)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Query"/> class.
            </summary>
            <param name="query">A D3D11 query interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Query.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Query.Description">
            <summary>
            Gets a query description.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerState">
            <summary>
            The rasterizer-state interface holds a description for rasterizer state that you can bind to the rasterizer stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerState.rasterizerState">
            <summary>
            The D3D11 rasterizer state interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RasterizerState.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RasterizerState)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerState"/> class.
            </summary>
            <param name="rasterizerState">A D3D11 rasterizer state interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerState.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerState.Description">
            <summary>
            Gets the description for rasterizer state that you used to create the rasterizer-state object.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView">
            <summary>
            A render-target-view interface identifies the render-target subresources that can be accessed during rendering.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView.renderTargetView">
            <summary>
            The D3D11 render interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11RenderTargetView)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView"/> class.
            </summary>
            <param name="renderTargetView">A D3D11 render target view interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView.Description">
            <summary>
            Gets the properties of a render target view.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Resource">
            <summary>
            A resource interface provides common actions on all resources.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Resource"/> class.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Resource.Dimension">
            <summary>
            Gets the type of the resource.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Resource.EvictionPriority">
            <summary>
            Gets or sets the eviction priority of a resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerState">
            <summary>
            The sampler-state interface holds a description for sampler state that you can bind to any shader stage of the pipeline for reference by texture sample operations.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerState.samplerState">
            <summary>
            The D3D11 sampler state interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SamplerState.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11SamplerState)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerState"/> class.
            </summary>
            <param name="samplerState">A D3D11 sampler state interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerState.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerState.Description">
            <summary>
            Gets the description for sampler state that you used to create the sampler-state object.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView">
            <summary>
            A shader-resource-view interface specifies the subresources a shader can access during rendering.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView.shaderResourceView">
            <summary>
            The D3D11 shader resource view interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11ShaderResourceView)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView"/> class.
            </summary>
            <param name="shaderResourceView">A D3D11 shader resource view interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView.Description">
            <summary>
            Gets the shader resource view's description.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1D">
            <summary>
            A 1D texture interface accesses texel data, which is structured memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1D.texture1D">
            <summary>
            The D3D11 texture 1D interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1D.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture1D)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1D"/> class.
            </summary>
            <param name="texture1D">A D3D11 texture 1D interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1D.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1D.Description">
            <summary>
            Gets the properties of the texture resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2D">
            <summary>
            A 2D texture interface manages texel data, which is structured memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2D.texture2D">
            <summary>
            The D3D11 texture 2D interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2D.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture2D)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2D"/> class.
            </summary>
            <param name="texture2D">A D3D11 texture 2D interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2D.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2D.Description">
            <summary>
            Gets the properties of the texture resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3D">
            <summary>
            A 3D texture interface accesses texel data, which is structured memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3D.texture3D">
            <summary>
            The D3D11 texture 3D interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3D.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Texture3D)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3D"/> class.
            </summary>
            <param name="texture3D">A D3D11 texture 3D interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3D.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3D.Description">
            <summary>
            Gets the properties of the texture resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView">
            <summary>
            A view interface specifies the parts of a resource the pipeline can access during rendering.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView.unorderedAccessView">
            <summary>
            The D3D11 unordered access view interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11UnorderedAccessView)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView"/> class.
            </summary>
            <param name="unorderedAccessView">A D3D11 unordered access view interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessView.Description">
            <summary>
            Gets a description of the resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Utils">
            <summary>
            Utility methods.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Utils.DisposeAndNull``1(``0@)">
            <summary>
            Immediately releases the unmanaged resources.
            </summary>
            <typeparam name="T">A releasable type.</typeparam>
            <param name="obj">The object.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Utils.ReleaseAndNull``1(``0@)">
            <summary>
            Releases the managed reference to the COM interface.
            </summary>
            <typeparam name="T">A releasable type.</typeparam>
            <param name="obj">The COM interface.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11VertexShader">
            <summary>
            A vertex shader interface manages an executable program (a vertex shader) that controls the vertex shader stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11VertexShader.vertexShader">
            <summary>
            The D3D11 vertex shader interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11VertexShader.#ctor(JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11VertexShader)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11VertexShader"/> class.
            </summary>
            <param name="vertexShader">A D3D11 vertex shader interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11VertexShader.Handle">
            <summary>
            Gets an handle representing the D3D11 object interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11View">
            <summary>
            A view interface specifies the parts of a resource the pipeline can access during rendering.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11View.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11View"/> class.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11View.GetResource">
            <summary>
            Gets the resource that is accessed through this view.
            </summary>
            <returns>The resource that is accessed through this view.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11WellKnownPrivateDataId">
            <summary>
            Well-Known Private Data IDs
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11WellKnownPrivateDataId.DebugObjectName">
            <summary>
            Provides a unique name to objects in order to assist the developer during debugging.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.DxgiSwapChainExtensions">
            <summary>
            Swap chain extensions.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.DxgiSwapChainExtensions.GetTexture2D(JeremyAnsel.DirectX.Dxgi.DxgiSwapChain,System.UInt32)">
            <summary>
            Accesses one of the swap-chain's back buffers, viewed as a 2D texture.
            </summary>
            <param name="swapChain">The swap chain.</param>
            <param name="buffer">A zero-based buffer index.</param>
            <returns>A 2D texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.DxgiSwapChainExtensions.GetTexture2D(JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1,System.UInt32)">
            <summary>
            Accesses one of the swap-chain's back buffers, viewed as a 2D texture.
            </summary>
            <param name="swapChain">The swap chain.</param>
            <param name="buffer">A zero-based buffer index.</param>
            <returns>A 2D texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.DxgiSwapChainExtensions.GetTexture2D(JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2,System.UInt32)">
            <summary>
            Accesses one of the swap-chain's back buffers, viewed as a 2D texture.
            </summary>
            <param name="swapChain">The swap chain.</param>
            <param name="buffer">A zero-based buffer index.</param>
            <returns>A 2D texture.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.DxgiSwapChainExtensions.GetTexture2D(JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3,System.UInt32)">
            <summary>
            Accesses one of the swap-chain's back buffers, viewed as a 2D texture.
            </summary>
            <param name="swapChain">The swap chain.</param>
            <param name="buffer">A zero-based buffer index.</param>
            <returns>A 2D texture.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11AsyncGetDataOptions">
            <summary>
            Optional flags that control the behavior of <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GetData``1(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous,JeremyAnsel.DirectX.D3D11.D3D11AsyncGetDataOptions)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11AsyncGetDataOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11AsyncGetDataOptions.DoNotFlush">
            <summary>
            Do not flush the command buffer. This can potentially cause an infinite loop.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BindOptions">
            <summary>
            Identifies how to bind a resource to the pipeline.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.VertexBuffer">
            <summary>
            Bind a buffer as a vertex buffer to the input-assembler stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.IndexBuffer">
            <summary>
            Bind a buffer as an index buffer to the input-assembler stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.ConstantBuffer">
            <summary>
            Bind a buffer as a constant buffer to a shader stage; this flag may NOT be combined with any other bind flag.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.ShaderResource">
            <summary>
            Bind a buffer or texture to a shader stage; this flag cannot be used with the <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.WriteNoOverwrite"/> flag.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.StreamOutput">
            <summary>
            Bind an output buffer for the stream-output stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.RenderTarget">
            <summary>
            Bind a texture as a render target for the output-merger stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.DepthStencil">
            <summary>
            Bind a texture as a depth-stencil target for the output-merger stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.UnorderedAccess">
            <summary>
            Bind an unordered access resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.Decoder">
            <summary>
            Set this flag to indicate that a 2D texture is used to receive output from the decoder API.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BindOptions.VideoEncoder">
            <summary>
            Set this flag to indicate that a 2D texture is used to receive input from the video encoder API.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BlendOperation">
            <summary>
            RGB or alpha blending operation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendOperation.None">
            <summary>
            No operation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendOperation.Add">
            <summary>
            Add source 1 and source 2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendOperation.Subtract">
            <summary>
            Subtract source 1 from source 2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendOperation.ReverseSubtract">
            <summary>
            Subtract source 2 from source 1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendOperation.Mininum">
            <summary>
            Find the minimum of source 1 and source 2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendOperation.Maximum">
            <summary>
            Find the maximum of source 1 and source 2.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BlendValue">
            <summary>
            Blend factors, which modulate values for the pixel shader and render target.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.Zero">
            <summary>
            The blend factor is <c>(0, 0, 0, 0)</c>. No pre-blend operation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.One">
            <summary>
            The blend factor is <c>(1, 1, 1, 1)</c>. No pre-blend operation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.SourceColor">
            <summary>
            The blend factor is <c>(Rs, Gs, Bs, As)</c>, that is color data (RGB) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.InverseSourceColor">
            <summary>
            The blend factor is <c>(1 - Rs, 1 - Gs, 1 - Bs, 1 - As)</c>, that is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating <c>1 - RGB</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.SourceAlpha">
            <summary>
            The blend factor is <c>(As, As, As, As)</c>, that is alpha data (A) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.InverseSourceAlpha">
            <summary>
            The blend factor is <c>( 1 - As, 1 - As, 1 - As, 1 - As)</c>, that is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating <c>1 - A</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.DestinationAlpha">
            <summary>
            The blend factor is <c>(Ad, Ad, Ad, Ad)</c>, that is alpha data from a render target. No pre-blend operation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.InverseDestinationAlpha">
            <summary>
            The blend factor is <c>(1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad)</c>, that is alpha data from a render target. The pre-blend operation inverts the data, generating <c>1 - A</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.DestinationColor">
            <summary>
            The blend factor is <c>(Rd, Gd, Bd, Ad)</c>, that is color data from a render target. No pre-blend operation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.InverseDestinationColor">
            <summary>
            The blend factor is <c>(1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad)</c>, that is color data from a render target. The pre-blend operation inverts the data, generating <c>1 - RGB</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.SourceAlphaSaturate">
            <summary>
            The blend factor is <c>(f, f, f, 1)</c>, where <c>f = min(As, 1 - Ad)</c>. The pre-blend operation clamps the data to 1 or less.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.BlendFactor">
            <summary>
            The blend factor is the blend factor set with <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerSetBlendState(JeremyAnsel.DirectX.D3D11.D3D11BlendState,System.Single[],System.UInt32)"/>. No pre-blend operation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.InverseBlendFactor">
            <summary>
            The blend factor is the blend factor set with <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.OutputMergerSetBlendState(JeremyAnsel.DirectX.D3D11.D3D11BlendState,System.Single[],System.UInt32)"/>. The pre-blend operation inverts the blend factor, generating <c>1 - blend_factor</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.Source1Color">
            <summary>
            The blend factor is data sources both as color data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.InverseSource1Color">
            <summary>
            The blend factor is data sources both as color data output by a pixel shader. The pre-blend operation inverts the data, generating <c>1 - RGB</c>. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.Source1Alpha">
            <summary>
            The blend factor is data sources as alpha data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendValue.InverseSource1Alpha">
            <summary>
            The blend factor is data sources as alpha data output by a pixel shader. The pre-blend operation inverts the data, generating <c>1 - A</c>. This blend factor supports dual-source color blending.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrvOptions">
            <summary>
            Identifies how to view a buffer resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrvOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrvOptions.Raw">
            <summary>
            View the buffer as raw.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BufferUavOptions">
            <summary>
            Identifies unordered-access view options for a buffer resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferUavOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferUavOptions.Raw">
            <summary>
            Resource contains raw, unstructured data. Requires the UAV format to be <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferUavOptions.Append">
            <summary>
            Allow data to be appended to the end of the buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferUavOptions.Counter">
            <summary>
            Allow data to be appended to the end of the buffer.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ClearOptions">
            <summary>
            Specifies the parts of the depth stencil to clear.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClearOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClearOptions.Depth">
            <summary>
            Clear the depth buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClearOptions.Stencil">
            <summary>
            Clear the stencil buffer.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ColorWriteEnables">
            <summary>
            Identify which components of each pixel of a render target are writable during blending.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ColorWriteEnables.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ColorWriteEnables.Red">
            <summary>
            Allow data to be stored in the red component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ColorWriteEnables.Green">
            <summary>
            Allow data to be stored in the green component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ColorWriteEnables.Blue">
            <summary>
            Allow data to be stored in the blue component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ColorWriteEnables.Alpha">
            <summary>
            Allow data to be stored in the alpha component.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ColorWriteEnables.All">
            <summary>
            Allow data to be stored in all components.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction">
            <summary>
            Comparison options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.Never">
            <summary>
            Never pass the comparison.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.Less">
            <summary>
            If the source data is less than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.Equal">
            <summary>
            If the source data is equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.LessEqual">
            <summary>
            If the source data is less than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.Greater">
            <summary>
            If the source data is greater than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.NotEqual">
            <summary>
            If the source data is not equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.GreaterEqual">
            <summary>
            If the source data is greater than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction.Always">
            <summary>
            Always pass the comparison.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11CounterDataType">
            <summary>
            Data type of a performance counter.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterDataType.Float32">
            <summary>
            32-bit floating point.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterDataType.UInt16">
            <summary>
            16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterDataType.UInt32">
            <summary>
            32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterDataType.UInt64">
            <summary>
            64-bit unsigned integer.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11CounterType">
            <summary>
            Options for performance counters.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterType.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterType.DeviceDependent0">
            <summary>
            Define a performance counter that is dependent on the hardware device.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions">
            <summary>
            Specifies the types of CPU access allowed for a resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions.Write">
            <summary>
            The resource is to be mappable so that the CPU can change its contents. Resources created with this flag cannot be set as outputs of the pipeline and must be created with either dynamic or staging usage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions.Read">
            <summary>
            The resource is to be mappable so that the CPU can read its contents. Resources created with this flag cannot be set as either inputs or outputs to the pipeline and must be created with staging usage.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions">
            <summary>
            Describes parameters that are used to create a device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.SingleThreaded">
            <summary>
            Use this flag if your application will only call methods of Direct3D 11 interfaces from a single thread. By default, the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Device"/> object is thread-safe.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.Debug">
            <summary>
            Creates a device that supports the debug layer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.SwitchToRef">
            <summary>
            This flag is not supported in Direct3D 11.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.PreventInternalThreadingOptimizations">
            <summary>
            Prevents multiple threads from being created.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.BgraSupport">
            <summary>
            Required for Direct2D interoperability with Direct3D resources.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.Debuggable">
            <summary>
            Causes the device and driver to keep information that you can use for shader debugging. The exact impact from this flag will vary from driver to driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.PreventAlteringLayerSettingsFromRegistry">
            <summary>
            Causes the Direct3D runtime to ignore registry settings that turn on the debug layer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.DisableGpuTimeout">
            <summary>
            Use this flag if the device will produce GPU workloads that take more than two seconds to complete, and you want the operating system to allow them to successfully finish. 
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions.VideoSupport">
            <summary>
            Forces the creation of the Direct3D device to fail if the display driver is not implemented to the WDDM.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11CullMode">
            <summary>
            Indicates triangles facing a particular direction are not drawn.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CullMode.Unspecified">
            <summary>
            Unspecified mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CullMode.None">
            <summary>
            Always draw all triangles.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CullMode.Front">
            <summary>
            Do not draw triangles that are front-facing.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CullMode.Back">
            <summary>
            Do not draw triangles that are back-facing.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewOptions">
            <summary>
            Depth-stencil view options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewOptions.None">
            <summary>
            No option. Not read only.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewOptions.ReadOnlyDepth">
            <summary>
            Indicates that depth values are read only.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewOptions.ReadOnlyStencil">
            <summary>
            Indicates that stencil values are read only.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DepthWriteMask">
            <summary>
            Identify the portion of a depth-stencil buffer for writing depth data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthWriteMask.Zero">
            <summary>
            Turn off writes to the depth-stencil buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthWriteMask.All">
            <summary>
            Turn on writes to the depth-stencil buffer.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DeviceContextType">
            <summary>
            Device context options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DeviceContextType.Immediate">
            <summary>
            The device context is an immediate context.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DeviceContextType.Deferred">
            <summary>
            The device context is a deferred context.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DriverType">
            <summary>
            Driver type options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DriverType.Unknown">
            <summary>
            The driver type is unknown.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DriverType.Hardware">
            <summary>
            A hardware driver, which implements Direct3D features in hardware. This is the primary driver that you should use in your Direct3D applications because it provides the best performance. A hardware driver uses hardware acceleration (on supported hardware) but can also use software for parts of the pipeline that are not supported in hardware. This driver type is often referred to as a hardware abstraction layer or HAL.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DriverType.Reference">
            <summary>
            A reference driver, which is a software implementation that supports every Direct3D feature. A reference driver is designed for accuracy rather than speed and as a result is slow but accurate. The rasterizer portion of the driver does make use of special CPU instructions whenever it can, but it is not intended for retail applications; use it only for feature testing, demonstration of functionality, debugging, or verifying bugs in other drivers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DriverType.Null">
            <summary>
            A NULL driver, which is a reference driver without render capability. This driver is commonly used for debugging non-rendering API calls, it is not appropriate for retail applications.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DriverType.Software">
            <summary>
            A software driver, which is a driver implemented completely in software. The software implementation is not intended for a high-performance application due to its very slow performance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DriverType.Warp">
            <summary>
            A WARP driver, which is a high-performance software rasterizer.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DsvDimension">
            <summary>
            Specifies how to access a resource used in a depth-stencil view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DsvDimension.Unknown">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DsvDimension.Texture1D">
            <summary>
            The resource will be accessed as a 1D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DsvDimension.Texture1DArray">
            <summary>
            The resource will be accessed as an array of 1D textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DsvDimension.Texture2D">
            <summary>
            The resource will be accessed as a 2D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DsvDimension.Texture2DArray">
            <summary>
            The resource will be accessed as an array of 2D textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DsvDimension.Texture2DMs">
            <summary>
            The resource will be accessed as a 2D texture with multisampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DsvDimension.Texture2DMsArray">
            <summary>
            The resource will be accessed as an array of 2D textures with multisampling.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Feature">
            <summary>
            Direct3D 11 feature options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.Threading">
            <summary>
            The driver supports multithreading.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.Doubles">
            <summary>
            Supports the use of the double-precision shaders in HLSL.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.FormatSupport">
            <summary>
            Supports the formats in <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.FormatSupport2">
            <summary>
            Supports the formats in <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.D3D10XHardwareOptions">
            <summary>
            Supports compute shaders and raw and structured buffers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.D3D11Options">
            <summary>
            Supports Direct3D 11.1 feature options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.ArchitectureInfo">
            <summary>
            Supports specific adapter architecture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.D3D9Options">
            <summary>
            Supports Direct3D 9 feature options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.ShaderMinPrecisionSupport">
            <summary>
            Supports minimum precision of shaders.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.D3D9ShadowSupport">
            <summary>
            Supports Direct3D 9 shadowing feature.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.D3D11Options1">
            <summary>
            Supports Direct3D 11.2 feature options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.D3D9SimpleInstancingSupport">
            <summary>
            Supports Direct3D 11.2 instancing options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.MarkerSupport">
            <summary>
            Supports Direct3D 11.2 marker options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Feature.D3D9Options1">
            <summary>
            Supports Direct3D 9 feature options, which includes the Direct3D 9 shadowing feature and instancing support.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel">
            <summary>
            Describes the set of features targeted by a Direct3D device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel.FeatureLevel91">
            <summary>
            Targets features supported by feature level 9.1 including shader model 2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel.FeatureLevel92">
            <summary>
            Targets features supported by feature level 9.2 including shader model 2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel.FeatureLevel93">
            <summary>
            Targets features supported by feature level 9.3 including shader model 2.0b.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel.FeatureLevel100">
            <summary>
            Targets features supported by Direct3D 10.0 including shader model 4.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel.FeatureLevel101">
            <summary>
            Targets features supported by Direct3D 10.1 including shader model 4.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel.FeatureLevel110">
            <summary>
            Targets features supported by Direct3D 11.0 including shader model 5.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel.FeatureLevel111">
            <summary>
            Targets features supported by Direct3D 11.1 including shader model 5 and logical blend operations.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FillMode">
            <summary>
            Determines the fill mode to use when rendering triangles.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FillMode.None">
            <summary>
            No mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FillMode.WireFrame">
            <summary>
            Draw lines connecting the vertices. Adjacent vertices are not drawn.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FillMode.Solid">
            <summary>
            Fill the triangles formed by the vertices. Adjacent vertices are not drawn.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Filter">
            <summary>
            Filtering options during texture sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinMagMipPoint">
            <summary>
            Use point sampling for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinMagPointMipLinear">
            <summary>
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinPointMagLinearMipPoint">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinPointMagMipLinear">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinLinearMagMipPoint">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinLinearMagPointMipLinear">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinMagLinearMipPoint">
            <summary>
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinMagMipLinear">
            <summary>
            Use linear interpolation for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.Anisotropic">
            <summary>
            Use anisotropic interpolation for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonMinMagMipPoint">
            <summary>
            Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonMinMagPointMipLinear">
            <summary>
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonMinPointMagLinearMipPoint">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonMinPointMagMipLinear">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonMinLinearMagMipPoint">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonMinLinearMagPointMipLinear">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonMinMagLinearMipPoint">
            <summary>
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonMinMagMipLinear">
            <summary>
            Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonAnisotropic">
            <summary>
            Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinimumMinMagMipPoint">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_MAG_MIP_POINT</c> and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinimumMinMagPointMipLinear">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR</c> and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinimumMinPointMagLinearMipPoint">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</c> and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinimumMinPointMagMipLinear">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR</c> and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinimumMinLinearMagMipPoint">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT</c> and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinimumMinLinearMagPointMipLinear">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</c> and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinimumMinMagLinearMipPoint">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT</c> and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinimumMinMagMipLinear">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_MAG_MIP_LINEAR</c> and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MinimumAnisotropic">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_ANISOTROPIC</c> and instead of filtering them return the minimum of the texels. Texels that are weighted 0 during filtering aren't counted towards the minimum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MaximumMinMagMipPoint">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_MAG_MIP_POINT</c> and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MaximumMinMagPointMipLinear">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR</c> and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MaximumMinPointMagLinearMipPoint">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</c> and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MaximumMinPointMagMipLinear">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR</c> and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MaximumMinLinearMagMipPoint">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT</c> and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MaximumMinLinearMagPointMipLinear">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</c> and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MaximumMinMagLinearMipPoint">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT</c> and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MaximumMinMagMipLinear">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_MIN_MAG_MIP_LINEAR</c> and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.MaximumAnisotropic">
            <summary>
            Fetch the same set of texels as <c>D3D11_FILTER_ANISOTROPIC</c> and instead of filtering them return the maximum of the texels. Texels that are weighted 0 during filtering aren't counted towards the maximum.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport">
            <summary>
            Which resources are supported for a given format and given device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.Buffer">
            <summary>
            Buffer resources supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.InputAssemblerVertexBuffer">
            <summary>
            Vertex buffers supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.InputAssemblerIndexBuffer">
            <summary>
            Index buffers supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.StreamOutputBuffer">
            <summary>
            Streaming output buffers supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.Texture1D">
            <summary>
            1D texture resources supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.Texture2D">
            <summary>
            2D texture resources supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.Texture3D">
            <summary>
            3D texture resources supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.TextureCube">
            <summary>
            Cube texture resources supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.ShaderLoad">
            <summary>
            The HLSL Load function for texture objects is supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.ShaderSample">
            <summary>
            The HLSL Sample function for texture objects is supported.
            <note type="note">If the device supports the format as a resource (1D, 2D, 3D, or cube map) but doesn't support this option, the resource can still use the Sample method but must use only the point filtering sampler state to perform the sample.</note>
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.ShaderSampleComparison">
            <summary>
            The HLSL <c>SampleCmp</c> and <c>SampleCmpLevelZero </c>functions for texture objects are supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.ShaderSampleMonoTexture">
            <summary>
            Reserved value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.Mip">
            <summary>
            Mipmaps are supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.MipAutogen">
            <summary>
            Automatic generation of mipmaps is supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.RenderTarget">
            <summary>
            Render targets are supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.Blendable">
            <summary>
            Blend operations supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.DepthStencil">
            <summary>
            Depth stencils supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.CpuLockable">
            <summary>
            CPU locking supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.MultisampleResolve">
            <summary>
            Multisample antialiasing (MSAA) resolve operations are supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.Display">
            <summary>
            Format can be displayed on screen.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.CastWithinBitLayout">
            <summary>
            Format cannot be cast to another format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.MultisampleRenderTarget">
            <summary>
            Format can be used as a multisampled render target.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.MultisampleLoad">
            <summary>
            Format can be used as a multisampled texture and read into a shader with the HLSL load function.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.ShaderGather">
            <summary>
            Format can be used with the HLSL gather function.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.BackBufferCast">
            <summary>
            Format supports casting when the resource is a back buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.TypedUnorderedAccessView">
            <summary>
            Format can be used for an unordered access view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.ShaderGatherComparison">
            <summary>
            Format can be used with the HLSL gather with comparison function.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.DecoderOutput">
            <summary>
            Format can be used with the decoder output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.VideoProcessorOutput">
            <summary>
            Format can be used with the video processor output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.VideoProcessorInput">
            <summary>
            Format can be used with the video processor input.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport.VideoEncoder">
            <summary>
            Format can be used with the video encoder.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2">
            <summary>
            Unordered resource support options for a compute shader resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.UavAtomicAdd">
            <summary>
            Format supports atomic add.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.UavAtomicBitwiseOperations">
            <summary>
            Format supports atomic bitwise operations.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.UavAtomicCompareStoreOrCompareExchange">
            <summary>
            Format supports atomic compare with store or exchange.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.UavAtomicExchange">
            <summary>
            Format supports atomic exchange.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.UavAtomicSignedMinOrMax">
            <summary>
            Format supports atomic min and max.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.UavAtomicUnsignedMinOrMax">
            <summary>
            Format supports atomic unsigned min and max.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.UavTypedLoad">
            <summary>
            Format supports a typed load.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.UavTypedStore">
            <summary>
            Format supports a typed store.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.OutputMergerLogicOperation">
            <summary>
            Format supports logic operations in blend state.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.Tiled">
            <summary>
            Format supports tiled resources.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2.Shareable">
            <summary>
            Format supports shareable resources.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11InputClassification">
            <summary>
            Type of data contained in an input slot.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputClassification.PerVertexData">
            <summary>
            Input data is per-vertex data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputClassification.PerInstanceData">
            <summary>
            Input data is per-instance data.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission">
            <summary>
            Identifies a resource to be accessed for reading and writing by the CPU.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.Read">
            <summary>
            Resource is mapped for reading. The resource must have been created with read access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.Write">
            <summary>
            Resource is mapped for writing. The resource must have been created with write access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.ReadWrite">
            <summary>
            Resource is mapped for reading and writing. The resource must have been created with read and write access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.WriteDiscard">
            <summary>
            Resource is mapped for writing; the previous contents of the resource will be undefined. The resource must have been created with write access and dynamic usage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.WriteNoOverwrite">
            <summary>
            Resource is mapped for writing; the existing contents of the resource cannot be overwritten (see Remarks). This flag is only valid on vertex and index buffers. The resource must have been created with write access.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11MapOptions">
            <summary>
            Specifies how the CPU should respond when an application calls the <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Map(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission,JeremyAnsel.DirectX.D3D11.D3D11MapOptions)"/> method on a resource that is being used by the GPU.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MapOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MapOptions.DoNotWait">
            <summary>
            Specifies that <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Map(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission,JeremyAnsel.DirectX.D3D11.D3D11MapOptions)"/> should return <see cref="F:JeremyAnsel.DirectX.Dxgi.DxgiError.WasStillDrawing"/> when the GPU blocks the CPU from accessing a resource. 
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Primitive">
            <summary>
            Indicates how the pipeline interprets geometry or hull shader input primitives.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Undefined">
            <summary>
            The shader has not been initialized with an input primitive type.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Point">
            <summary>
            Interpret the input primitive as a point.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Line">
            <summary>
            Interpret the input primitive as a line.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Triangle">
            <summary>
            Interpret the input primitive as a triangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.LineAdj">
            <summary>
            Interpret the input primitive as a line with adjacency data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.TriangleAdj">
            <summary>
            Interpret the input primitive as a triangle with adjacency data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch1ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch2ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch3ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch4ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch5ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch6ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch7ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch8ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch9ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch10ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch11ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch12ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch13ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch14ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch15ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch16ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch17ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch18ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch19ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch20ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch21ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch22ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch23ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch24ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch25ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch26ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch27ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch28ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch29ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch30ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch31ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Primitive.Patch32ControlPoint">
            <summary>
            Interpret the input primitive as a control point patch.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology">
            <summary>
            How the pipeline interprets vertex data that is bound to the input-assembler stage. These primitive topology values determine how the vertex data is rendered on screen.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.Undefined">
            <summary>
            The IA stage has not been initialized with a primitive topology. The IA stage will not function properly unless a primitive topology is defined.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PointList">
            <summary>
            Interpret the vertex data as a list of points.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.LineList">
            <summary>
            Interpret the vertex data as a list of lines.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.LineStrip">
            <summary>
            Interpret the vertex data as a line strip.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.TriangleList">
            <summary>
            Interpret the vertex data as a list of triangles.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.TriangleStrip">
            <summary>
            Interpret the vertex data as a triangle strip.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.LineListAdj">
            <summary>
            Interpret the vertex data as list of lines with adjacency data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.LineStripAdj">
            <summary>
            Interpret the vertex data as line strip with adjacency data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.TriangleListAdj">
            <summary>
            Interpret the vertex data as list of triangles with adjacency data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.TriangleStripAdj">
            <summary>
            Interpret the vertex data as triangle strip with adjacency data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList1ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList2ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList3ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList4ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList5ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList6ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList7ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList8ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList9ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList10ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList11ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList12ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList13ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList14ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList15ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList16ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList17ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList18ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList19ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList20ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList21ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList22ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList23ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList24ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList25ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList26ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList27ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList28ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList29ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList30ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList31ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11PrimitiveTopology.PatchList32ControlPoint">
            <summary>
            Interpret the vertex data as a patch list.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11QueryMiscOptions">
            <summary>
            Flags that describe miscellaneous query behavior.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryMiscOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryMiscOptions.PredicateHint">
            <summary>
            Tell the hardware that if it is not yet sure if something is hidden or not to draw it anyway. This is only used with an occlusion predicate.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11QueryType">
            <summary>
            Query types.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.Event">
            <summary>
            Determines whether or not the GPU is finished processing commands.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.Occlusion">
            <summary>
            Get the number of samples that passed the depth and stencil tests in between <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/> and <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.Timestamp">
            <summary>
            Get a timestamp value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.TimestampDisjoint">
            <summary>
            Determines whether or not a <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.Timestamp"/> is returning reliable values, and also gives the frequency of the processor enabling you to convert the number of elapsed ticks into seconds.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.PipelineStatistics">
            <summary>
            Get pipeline statistics, such as the number of pixel shader invocations in between <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/> and <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.OccusionPredicate">
            <summary>
            Similar to <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.Occlusion"/>, except <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GetData``1(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous,JeremyAnsel.DirectX.D3D11.D3D11AsyncGetDataOptions)"/> returns a BOOL indicating whether or not any samples passed the depth and stencil tests - <c>TRUE</c> meaning at least one passed, <c>FALSE</c> meaning none passed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputStatistics">
            <summary>
            Get streaming output statistics.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputOverflowPredicate">
            <summary>
            Determines whether or not any of the streaming output buffers overflowed in between <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/> and <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputStatisticsStream0">
            <summary>
            Get streaming output statistics for stream 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputOverflowPredicateStream0">
            <summary>
            Determines whether or not the stream 0 output buffers overflowed in between <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/> and <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputStatisticsStream1">
            <summary>
            Get streaming output statistics for stream 1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputOverflowPredicateStream1">
            <summary>
            Determines whether or not the stream 1 output buffers overflowed in between <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/> and <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputStatisticsStream2">
            <summary>
            Get streaming output statistics for stream 2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputOverflowPredicateStream2">
            <summary>
            Determines whether or not the stream 2 output buffers overflowed in between <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/> and <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputStatisticsStream3">
            <summary>
            Get streaming output statistics for stream 3.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryType.StreamOutputOverflowPredicateStream3">
            <summary>
            Determines whether or not the stream 3 output buffers overflowed in between <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/> and <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/>.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11RaiseOptions">
            <summary>
            Option(s) for raising an error to a non-continuable exception.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RaiseOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RaiseOptions.DriverInternalError">
            <summary>
            Raise an internal driver error to a non-continuable exception.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension">
            <summary>
            Identifies the type of resource being used.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension.Unknown">
            <summary>
            Resource is of unknown type.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension.Buffer">
            <summary>
            Resource is a buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension.Texture1D">
            <summary>
            Resource is a 1D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension.Texture2D">
            <summary>
            Resource is a 2D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceDimension.Texture3D">
            <summary>
            Resource is a 3D texture.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions">
            <summary>
            Identifies options for resources.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.GenerateMips">
            <summary>
            Enables MIP map generation by using <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.GenerateMips(JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceView)"/> on a texture resource. The resource must be created with the bind flags that specify that the resource is a render target and a shader resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.Shared">
            <summary>
            Enables resource data sharing between two or more Direct3D devices. The only resources that can be shared are 2D non-mipmapped textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.TextureCube">
            <summary>
            Sets a resource to be a cube texture created from a Texture2DArray that contains 6 textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.DrawIndirectArgs">
            <summary>
            Enables instancing of GPU-generated content.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.BufferAllowRawViews">
            <summary>
            Enables a resource as a byte address buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.BufferStructured">
            <summary>
            Enables a resource as a structured buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.ResourceClamp">
            <summary>
            Enables a resource with MIP map clamping for use with <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.SetResourceMinLod(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.Single)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.SharedKeyedMutex">
            <summary>
            Enables the resource to be synchronized by using the <see cref="M:JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex.AcquireSync(System.UInt64,System.UInt32)"/> and <see cref="M:JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex.ReleaseSync(System.UInt64)"/> APIs.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.GdiCompatible">
            <summary>
            Enables a resource compatible with GDI.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.SharedNTHandle">
            <summary>
            Set this flag to enable the use of NT HANDLE values when you create a shared resource. By enabling this flag, you deprecate the use of existing HANDLE values.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.RestrictedContent">
            <summary>
            Set this flag to indicate that the resource might contain protected content; therefore, the operating system should use the resource only when the driver and hardware support content protection. If the driver and hardware do not support content protection and you try to create a resource with this flag, the resource creation fails.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.RestrictSharedResource">
            <summary>
            Set this flag to indicate that the operating system restricts access to the shared surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.RestrictSharedResourceDriver">
            <summary>
            Set this flag to indicate that the driver restricts access to the shared surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.Guarded">
            <summary>
            Set this flag to indicate that the resource is guarded.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.TilePool">
            <summary>
            Set this flag to indicate that the resource is a tile pool.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions.Tiled">
            <summary>
            Set this flag to indicate that the resource is a tiled resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension">
            <summary>
            These flags identify the type of resource that will be viewed as a render target.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.Unknown">
            <summary>
            Do not use this value, as it will cause <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateRenderTargetView(JeremyAnsel.DirectX.D3D11.D3D11Resource,System.Nullable{JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc})"/> to fail.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.Buffer">
            <summary>
            The resource will be accessed as a buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.Texture1D">
            <summary>
            The resource will be accessed as a 1D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.Texture1DArray">
            <summary>
            The resource will be accessed as an array of 1D textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.Texture2D">
            <summary>
            The resource will be accessed as a 2D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.Texture2DArray">
            <summary>
            The resource will be accessed as an array of 2D textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.Texture2DMs">
            <summary>
            The resource will be accessed as a 2D texture with multisampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.Texture2DMsArray">
            <summary>
            The resource will be accessed as an array of 2D textures with multisampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RtvDimension.Texture3D">
            <summary>
            The resource will be accessed as a 3D texture.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderMinPrecisionSupports">
            <summary>
            Values that specify minimum precision levels at shader stages.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderMinPrecisionSupports.None">
            <summary>
            No option. Only full 32-bit precision.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderMinPrecisionSupports.TenBit">
            <summary>
            Minimum precision level is 10-bit.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderMinPrecisionSupports.SixteenBit">
            <summary>
            Minimum precision level is 16-bit.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension">
            <summary>
            These flags identify the type of resource that will be viewed as a shader resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.Unknown">
            <summary>
            The type is unknown.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.Buffer">
            <summary>
            The resource is a buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.Texture1D">
            <summary>
            The resource is a 1D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.Texture1DArray">
            <summary>
            The resource is an array of 1D textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.Texture2D">
            <summary>
            The resource is a 2D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.Texture2DArray">
            <summary>
            The resource is an array of 2D textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.Texture2DMs">
            <summary>
            The resource is a multisampling 2D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.Texture2DMsArray">
            <summary>
            The resource is an array of multisampling 2D textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.Texture3D">
            <summary>
            The resource is a 3D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.TextureCube">
            <summary>
            The resource is a cube texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.TextureCubeArray">
            <summary>
            The resource is an array of cube textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SrvDimension.BufferEx">
            <summary>
            The resource is a raw buffer.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation">
            <summary>
            The stencil operations that can be performed during depth-stencil testing.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.Keep">
            <summary>
            Keep the existing stencil data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.Zero">
            <summary>
            Set the stencil data to 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.Replace">
            <summary>
            Set the stencil data to the reference value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.IncrementSaturate">
            <summary>
            Increment the stencil value by 1, and clamp the result.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.DecrementSaturate">
            <summary>
            Decrement the stencil value by 1, and clamp the result.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.Invert">
            <summary>
            Invert the stencil data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.Increment">
            <summary>
            Increment the stencil value by 1, and wrap the result if necessary.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StencilOperation.Decrement">
            <summary>
            Decrement the stencil value by 1, and wrap the result if necessary.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode">
            <summary>
            Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Wrap">
            <summary>
            Tile the texture at every (u,v) integer junction. For example, for u values between 0 and 3, the texture is repeated three times.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Mirror">
            <summary>
            Flip the texture at every (u,v) integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Clamp">
            <summary>
            Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border">
            <summary>
            Texture coordinates outside the range [0.0, 1.0] are set to the border color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.MirrorOnce">
            <summary>
            Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeFace">
            <summary>
            The different faces of a cube texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeFace.PositiveX">
            <summary>
            Positive X face.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeFace.NegativeX">
            <summary>
            Negative X face.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeFace.PositiveY">
            <summary>
            Positive Y face.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeFace.NegativeY">
            <summary>
            Negative Y face.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeFace.PositiveZ">
            <summary>
            Positive Z face.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeFace.NegativeZ">
            <summary>
            Negative Z face.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11TiledResourcesTier">
            <summary>
            Indicates the tier level at which tiled resources are supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TiledResourcesTier.NotSupported">
            <summary>
            Tiled resources are not supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TiledResourcesTier.Tier1">
            <summary>
            Tier_1 tiled resources are supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TiledResourcesTier.Tier2">
            <summary>
            Tier_2 tiled resources are supported.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11UavDimension">
            <summary>
            Unordered-access view options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UavDimension.Unknown">
            <summary>
            The view type is unknown.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UavDimension.Buffer">
            <summary>
            View the resource as a buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UavDimension.Texture1D">
            <summary>
            View the resource as a 1D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UavDimension.Texture1DArray">
            <summary>
            View the resource as a 1D texture array.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UavDimension.Texture2D">
            <summary>
            View the resource as a 2D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UavDimension.Texture2DArray">
            <summary>
            View the resource as a 2D texture array.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UavDimension.Texture3D">
            <summary>
            View the resource as a 3D texture array.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Usage">
            <summary>
            Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the graphics processing unit (GPU).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Usage.Default">
            <summary>
            A resource that requires read and write access by the GPU.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Usage.Immutable">
            <summary>
            A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Usage.Dynamic">
            <summary>
            A resource that is accessible by both the GPU (read only) and the CPU (write only).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Usage.Staging">
            <summary>
            A resource that supports data transfer (copy) from the GPU to the CPU.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.ID3D11Releasable">
            <summary>
            Defines a method to release the managed reference to the COM interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ID3D11Releasable.Dispose">
            <summary>
            Immediately releases the unmanaged resources.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.ID3D11Releasable.Release">
            <summary>
            Releases the managed reference to the COM interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.NativeMethods">
            <summary>
            Native methods.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.NativeMethods.D3D11CreateDevice(System.Object,JeremyAnsel.DirectX.D3D11.D3D11DriverType,System.IntPtr,JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions,JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel[],System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@,JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel@,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext@)">
            <summary>
            Creates a device that represents the display adapter.
            </summary>
            <param name="adapter">A pointer to the video adapter to use when creating a device.</param>
            <param name="driverType">The driver type to create.</param>
            <param name="software">A handle to a DLL that implements a software rasterizer.</param>
            <param name="options">The runtime layers to enable.</param>
            <param name="featureLevels">Determine the order of feature levels to attempt to create.</param>
            <param name="numFeatureLevels">The number of elements in <paramref name="featureLevels"/>.</param>
            <param name="sdkVersion">The SDK version.</param>
            <param name="device">The created device.</param>
            <param name="featureLevel">If successful, returns the first feature level from the <paramref name="featureLevels"/> array which succeeded.</param>
            <param name="immediateContext">The device context.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.NativeMethods.D3D11CreateDeviceAndSwapChain(System.Object,JeremyAnsel.DirectX.D3D11.D3D11DriverType,System.IntPtr,JeremyAnsel.DirectX.D3D11.D3D11CreateDeviceOptions,JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel[],System.UInt32,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc@,System.Object@,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11Device@,JeremyAnsel.DirectX.D3D11.D3D11FeatureLevel@,JeremyAnsel.DirectX.D3D11.ComInterfaces.ID3D11DeviceContext@)">
            <summary>
            Creates a device that represents the display adapter and a swap chain used for rendering.
            </summary>
            <param name="adapter">The video adapter to use when creating a device.</param>
            <param name="driverType">The driver type to create.</param>
            <param name="software">A handle to a DLL that implements a software rasterizer.</param>
            <param name="options">The runtime layers to enable.</param>
            <param name="featureLevels">Determine the order of feature levels to attempt to create.</param>
            <param name="numFeatureLevels">The number of elements in <paramref name="featureLevels"/>.</param>
            <param name="sdkVersion">The SDK version.</param>
            <param name="swapChainDesc">A swap chain description that contains initialization parameters for the swap chain.</param>
            <param name="swapChain">The swap chain used for rendering.</param>
            <param name="device">The created device.</param>
            <param name="featureLevel">If successful, returns the first feature level from the <paramref name="featureLevels"/> array which succeeded.</param>
            <param name="immediateContext">The device context.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc">
            <summary>
            Describes the blend state that you use in a call to <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11Device.CreateBlendState(JeremyAnsel.DirectX.D3D11.D3D11BlendDesc)"/> to create a blend-state object.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.isAlphaToCoverageEnabled">
            <summary>
            Specifies whether to use alpha-to-coverage as a multisampling technique when setting a pixel to a render target.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.isIndependentBlendEnabled">
            <summary>
            Specifies whether to enable independent blending in simultaneous render targets.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.renderTargets">
            <summary>
            An array of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> structures that describe the blend states for render targets.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.Default">
            <summary>
            Gets default blend-state values.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.IsAlphaToCoverageEnabled">
            <summary>
            Gets or sets a value indicating whether to use alpha-to-coverage as a multisampling technique when setting a pixel to a render target.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.IsIndependentBlendEnabled">
            <summary>
            Gets or sets a value indicating whether to enable independent blending in simultaneous render targets.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11BlendDesc,JeremyAnsel.DirectX.D3D11.D3D11BlendDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11BlendDesc,JeremyAnsel.DirectX.D3D11.D3D11BlendDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.GetRenderTargets">
            <summary>
            Gets an array of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> structures that describe the blend states for render targets.
            </summary>
            <returns>An array of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> structures.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.SetRenderTargets(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc[])">
            <summary>
            Sets an array of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> structures that describe the blend states for render targets.
            </summary>
            <param name="blendDescs">The blend states descriptions.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11BlendDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BlendDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Box">
            <summary>
            Defines a 3D box.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Box.left">
            <summary>
            The x position of the left hand side of the box.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Box.top">
            <summary>
            The y position of the top of the box.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Box.front">
            <summary>
            The z position of the front of the box.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Box.right">
            <summary>
            The x position of the right hand side of the box.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Box.bottom">
            <summary>
            The y position of the bottom of the box.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Box.back">
            <summary>
            The z position of the back of the box.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Box.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Box"/> struct.
            </summary>
            <param name="left">The x position of the left hand side of the box.</param>
            <param name="top">The y position of the top of the box.</param>
            <param name="front">The z position of the front of the box.</param>
            <param name="right">The x position of the right hand side of the box.</param>
            <param name="bottom">The y position of the bottom of the box.</param>
            <param name="back">The z position of the back of the box.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Box.Left">
            <summary>
            Gets or sets the x position of the left hand side of the box.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Box.Top">
            <summary>
            Gets or sets the y position of the top of the box.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Box.Front">
            <summary>
            Gets or sets the z position of the front of the box.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Box.Right">
            <summary>
            Gets or sets the x position of the right hand side of the box.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Box.Bottom">
            <summary>
            Gets or sets the y position of the bottom of the box.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Box.Back">
            <summary>
            Gets or sets the z position of the back of the box.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Box.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Box,JeremyAnsel.DirectX.D3D11.D3D11Box)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Box"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Box"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Box"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Box.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Box,JeremyAnsel.DirectX.D3D11.D3D11Box)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Box"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Box"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Box"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Box.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Box.Equals(JeremyAnsel.DirectX.D3D11.D3D11Box)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Box.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc">
            <summary>
            Describes a buffer resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.byteWidth">
            <summary>
            Size of the buffer in bytes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.usage">
            <summary>
            Identify how the buffer is expected to be read from and written to.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.bindOptions">
            <summary>
            Identify how the buffer will be bound to the pipeline.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.cpuAccessOptions">
            <summary>
            CPU access flags or 0 if no CPU access is necessary.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.miscOptions">
            <summary>
            Miscellaneous flags or 0 if unused.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.structureByteStride">
            <summary>
            The size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.#ctor(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> struct.
            </summary>
            <param name="byteWidth">Size of the buffer in bytes.</param>
            <param name="bindOptions">Identify how the buffer will be bound to the pipeline.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.#ctor(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> struct.
            </summary>
            <param name="byteWidth">Size of the buffer in bytes.</param>
            <param name="bindOptions">Identify how the buffer will be bound to the pipeline.</param>
            <param name="usage">Identify how the buffer is expected to be read from and written to.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.#ctor(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> struct.
            </summary>
            <param name="byteWidth">Size of the buffer in bytes.</param>
            <param name="bindOptions">Identify how the buffer will be bound to the pipeline.</param>
            <param name="usage">Identify how the buffer is expected to be read from and written to.</param>
            <param name="cpuAccessOptions">CPU access flags or 0 if no CPU access is necessary.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.#ctor(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions,JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> struct.
            </summary>
            <param name="byteWidth">Size of the buffer in bytes.</param>
            <param name="bindOptions">Identify how the buffer will be bound to the pipeline.</param>
            <param name="usage">Identify how the buffer is expected to be read from and written to.</param>
            <param name="cpuAccessOptions">CPU access flags or 0 if no CPU access is necessary.</param>
            <param name="miscOptions">Miscellaneous flags or 0 if unused.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.#ctor(System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions,JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> struct.
            </summary>
            <param name="byteWidth">Size of the buffer in bytes.</param>
            <param name="bindOptions">Identify how the buffer will be bound to the pipeline.</param>
            <param name="usage">Identify how the buffer is expected to be read from and written to.</param>
            <param name="cpuAccessOptions">CPU access flags or 0 if no CPU access is necessary.</param>
            <param name="miscOptions">Miscellaneous flags or 0 if unused.</param>
            <param name="structureByteStride">The size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.ByteWidth">
            <summary>
            Gets or sets the size of the buffer in bytes.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.Usage">
            <summary>
            Gets or sets a value indicating how the buffer is expected to be read from and written to.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.BindOptions">
            <summary>
            Gets or sets a value indicating how the buffer will be bound to the pipeline.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.CpuAccessOptions">
            <summary>
            Gets or sets the CPU access flags or 0 if no CPU access is necessary.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.MiscOptions">
            <summary>
            Gets or sets the miscellaneous flags or 0 if unused.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.StructureByteStride">
            <summary>
            Gets or sets the size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11BufferDesc,JeremyAnsel.DirectX.D3D11.D3D11BufferDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11BufferDesc,JeremyAnsel.DirectX.D3D11.D3D11BufferDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.From``1(``0[],JeremyAnsel.DirectX.D3D11.D3D11BindOptions)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> struct from a struct.
            </summary>
            <typeparam name="T">A struct.</typeparam>
            <param name="data">The data.</param>
            <param name="bindOptions">Identify how the buffer will be bound to the pipeline.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> struct.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.From``1(``0[],JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage)">
            <summary>
            Creates a <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> struct from a struct.
            </summary>
            <typeparam name="T">A struct.</typeparam>
            <param name="data">The data.</param>
            <param name="bindOptions">Identify how the buffer will be bound to the pipeline.</param>
            <param name="usage">Identify how the buffer is expected to be read from and written to.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc"/> struct.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11BufferDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv">
            <summary>
            Describes the elements in a raw buffer resource to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.firstElement">
            <summary>
            The index of the first element to be accessed by the view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.numElements">
            <summary>
            The number of elements in the resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.options">
            <summary>
            The view options for the buffer.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.FirstElement">
            <summary>
            Gets or sets the index of the first element to be accessed by the view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.NumElements">
            <summary>
            Gets or sets the number of elements in the resource.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.Options">
            <summary>
            Gets or sets the view options for the buffer.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv,JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv,JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferExSrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv">
            <summary>
            Specifies the elements in a buffer resource to use in a render-target view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.firstElement">
            <summary>
            The number of bytes between the beginning of the buffer and the first element to access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.elementOffset">
            <summary>
            The offset of the first element in the view to access, relative to element 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.numElements">
            <summary>
            The total number of elements in the view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.elementWidth">
            <summary>
            The width of each element (in bytes). This can be determined from the format stored in the render-target-view description.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.FirstElement">
            <summary>
            Gets or sets the number of bytes between the beginning of the buffer and the first element to access.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.ElementOffset">
            <summary>
            Gets or sets the offset of the first element in the view to access, relative to element 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.NumElements">
            <summary>
            Gets or sets the total number of elements in the view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.ElementWidth">
            <summary>
            Gets or sets the width of each element (in bytes). This can be determined from the format stored in the render-target-view description.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11BufferRtv,JeremyAnsel.DirectX.D3D11.D3D11BufferRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11BufferRtv,JeremyAnsel.DirectX.D3D11.D3D11BufferRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.Equals(JeremyAnsel.DirectX.D3D11.D3D11BufferRtv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferRtv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv">
            <summary>
            Specifies the elements in a buffer resource to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.firstElement">
            <summary>
            The number of bytes between the beginning of the buffer and the first element to access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.elementOffset">
            <summary>
            The offset of the first element in the view to access, relative to element 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.numElements">
            <summary>
            The total number of elements in the view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.elementWidth">
            <summary>
            The width of each element (in bytes). This can be determined from the format stored in the shader resource-view description.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.FirstElement">
            <summary>
            Gets or sets the number of bytes between the beginning of the buffer and the first element to access.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.ElementOffset">
            <summary>
            Gets or sets the offset of the first element in the view to access, relative to element 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.NumElements">
            <summary>
            Gets or sets the total number of elements in the view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.ElementWidth">
            <summary>
            Gets or sets the width of each element (in bytes). This can be determined from the format stored in the shader resource-view description.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11BufferSrv,JeremyAnsel.DirectX.D3D11.D3D11BufferSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11BufferSrv,JeremyAnsel.DirectX.D3D11.D3D11BufferSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11BufferSrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferSrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11BufferUav">
            <summary>
            Describes the elements in a buffer to use in a unordered-access view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.firstElement">
            <summary>
            The zero-based index of the first element to be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.numElements">
            <summary>
            The number of elements in the resource. For structured buffers, this is the number of structures in the buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.options">
            <summary>
            The view options for the resource.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.FirstElement">
            <summary>
            Gets or sets the zero-based index of the first element to be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.NumElements">
            <summary>
            Gets or sets the number of elements in the resource. For structured buffers, this is the number of structures in the buffer.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.Options">
            <summary>
            Gets or sets the view options for the resource.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11BufferUav,JeremyAnsel.DirectX.D3D11.D3D11BufferUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferUav"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11BufferUav,JeremyAnsel.DirectX.D3D11.D3D11BufferUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferUav"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11BufferUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.Equals(JeremyAnsel.DirectX.D3D11.D3D11BufferUav)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11BufferUav.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc">
            <summary>
            Describes an HLSL class instance.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.instanceId">
            <summary>
            The instance ID of an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.instanceIndex">
            <summary>
            The instance index of an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.typeId">
            <summary>
            The type ID of an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.constantBuffer">
            <summary>
            Describes the constant buffer associated with an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.baseConstantBufferOffset">
            <summary>
            The base constant buffer offset associated with an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.baseTexture">
            <summary>
            The base texture associated with an HLSL class; the default value is 127.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.baseSampler">
            <summary>
            The base sampler associated with an HLSL class; the default value is 15.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.isCreated">
            <summary>
            Indicates whether the class was created; the default value is false.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.InstanceId">
            <summary>
            Gets the instance ID of an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.InstanceIndex">
            <summary>
            Gets the instance index of an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.TypeId">
            <summary>
            Gets the type ID of an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.ConstanceBuffer">
            <summary>
            Gets a value indicating the constant buffer associated with an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.BaseConstantBufferOffset">
            <summary>
            Gets the base constant buffer offset associated with an HLSL class; the default value is 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.BaseTexture">
            <summary>
            Gets the base texture associated with an HLSL class; the default value is 127.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.BaseSampler">
            <summary>
            Gets the base sampler associated with an HLSL class; the default value is 15.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.IsCreated">
            <summary>
            Gets a value indicating whether the class was created; the default value is false.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc,JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc,JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ClassInstanceDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc">
            <summary>
            Describes a counter.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.counter">
            <summary>
            The type of the counter.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.miscOptions">
            <summary>
            Reserved value.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11CounterType)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc"/> struct.
            </summary>
            <param name="counter">The type of the counter.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.Counter">
            <summary>
            Gets or sets the type of the counter.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11CounterDesc,JeremyAnsel.DirectX.D3D11.D3D11CounterDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11CounterDesc,JeremyAnsel.DirectX.D3D11.D3D11CounterDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11CounterDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo">
            <summary>
            Information about the video card's performance counter capabilities.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.lastDeviceDependentCounter">
            <summary>
            The largest device-dependent counter ID that the device supports. If none are supported, this value will be 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.numSimultaneousCounters">
            <summary>
            The number of counters that can be simultaneously supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.numDetectableParallelUnits">
            <summary>
            The number of detectable parallel units that the counter is able to discern. Values are 1 ~ 4.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.LastDeviceDependantCounter">
            <summary>
            Gets the largest device-dependent counter ID that the device supports. If none are supported, this value will be 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.NumSimultaneousCounters">
            <summary>
            Gets the number of counters that can be simultaneously supported.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.NumDetectableParallelUnits">
            <summary>
            Gets the number of detectable parallel units that the counter is able to discern. Values are 1 ~ 4.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11CounterInfo,JeremyAnsel.DirectX.D3D11.D3D11CounterInfo)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11CounterInfo,JeremyAnsel.DirectX.D3D11.D3D11CounterInfo)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.Equals(JeremyAnsel.DirectX.D3D11.D3D11CounterInfo)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11CounterInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc">
            <summary>
            Describes depth-stencil state.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.isDepthEnabled">
            <summary>
            Enable depth testing.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.depthWriteMask">
            <summary>
            Identify a portion of the depth-stencil buffer that can be modified by depth data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.depthFunction">
            <summary>
            A function that compares depth data against existing depth data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.isStencilEnabled">
            <summary>
            Enable stencil testing.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.stencilReadMask">
            <summary>
            Identify a portion of the depth-stencil buffer for reading stencil data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.stencilWriteMask">
            <summary>
            Identify a portion of the depth-stencil buffer for writing stencil data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.frontFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.backFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.#ctor(System.Boolean,JeremyAnsel.DirectX.D3D11.D3D11DepthWriteMask,JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction,System.Boolean,System.Byte,System.Byte,JeremyAnsel.DirectX.D3D11.D3D11StencilOperation,JeremyAnsel.DirectX.D3D11.D3D11StencilOperation,JeremyAnsel.DirectX.D3D11.D3D11StencilOperation,JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction,JeremyAnsel.DirectX.D3D11.D3D11StencilOperation,JeremyAnsel.DirectX.D3D11.D3D11StencilOperation,JeremyAnsel.DirectX.D3D11.D3D11StencilOperation,JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc"/> struct.
            </summary>
            <param name="isDepthEnabled">Enable depth testing.</param>
            <param name="depthWriteMask">Identify a portion of the depth-stencil buffer that can be modified by depth data.</param>
            <param name="depthFunction">A function that compares depth data against existing depth data.</param>
            <param name="isStencilEnabled">Enable stencil testing.</param>
            <param name="stencilReadMask">Identify a portion of the depth-stencil buffer for reading stencil data.</param>
            <param name="stencilWriteMask">Identify a portion of the depth-stencil buffer for writing stencil data.</param>
            <param name="frontStencilFailOperation">The stencil operation to perform when stencil testing fails for pixels whose surface normal is facing towards the camera.</param>
            <param name="frontStencilDepthFailOperation">The stencil operation to perform when stencil testing passes and depth testing fails for pixels whose surface normal is facing towards the camera.</param>
            <param name="frontStencilPassOperation">The stencil operation to perform when stencil testing and depth testing both pass for pixels whose surface normal is facing towards the camera.</param>
            <param name="frontStencilFunction">A function that compares stencil data against existing stencil data for pixels whose surface normal is facing towards the camera.</param>
            <param name="backStencilFailOperation">The stencil operation to perform when stencil testing fails for pixels whose surface normal is facing away from the camera.</param>
            <param name="backStencilDepthFailOperation">The stencil operation to perform when stencil testing passes and depth testing fails for pixels whose surface normal is facing away from the camera.</param>
            <param name="backStencilPassOperation">The stencil operation to perform when stencil testing and depth testing both pass for pixels whose surface normal is facing away from the camera.</param>
            <param name="backStencilFunction">A function that compares stencil data against existing stencil data for pixels whose surface normal is facing away from the camera.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.Default">
            <summary>
            Gets default depth-stencil-state values
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.IsDepthEnabled">
            <summary>
            Gets or sets a value indicating whether depth testing is enabled.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.DepthWriteMask">
            <summary>
            Gets or sets a portion of the depth-stencil buffer that can be modified by depth data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.DepthFunction">
            <summary>
            Gets or sets a function that compares depth data against existing depth data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.IsStencilEnabled">
            <summary>
            Gets or sets a value indicating whether stencil testing is enabled.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.StencilReadMask">
            <summary>
            Gets or sets a portion of the depth-stencil buffer for reading stencil data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.StencilWriteMask">
            <summary>
            Gets or sets a portion of the depth-stencil buffer for writing stencil data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.FrontFace">
            <summary>
            Gets or sets a value indicating how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.BackFace">
            <summary>
            Gets or sets a value indicating how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc">
            <summary>
            Stencil operations that can be performed based on the results of stencil test.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.stencilFailOperation">
            <summary>
            The stencil operation to perform when stencil testing fails.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.stencilDepthFailOperation">
            <summary>
            The stencil operation to perform when stencil testing passes and depth testing fails.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.stencilPassOperation">
            <summary>
            The stencil operation to perform when stencil testing and depth testing both pass.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.stencilFunction">
            <summary>
            A function that compares stencil data against existing stencil data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.StencilFailOperation">
            <summary>
            Gets or sets the stencil operation to perform when stencil testing fails.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.StencilDepthFailOperation">
            <summary>
            Gets or sets the stencil operation to perform when stencil testing passes and depth testing fails.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.StencilPassOperation">
            <summary>
            Gets or sets the stencil operation to perform when stencil testing and depth testing both pass.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.StencilFunction">
            <summary>
            Gets or sets a function that compares stencil data against existing stencil data.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilOperationDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc">
            <summary>
            Specifies the subresources of a texture that are accessible from a depth-stencil view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.format">
            <summary>
            The resource data format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.viewDimension">
            <summary>
            The type of resource. Specifies how a depth-stencil resource will be accessed; the value is stored in the union in this structure.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.options">
            <summary>
            A value that describes whether the texture is read only.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.texture1D">
            <summary>
            Specifies a 1D texture subresource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.texture1DArray">
            <summary>
            Specifies an array of 1D texture subresources.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.texture2D">
            <summary>
            Specifies a 2D texture subresource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.texture2DArray">
            <summary>
            Specifies an array of 2D texture subresources.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.texture2DMs">
            <summary>
            Specifies a multisampled 2D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.texture2DMsArray">
            <summary>
            Specifies an array of multisampled 2D textures.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11DsvDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The depth-stencil type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
            <param name="options">A value that describes whether the texture is read only.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
            <param name="options">A value that describes whether the texture is read only.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11DsvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The depth-stencil type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
            <param name="options">A value that describes whether the texture is read only.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Format">
            <summary>
            Gets or sets the resource data format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.ViewDimension">
            <summary>
            Gets or sets the type of resource. Specifies how a depth-stencil resource will be accessed; the value is stored in the union in this structure.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Options">
            <summary>
            Gets or sets a value that describes whether the texture is read only.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Texture1D">
            <summary>
            Gets or sets a 1D texture subresource.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Texture1DArray">
            <summary>
            Gets or sets an array of 1D texture subresources.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Texture2D">
            <summary>
            Gets or sets a 2D texture subresource.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Texture2DArray">
            <summary>
            Gets or sets an array of 2D texture subresources.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Texture2DMs">
            <summary>
            Gets or sets a multisampled 2D texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Texture2DMsArray">
            <summary>
            Gets or sets an array of multisampled 2D textures.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc,JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11DepthStencilViewDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo">
            <summary>
            Describes information about Direct3D 11.1 adapter architecture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo.isTileBasedDeferredRendererSupported">
            <summary>
            Specifies whether a rendering device batches rendering commands and performs multipass rendering into tiles or bins over a render area.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo.IsTileBasedDeferredRendererSupported">
            <summary>
            Gets a value indicating whether a rendering device batches rendering commands and performs multipass rendering into tiles or bins over a render area.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataArchitectureInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions">
            <summary>
            Describes compute shader and raw and structured buffer support in the current graphics driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions.isComputeShadersPlusRawAndStructuredBuffersViaShader4XSupported">
            <summary>
            Indicates whether compute shaders and raw and structured buffers are supported.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions.IsComputeShadersPlusRawAndStructuredBuffersViaShader4XSupported">
            <summary>
            Gets a value indicating whether compute shaders and raw and structured buffers are supported.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D10XHardwareOptions.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options">
            <summary>
            Describes Direct3D 11.1 feature options in the current graphics driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isOutputMergerLogicOperationsSupported">
            <summary>
            Specifies whether logic operations are available in blend state.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isUavOnlyRenderingForcedSampleCountSupported">
            <summary>
            Specifies whether the driver can render with no render target views (RTVs) or depth stencil views (DSVs), and only unordered access views (UAVs) bound.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isDiscardApisSeenByDriverSupported">
            <summary>
            Specifies whether the driver supports the <c>ID3D11DeviceContext1.DiscardView</c> and <c>ID3D11DeviceContext1.DiscardResource</c> methods.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isOptionsForUpdateAndCopySeenByDriverSupported">
            <summary>
            Specifies whether the driver supports new semantics for copy and update.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isClearViewSupported">
            <summary>
            Specifies whether the driver supports the <c>ID3D11DeviceContext1.ClearView</c> method.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isCopyWithOverlapSupported">
            <summary>
            Specifies whether you can call <c>ID3D11DeviceContext1.CopySubresourceRegion1</c> with overlapping source and destination rectangles.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isConstantBufferPartialUpdateSupported">
            <summary>
            Specifies whether the driver supports partial updates of constant buffers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isConstantBufferOffsettingSupported">
            <summary>
            Specifies whether the driver supports new semantics for setting offsets in constant buffers for a shader.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isMapNoOverwriteOnDynamicConstantBufferSupported">
            <summary>
            Specifies whether you can call <c>ID3D11DeviceContext.Map</c> with <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.WriteNoOverwrite"/> on a dynamic constant buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isMapNoOverwriteOnDynamicBufferSrvSupported">
            <summary>
            Specifies whether you can call <c>ID3D11DeviceContext.Map</c> with <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.WriteNoOverwrite"/> on a dynamic buffer SRV.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isMultisampleRtvWithForcedSampleCountOneSupported">
            <summary>
            Specifies whether the driver supports multisample rendering when you render with RTVs bound.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isSad4ShaderInstructionsSupported">
            <summary>
            Specifies whether the hardware and driver support the <c>msad4</c> intrinsic function in shaders.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isExtendedDoublesShaderInstructionsSupported">
            <summary>
            Specifies whether the hardware and driver support the <c>fma</c> intrinsic function and other extended doubles instructions ( <c>DDIV</c> and <c>DRCP</c>) in shaders.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.isExtendedResourceSharingSupported">
            <summary>
            Specifies whether the hardware and driver support sharing a greater variety of Texture2D resource types and formats.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsOutputMergerLogicOperationsSupported">
            <summary>
            Gets a value indicating whether logic operations are available in blend state.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsUavOnlyRenderingForcedSampleCountSupported">
            <summary>
            Gets a value indicating whether the driver can render with no render target views (RTVs) or depth stencil views (DSVs), and only unordered access views (UAVs) bound.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsDiscardApisSeenByDriverSupported">
            <summary>
            Gets a value indicating whether the driver supports the <c>ID3D11DeviceContext1.DiscardView</c> and <c>ID3D11DeviceContext1.DiscardResource</c> methods.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsOptionsForUpdateAndCopySeenByDriverSupported">
            <summary>
            Gets a value indicating whether the driver supports new semantics for copy and update.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsClearViewSupported">
            <summary>
            Gets a value indicating whether the driver supports the <c>ID3D11DeviceContext1.ClearView</c> method.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsCopyWithOverlapSupported">
            <summary>
            Gets a value indicating whether you can call <c>ID3D11DeviceContext1.CopySubresourceRegion1</c> with overlapping source and destination rectangles.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsConstantBufferPartialUpdateSupported">
            <summary>
            Gets a value indicating whether the driver supports partial updates of constant buffers.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsConstantBufferOffsettingSupported">
            <summary>
            Gets a value indicating whether the driver supports new semantics for setting offsets in constant buffers for a shader.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsMapNoOverwriteOnDynamicConstantBufferSupported">
            <summary>
            Gets a value indicating whether you can call <c>ID3D11DeviceContext.Map</c> with <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.WriteNoOverwrite"/> on a dynamic constant buffer.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsMapNoOverwriteOnDynamicBufferSrvSupported">
            <summary>
            Gets a value indicating whether you can call <c>ID3D11DeviceContext.Map</c> with <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11MapCpuPermission.WriteNoOverwrite"/> on a dynamic buffer SRV.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsMultisampleRtvWithForcedSampleCountOneSupported">
            <summary>
            Gets a value indicating whether the driver supports multisample rendering when you render with RTVs bound.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsSad4ShaderInstructionsSupported">
            <summary>
            Gets a value indicating whether the hardware and driver support the <c>msad4</c> intrinsic function in shaders.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsExtendedDoublesShaderInstructionsSupported">
            <summary>
            Gets a value indicating whether the hardware and driver support the <c>fma</c> intrinsic function and other extended doubles instructions ( <c>DDIV</c> and <c>DRCP</c>) in shaders.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.IsExtendedResourceSharingSupported">
            <summary>
            Gets a value indicating whether the hardware and driver support sharing a greater variety of Texture2D resource types and formats.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1">
            <summary>
            Describes Direct3D 11.2 feature options in the current graphics driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.tiledResourcesTier">
            <summary>
            Specifies whether the hardware and driver support tiled resources.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.isMinMaxFilteringSupported">
            <summary>
            Specifies whether the hardware and driver support the filtering options of comparing the result to the minimum or maximum value during texture sampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.isClearViewDepthInlyFormatsSupported">
            <summary>
            Specifies whether the hardware and driver also support the <c>ID3D11DeviceContext1.ClearView</c> method on depth formats.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.isMapOnDefaultBuffersSupported">
            <summary>
            Specifies support for creating <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Buffer"/> resources that can be passed to the <c>ID3D11DeviceContext.Map</c> and <c>ID3D11DeviceContext.Unmap</c> methods.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.TiledResourcesTier">
            <summary>
            Gets a value indicating whether the hardware and driver support tiled resources.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.IsMinMaxFilteringSupported">
            <summary>
            Gets a value indicating whether the hardware and driver support the filtering options of comparing the result to the minimum or maximum value during texture sampling.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.IsClearViewDepthInlyFormatsSupported">
            <summary>
            Gets a value indicating whether the hardware and driver also support the <c>ID3D11DeviceContext1.ClearView</c> method on depth formats.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.IsMapOnDefaultBuffersSupported">
            <summary>
            Gets a value indicating whether creating <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Buffer"/> resources that can be passed to the <c>ID3D11DeviceContext.Map</c> and <c>ID3D11DeviceContext.Unmap</c> methods is supported.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D11Options1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options">
            <summary>
            Describes Direct3D 9 feature options in the current graphics driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options.isFullNonPow2TextureSupported">
            <summary>
            Specifies whether the driver supports the nonpowers-of-2-unconditionally feature.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options.IsFullNonPow2TextureSupported">
            <summary>
            Gets a value indicating whether the driver supports the nonpowers-of-2-unconditionally feature.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1">
            <summary>
            Describes Direct3D 9 feature options in the current graphics driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.isFullNonPow2TextureSupported">
            <summary>
            Specifies whether the driver supports the nonpowers-of-2-unconditionally feature.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.isDepthAsTextureWithLessEqualComparisonFilterSupported">
            <summary>
            Specifies whether the driver supports the shadowing feature with the comparison-filtering mode set to less than or equal to.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.isSimpleInstancingSupported">
            <summary>
            Specifies whether the hardware and driver support simple instancing.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.isTextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported">
            <summary>
            Specifies whether the hardware and driver support setting a single face of a <c>TextureCube</c> as a render target while the depth stencil surface that is bound alongside can be a <c>Texture2D</c> (as opposed to <c>TextureCube</c>).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.IsFullNonPow2TextureSupported">
            <summary>
            Gets a value indicating whether the driver supports the nonpowers-of-2-unconditionally feature.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.IsDepthAsTextureWithLessEqualComparisonFilterSupported">
            <summary>
            Gets a value indicating whether the driver supports the shadowing feature with the comparison-filtering mode set to less than or equal to.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.IsSimpleInstancingSupported">
            <summary>
            Gets a value indicating whether the hardware and driver support simple instancing.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.IsTextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported">
            <summary>
            Gets a value indicating whether the hardware and driver support setting a single face of a <c>TextureCube</c> as a render target while the depth stencil surface that is bound alongside can be a <c>Texture2D</c> (as opposed to <c>TextureCube</c>).
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9Options1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport">
            <summary>
            Describes Direct3D 9 shadow support in the current graphics driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport.isDepthAsTextureWithLessEqualComparisonFilterSupported">
            <summary>
            Specifies whether the driver supports the shadowing feature with the comparison-filtering mode set to less than or equal to.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport.IsDepthAsTextureWithLessEqualComparisonFilterSupported">
            <summary>
            Gets a value indicating whether the driver supports the shadowing feature with the comparison-filtering mode set to less than or equal to.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9ShadowSupport.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport">
            <summary>
            Describes whether simple instancing is supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport.isSimpleInstancingSupported">
            <summary>
            Specifies whether the hardware and driver support simple instancing.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport.IsSimpleInstancingSupported">
            <summary>
            Gets a value indicating whether the hardware and driver support simple instancing.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataD3D9SimpleInstancingSupport.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles">
            <summary>
            Describes double data type support in the current graphics driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles.isDoublePrecisionFloatShaderOperationsSupported">
            <summary>
            Specifies whether double types are allowed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles.IsDoublePrecisionFloatShaderOperationsSupported">
            <summary>
            Gets a value indicating whether double types are allowed.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataDoubles.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport">
            <summary>
            Describes which resources are supported by the current graphics driver for a given format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.inFormat">
            <summary>
            The <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> to return information on.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.outFormatSupport">
            <summary>
            Combination of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport"/> flags indicating which resources are supported.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.InFormat">
            <summary>
            Gets the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> to return information on.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.OutFormatSupport">
            <summary>
            Gets a combination of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport"/> flags indicating which resources are supported.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2">
            <summary>
            Describes which unordered resource options are supported by the current graphics driver for a given format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.inFormat">
            <summary>
            The <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> to return information on.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.outFormatSupport2">
            <summary>
            Combination of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2"/> flags indicating which unordered resource options are supported.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.InFormat">
            <summary>
            Gets the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> to return information on.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.OutFormatSupport2">
            <summary>
            Gets a combination of <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FormatSupport2"/> flags indicating which unordered resource options are supported.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataFormatSupport2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport">
            <summary>
            Describes whether a GPU profiling technique is supported.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport.isProfileSupported">
            <summary>
            Specifies whether the hardware and driver support a GPU profiling technique that can be used with development tools.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport.IsProfileSupported">
            <summary>
            Gets a value indicating whether the hardware and driver support a GPU profiling technique that can be used with development tools.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataMarkerSupport.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport">
            <summary>
            Describes precision support options for shaders in the current graphics driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.pixelShaderMinPrecision">
            <summary>
            The minimum precision levels that the driver supports for the pixel shader.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.allOtherShaderStagesMinPrecision">
            <summary>
            The minimum precision levels that the driver supports for all other shader stages.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.PixelShaderMinPrecision">
            <summary>
            Gets the minimum precision levels that the driver supports for the pixel shader.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.AllOtherShaderStagesMinPrecision">
            <summary>
            Gets the minimum precision levels that the driver supports for all other shader stages.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataShaderMinPrecisionSupport.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading">
            <summary>
            Describes the multi-threading features that are supported by the current graphics driver.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.isDriverConcurrentCreatesSupported">
            <summary>
            Indicates whether resources can be created concurrently on multiple threads while drawing.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.isDriverCommandListsSupported">
            <summary>
            Indicates whether command lists are supported by the current driver.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.IsDriverConcurrentCreatesSupported">
            <summary>
            Gets a value indicating whether resources can be created concurrently on multiple threads while drawing.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.IsDriverCommandListsSupported">
            <summary>
            Gets a value indicating whether command lists are supported by the current driver.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading,JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.Equals(JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11FeatureDataThreading.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc">
            <summary>
            A description of a single element for the input-assembler stage.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.semanticName">
            <summary>
            The HLSL semantic associated with this element in a shader input-signature.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.semanticIndex">
            <summary>
            The semantic index for the element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.format">
            <summary>
            The data type of the element data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.inputSlot">
            <summary>
            An integer value that identifies the input-assembler.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.alignedByteOffset">
            <summary>
            Offset (in bytes) between each element. Optional.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.inputSlotClass">
            <summary>
            Identifies the input data class for a single input slot.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.instanceDataStepRate">
            <summary>
            The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.#ctor(System.String,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11InputClassification,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc"/> struct.
            </summary>
            <param name="semanticName">The HLSL semantic associated with this element in a shader input-signature.</param>
            <param name="semanticIndex">The semantic index for the element.</param>
            <param name="format">The data type of the element data.</param>
            <param name="inputSlot">An integer value that identifies the input-assembler.</param>
            <param name="alignedByteOffset">Offset (in bytes) between each element. Optional.</param>
            <param name="inputSlotClass">Identifies the input data class for a single input slot.</param>
            <param name="instanceDataStepRate">The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.SemanticName">
            <summary>
            Gets or sets the HLSL semantic associated with this element in a shader input-signature.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.SemanticIndex">
            <summary>
            Gets or sets the semantic index for the element.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.Format">
            <summary>
            Gets or sets the data type of the element data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.InputSlot">
            <summary>
            Gets or sets an integer value that identifies the input-assembler.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.AlignedByteOffset">
            <summary>
            Gets or sets the offset (in bytes) between each element. Optional.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.InputSlotClass">
            <summary>
            Gets or sets the input data class for a single input slot.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.InstanceDataStepRate">
            <summary>
            Gets or sets the number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an element that contains per-vertex data.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc,JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc,JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11InputElementDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource">
            <summary>
            Provides access to subresource data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.data">
            <summary>
            Pointer to the data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.rowPitch">
            <summary>
            The row pitch, or width, or physical size (in bytes) of the data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.depthPitch">
            <summary>
            The depth pitch, or width, or physical size (in bytes)of the data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.Data">
            <summary>
            Gets or sets the pointer to the data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.RowPitch">
            <summary>
            Gets or sets the row pitch, or width, or physical size (in bytes) of the data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.DepthPitch">
            <summary>
            Gets or sets the depth pitch, or width, or physical size (in bytes)of the data.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource,JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource,JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.Equals(JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11MappedSubResource.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics">
            <summary>
            Query information about graphics-pipeline activity in between calls to <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/> and <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.inputAssemblerVertices">
            <summary>
            The number of vertices read by input assembler.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.inputAssemblerPrimitives">
            <summary>
            The number of primitives read by the input assembler.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.vertexShaderInvocations">
            <summary>
            The number of times a vertex shader was invoked.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.geometryShaderInvocations">
            <summary>
            The number of times a geometry shader was invoked.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.geometryShaderPrimitives">
            <summary>
            The number of primitives output by a geometry shader.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.rasterizerInvocations">
            <summary>
            The number of primitives that were sent to the rasterizer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.rasterizerPrimitives">
            <summary>
            The number of primitives that were rendered.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.pixelShaderInvocations">
            <summary>
            The number of times a pixel shader was invoked.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.hullShaderInvocations">
            <summary>
            The number of times a hull shader was invoked.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.domainShaderInvocations">
            <summary>
            The number of times a domain shader was invoked.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.computeShaderInvocations">
            <summary>
            The number of times a compute shader was invoked.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.InputAssemblerVertices">
            <summary>
            Gets the number of vertices read by input assembler.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.InputAssemblerPrimitives">
            <summary>
            Gets the number of primitives read by the input assembler.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.VertexShaderInvocations">
            <summary>
            Gets the number of times a vertex shader was invoked.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.GeometryShaderInvocations">
            <summary>
            Gets the number of times a geometry shader was invoked.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.GeometryShaderPrimitives">
            <summary>
            Gets the number of primitives output by a geometry shader.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.RasterizerInvocations">
            <summary>
            Gets the number of primitives that were sent to the rasterizer.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.RasterizerPrimitives">
            <summary>
            Gets the number of primitives that were rendered.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.PixelShaderInvocations">
            <summary>
            Gets the number of times a pixel shader was invoked.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.HullShaderInvocations">
            <summary>
            Gets the number of times a hull shader was invoked.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.DomainShaderInvocations">
            <summary>
            Gets the number of times a domain shader was invoked.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.ComputeShaderInvocations">
            <summary>
            Gets the number of times a compute shader was invoked.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics,JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics,JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.Equals(JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataPipelineStatistics.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics">
            <summary>
            Query information about the amount of data streamed out to the stream-output buffers in between <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.Begin(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/> and <see cref="M:JeremyAnsel.DirectX.D3D11.D3D11DeviceContext.End(JeremyAnsel.DirectX.D3D11.D3D11Asynchronous)"/>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.numPrimitivesWritten">
            <summary>
            The number of primitives (that is, points, lines, and triangles) written to the stream-output buffers.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.primitivesStorageNeeded">
            <summary>
            The number of primitives that would have been written to the stream-output buffers if there had been enough space for them all.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.NumPrimitivesWritten">
            <summary>
            Gets the number of primitives (that is, points, lines, and triangles) written to the stream-output buffers.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.PrimitivesStorageNeeded">
            <summary>
            Gets the number of primitives that would have been written to the stream-output buffers if there had been enough space for them all.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics,JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics,JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.Equals(JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataStreamOutputStatistics.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint">
            <summary>
            Query information about the reliability of a timestamp query.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.frequency">
            <summary>
            How frequently the GPU counter increments in Hz.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.isDisjoint">
            <summary>
            Indicates whether the timestamp counter is discontinuous or disjoint.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.Frequency">
            <summary>
            Gets a value indicating how frequently the GPU counter increments in Hz.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.IsDisjoint">
            <summary>
            Gets a value indicating whether the timestamp counter is discontinuous or disjoint.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint,JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint,JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.Equals(JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDataTimestampDisjoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc">
            <summary>
            Describes a query.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.query">
            <summary>
            The type of query.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.miscOptions">
            <summary>
            Miscellaneous options.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11QueryType)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc"/> struct.
            </summary>
            <param name="query">The type of query.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11QueryType,JeremyAnsel.DirectX.D3D11.D3D11QueryMiscOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc"/> struct.
            </summary>
            <param name="query">The type of query.</param>
            <param name="miscOptions">Miscellaneous options.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.Query">
            <summary>
            Gets or sets the type of query.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.MiscOptions">
            <summary>
            Gets or sets miscellaneous options.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11QueryDesc,JeremyAnsel.DirectX.D3D11.D3D11QueryDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11QueryDesc,JeremyAnsel.DirectX.D3D11.D3D11QueryDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11QueryDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11QueryDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc">
            <summary>
            Describes rasterizer state.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.fillMode">
            <summary>
            Determines the fill mode to use when rendering.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.cullMode">
            <summary>
            Indicates whether triangles facing the specified direction are not drawn.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.isFrontCounterClockwise">
            <summary>
            Determines if a triangle is front- or back-facing.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.depthBias">
            <summary>
            The depth value added to a given pixel.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.depthBiasClamp">
            <summary>
            The maximum depth bias of a pixel.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.slopeScaledDepthBias">
            <summary>
            The scalar on a given pixel's slope.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.isDepthClipEnabled">
            <summary>
            Specifies whether clipping based on distance is enabled.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.isScissorEnabled">
            <summary>
            Specifies whether scissor-rectangle culling is enabled.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.isMultisampleEnabled">
            <summary>
            Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.isAntialiasedLineEnabled">
            <summary>
            Specifies whether to enable line antialiasing; only applies if doing line drawing and <c>MultisampleEnable</c> is <c>false</c>.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11FillMode,JeremyAnsel.DirectX.D3D11.D3D11CullMode,System.Boolean,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc"/> struct.
            </summary>
            <param name="fillMode">Determines the fill mode to use when rendering.</param>
            <param name="cullMode">Indicates whether triangles facing the specified direction are not drawn.</param>
            <param name="isFrontCounterClockwise">Determines if a triangle is front- or back-facing.</param>
            <param name="depthBias">The depth value added to a given pixel.</param>
            <param name="depthBiasClamp">The maximum depth bias of a pixel.</param>
            <param name="slopeScaledDepthBias">The scalar on a given pixel's slope.</param>
            <param name="isDepthClipEnabled">Specifies whether clipping based on distance is enabled.</param>
            <param name="isScissorEnabled">Specifies whether scissor-rectangle culling is enabled.</param>
            <param name="isMultisampleEnabled">Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets.</param>
            <param name="isAntialiasedLineEnabled">Specifies whether to enable line antialiasing; only applies if doing line drawing and <c>MultisampleEnable</c> is <c>false</c>.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.Default">
            <summary>
            Gets default rasterizer-state values.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.FillMode">
            <summary>
            Gets or sets the fill mode to use when rendering.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.CullMode">
            <summary>
            Gets or sets a value indicating whether triangles facing the specified direction are not drawn.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.IsFrontCounterClockwise">
            <summary>
            Gets or sets a value indicating whether a triangle is front- or back-facing.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.DepthBias">
            <summary>
            Gets or sets the depth value added to a given pixel.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.DepthBiasClamp">
            <summary>
            Gets or sets the maximum depth bias of a pixel.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.SlopeScaledDepthBias">
            <summary>
            Gets or sets the scalar on a given pixel's slope.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.IsDepthClipEnabled">
            <summary>
            Gets or sets a value indicating whether clipping based on distance is enabled.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.IsScissorEnabled">
            <summary>
            Gets or sets a value indicating whether scissor-rectangle culling is enabled.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.IsMultisampleEnabled">
            <summary>
            Gets or sets a value indicating whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.IsAntialiasedLineEnabled">
            <summary>
            Gets or sets a value indicating whether to enable line antialiasing; only applies if doing line drawing and <c>MultisampleEnable</c> is <c>false</c>.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc,JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc,JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RasterizerDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Rect">
            <summary>
            Defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Rect.left">
            <summary>
            The x-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Rect.top">
            <summary>
            The y-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Rect.right">
            <summary>
            The x-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Rect.bottom">
            <summary>
            The y-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Rect"/> struct.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of a rectangle.</param>
            <param name="top">The y-coordinate of the upper-left corner of a rectangle.</param>
            <param name="right">The x-coordinate of the lower-right corner of a rectangle.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of a rectangle.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Rect.Left">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Rect.Top">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Rect.Right">
            <summary>
            Gets or sets the x-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Rect.Bottom">
            <summary>
            Gets or sets the y-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Rect.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Rect,JeremyAnsel.DirectX.D3D11.D3D11Rect)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Rect"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Rect"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Rect"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Rect.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Rect,JeremyAnsel.DirectX.D3D11.D3D11Rect)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Rect"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Rect"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Rect"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Rect.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Rect.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Rect.Equals(JeremyAnsel.DirectX.D3D11.D3D11Rect)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Rect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc">
            <summary>
            Describes the blend state for a render target.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.isBlendEnabled">
            <summary>
            Specifies whether blending is enabled.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.sourceBlend">
            <summary>
            The operation to perform on the RGB value that the pixel shader outputs.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.destinationBlend">
            <summary>
            The operation to perform on the current RGB value in the render target.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.blendOperation">
            <summary>
            Defines how to combine the <c>SrcBlend</c> and <c>DestBlend</c> operations.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.sourceBlendAlpha">
            <summary>
            The operation to perform on the alpha value that the pixel shader outputs. Blend options that end in <c>_COLOR</c> are not allowed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.destinationBlendAlpha">
            <summary>
            The operation to perform on the current alpha value in the render target. Blend options that end in <c>_COLOR</c> are not allowed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.blendOperationAlpha">
            <summary>
            Defines how to combine the <c>SrcBlendAlpha</c> and <c>DestBlendAlpha</c> operations.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.renderTargetWriteMask">
            <summary>
            A write mask.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.IsBlendEnabled">
            <summary>
            Gets or sets a value indicating whether blending is enabled.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.SourceBlend">
            <summary>
            Gets or sets the operation to perform on the RGB value that the pixel shader outputs.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.DestinationBlend">
            <summary>
            Gets or sets the operation to perform on the current RGB value in the render target.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.BlendOperation">
            <summary>
            Gets or sets a value indicating how to combine the <c>SrcBlend</c> and <c>DestBlend</c> operations.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.SourceBlendAlpha">
            <summary>
            Gets or sets the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in <c>_COLOR</c> are not allowed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.DestinationBlendAlpha">
            <summary>
            Gets or sets the operation to perform on the current alpha value in the render target. Blend options that end in <c>_COLOR</c> are not allowed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.BlendOperationAlpha">
            <summary>
            Gets or sets a value indicating how to combine the <c>SrcBlendAlpha</c> and <c>DestBlendAlpha</c> operations.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.RenderTargetWriteMask">
            <summary>
            Gets or sets a write mask.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetBlendDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc">
            <summary>
            Specifies the subresources from a resource that are accessible using a render-target view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.format">
            <summary>
            The data format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.viewDimension">
            <summary>
            The resource type.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.buffer">
            <summary>
            Specifies which buffer elements can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.texture1D">
            <summary>
            Specifies the subresources in a 1D texture that can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.texture1DArray">
            <summary>
            Specifies the subresources in a 1D texture array that can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.texture2D">
            <summary>
            Specifies the subresources in a 2D texture that can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.texture2DArray">
            <summary>
            Specifies the subresources in a 2D texture array that can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.texture2DMs">
            <summary>
            Specifies a single subresource because a multisampled 2D texture only contains one subresource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.texture2DMsArray">
            <summary>
            Specifies the subresources in a multisampled 2D texture array that can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.texture3D">
            <summary>
            Specifies the subresources in a 3D texture that can be accessed.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11RtvDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firtArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firtArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Buffer,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="buffer">A buffer.</param>
            <param name="format">The viewing format.</param>
            <param name="firstElement">The buffer and the first element to access.</param>
            <param name="numElements">The total number of elements in the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firtArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firtArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firtArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11RtvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firtArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firtWSlice">The first depth level to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firtWSlice">The first depth level to use.</param>
            <param name="wsize">The number of depth levels to use in the render-target view.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Format">
            <summary>
            Gets or sets the data format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.ViewDimension">
            <summary>
            Gets or sets the resource type.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Buffer">
            <summary>
            Gets or sets a value indicating which buffer elements can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Texture1D">
            <summary>
            Gets or sets the subresources in a 1D texture that can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Texture1DArray">
            <summary>
            Gets or sets the subresources in a 1D texture array that can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Texture2D">
            <summary>
            Gets or sets the subresources in a 2D texture that can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Texture2DArray">
            <summary>
            Gets or sets the subresources in a 2D texture array that can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Texture2DMs">
            <summary>
            Gets or sets a single subresource because a multisampled 2D texture only contains one subresource.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Texture2DMsArray">
            <summary>
            Gets or sets the subresources in a multisampled 2D texture array that can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Texture3D">
            <summary>
            Gets or sets the subresources in a 3D texture that can be accessed.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11RenderTargetViewDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc">
            <summary>
            Describes a sampler state.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.filter">
            <summary>
            The filtering method to use when sampling a texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.addressU">
            <summary>
            The method to use for resolving a u texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.addressV">
            <summary>
            The method to use for resolving a v texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.addressW">
            <summary>
            The method to use for resolving a w texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.mipLodBias">
            <summary>
            The offset from the calculated mipmap level.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.maxAnisotropy">
            <summary>
            The clamping value used if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.Anisotropic"/> or <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonAnisotropic"/> is specified in <c>Filter</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.comparisonFunction">
            <summary>
            A function that compares sampled data against existing sampled data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.borderColorR">
            <summary>
            The border color red component to use if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border"/> is specified for <c>AddressU</c>, <c>AddressV</c>, or <c>AddressW</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.borderColorG">
            <summary>
            The border color green component to use if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border"/> is specified for <c>AddressU</c>, <c>AddressV</c>, or <c>AddressW</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.borderColorB">
            <summary>
            The border color blue component to use if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border"/> is specified for <c>AddressU</c>, <c>AddressV</c>, or <c>AddressW</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.borderColorA">
            <summary>
            The border color alpha component to use if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border"/> is specified for <c>AddressU</c>, <c>AddressV</c>, or <c>AddressW</c>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.minLod">
            <summary>
            The lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.maxLod">
            <summary>
            The upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Filter,JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode,JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode,JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode,System.Single,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ComparisonFunction,System.Single[],System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc"/> struct.
            </summary>
            <param name="filter">The filtering method to use when sampling a texture.</param>
            <param name="addressU">The method to use for resolving a u texture coordinate that is outside the 0 to 1 range.</param>
            <param name="addressV">The method to use for resolving a v texture coordinate that is outside the 0 to 1 range.</param>
            <param name="addressW">The method to use for resolving a w texture coordinate that is outside the 0 to 1 range.</param>
            <param name="mipLodBias">The offset from the calculated mipmap level.</param>
            <param name="maxAnisotropy">The clamping value used if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.Anisotropic"/> or <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonAnisotropic"/> is specified in <c>Filter</c>.</param>
            <param name="comparisonFunction">A function that compares sampled data against existing sampled data.</param>
            <param name="borderColor">The border color to use if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border"/> is specified for <c>AddressU</c>, <c>AddressV</c>, or <c>AddressW</c>.</param>
            <param name="minLod">The lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.</param>
            <param name="maxLod">The upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.Default">
            <summary>
            Gets default sampler-state values.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.Filter">
            <summary>
            Gets or sets the filtering method to use when sampling a texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.AddressU">
            <summary>
            Gets or sets the method to use for resolving a u texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.AddressV">
            <summary>
            Gets or sets the method to use for resolving a v texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.AddressW">
            <summary>
            Gets or sets the method to use for resolving a w texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.MipLoadBias">
            <summary>
            Gets or sets the offset from the calculated mipmap level.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.MaxAnisotropy">
            <summary>
            Gets or sets the clamping value used if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.Anisotropic"/> or <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11Filter.ComparisonAnisotropic"/> is specified in <c>Filter</c>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.ComparisonFunction">
            <summary>
            Gets or sets a function that compares sampled data against existing sampled data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.BorderColorR">
            <summary>
            Gets or sets the border color red component to use if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border"/> is specified for <c>AddressU</c>, <c>AddressV</c>, or <c>AddressW</c>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.BorderColorG">
            <summary>
            Gets or sets the border color green component to use if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border"/> is specified for <c>AddressU</c>, <c>AddressV</c>, or <c>AddressW</c>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.BorderColorB">
            <summary>
            Gets or sets the border color blue component to use if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border"/> is specified for <c>AddressU</c>, <c>AddressV</c>, or <c>AddressW</c>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.BorderColorA">
            <summary>
            Gets or sets the border color alpha component to use if <see cref="F:JeremyAnsel.DirectX.D3D11.D3D11TextureAddressMode.Border"/> is specified for <c>AddressU</c>, <c>AddressV</c>, or <c>AddressW</c>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.MinLod">
            <summary>
            Gets or sets the lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.MaxLod">
            <summary>
            Gets or sets the upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc,JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc,JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SamplerDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc">
            <summary>
            Describes a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.format">
            <summary>
            The viewing format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.viewDimension">
            <summary>
            The resource type of the view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.buffer">
            <summary>
            View the resource as a buffer using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.texture1D">
            <summary>
            View the resource as a 1D texture using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.texture1DArray">
            <summary>
            View the resource as a 1D-texture array using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.texture2D">
            <summary>
            View the resource as a 2D-texture using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.texture2DArray">
            <summary>
            View the resource as a 2D-texture array using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.texture2DMs">
            <summary>
            View the resource as a 2D-multisampled texture using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.texture2DMsArray">
            <summary>
            View the resource as a 2D-multisampled-texture array using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.texture3D">
            <summary>
            View the resource as a 3D texture using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.textureCube">
            <summary>
            View the resource as a 3D-cube texture using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.textureCubeArray">
            <summary>
            View the resource as a 3D-cube-texture array using information from a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.bufferEx">
            <summary>
            View the resource as a raw buffer using information from a shader resource view.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11SrvDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">Index of the most detailed mipmap level to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">Index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">Index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">Index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BufferExSrvOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">Index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
            <param name="bufferExOptions">The view options for a buffer</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Buffer,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="buffer">A buffer.</param>
            <param name="format">The viewing format.</param>
            <param name="firstElement">The number of bytes between the beginning of the buffer and the first element to access.</param>
            <param name="numElements">The total number of elements in the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Buffer,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BufferExSrvOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="buffer">A buffer.</param>
            <param name="format">The viewing format.</param>
            <param name="firstElement">The number of bytes between the beginning of the buffer and the first element to access.</param>
            <param name="numElements">The total number of elements in the view.</param>
            <param name="options">The view options for a buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11SrvDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
            <param name="mostDetailedMip">The index of the most detailed mipmap level to use.</param>
            <param name="mipLevels">The maximum number of mipmap levels for the view.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Format">
            <summary>
            Gets or sets the viewing format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.ViewDimension">
            <summary>
            Gets or sets the resource type of the view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Buffer">
            <summary>
            Gets or sets the resource as a buffer using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Texture1D">
            <summary>
            Gets or sets the resource as a 1D texture using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Texture1DArray">
            <summary>
            Gets or sets the resource as a 1D-texture array using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Texture2D">
            <summary>
            Gets or sets the resource as a 2D-texture using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Texture2DArray">
            <summary>
            Gets or sets the resource as a 2D-texture array using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Texture2DMs">
            <summary>
            Gets or sets the resource as a 2D-multisampled texture using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Texture2DMsArray">
            <summary>
            Gets or sets the resource as a 2D-multisampled-texture array using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Texture3D">
            <summary>
            Gets or sets the resource as a 3D texture using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.TextureCube">
            <summary>
            Gets or sets the resource as a 3D-cube texture using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.TextureCubeArray">
            <summary>
            Gets or sets the resource as a 3D-cube-texture array using information from a shader resource view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.BufferEx">
            <summary>
            Gets or sets the resource as a raw buffer using information from a shader resource view.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc,JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc,JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11ShaderResourceViewDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry">
            <summary>
            Description of a vertex element in a vertex buffer in an output slot.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.stream">
            <summary>
            The stream number.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.semanticName">
            <summary>
            The type of output element.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.semanticIndex">
            <summary>
            The output element's index.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.startComponent">
            <summary>
            Which component of the entry to begin writing out to. Valid values are 0 to 3.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.componentCount">
            <summary>
            The number of components of the entry to write out to. Valid values are 1 to 4.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.outputSlot">
            <summary>
            The associated stream output buffer that is bound to the pipeline.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.#ctor(System.UInt32,System.String,System.UInt32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry"/> struct.
            </summary>
            <param name="stream">The stream number.</param>
            <param name="semanticName">The type of output element.</param>
            <param name="semanticIndex">The output element's index.</param>
            <param name="startComponent">Which component of the entry to begin writing out to. Valid values are 0 to 3.</param>
            <param name="componentCount">The number of components of the entry to write out to. Valid values are 1 to 4.</param>
            <param name="outputSlot">The associated stream output buffer that is bound to the pipeline.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.Stream">
            <summary>
            Gets or sets the stream number.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.SemanticName">
            <summary>
            Gets or sets the type of output element.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.SemanticIndex">
            <summary>
            Gets or sets the output element's index.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.StartComponent">
            <summary>
            Gets or sets a value indicating which component of the entry to begin writing out to. Valid values are 0 to 3.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.ComponentCount">
            <summary>
            Gets or sets the number of components of the entry to write out to. Valid values are 1 to 4.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.OutputSlot">
            <summary>
            Gets or sets the associated stream output buffer that is bound to the pipeline.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry,JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry,JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.Equals(JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11StreamOutputDeclarationEntry.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData">
            <summary>
            Specifies data for initializing a subresource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.data">
            <summary>
            The initialization data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.pitch">
            <summary>
            The distance (in bytes) from the beginning of one line of a texture to the next line.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.slicePitch">
            <summary>
            The distance (in bytes) from the beginning of one depth level to the next.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.#ctor(System.Array,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData"/> struct.
            </summary>
            <param name="data">The initialization data.</param>
            <param name="pitch">The distance (in bytes) from the beginning of one line of a texture to the next line.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.#ctor(System.Array,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData"/> struct.
            </summary>
            <param name="data">The initialization data.</param>
            <param name="pitch">The distance (in bytes) from the beginning of one line of a texture to the next line.</param>
            <param name="slicePitch">The distance (in bytes) from the beginning of one depth level to the next.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.Data">
            <summary>
            Gets the initialization data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.Pitch">
            <summary>
            Gets the distance (in bytes) from the beginning of one line of a texture to the next line.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.SlicePitch">
            <summary>
            Gets the distance (in bytes) from the beginning of one depth level to the next.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11SubResourceData,JeremyAnsel.DirectX.D3D11.D3D11SubResourceData)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11SubResourceData,JeremyAnsel.DirectX.D3D11.D3D11SubResourceData)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.Equals(JeremyAnsel.DirectX.D3D11.D3D11SubResourceData)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceData.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr">
            <summary>
            Specifies a pointer to data for initializing a subresource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.sysMem">
            <summary>
            A pointer to the initialization data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.sysMemPitch">
            <summary>
            The distance (in bytes) from the beginning of one line of a texture to the next line.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.sysMemSlicePitch">
            <summary>
            The distance (in bytes) from the beginning of one depth level to the next.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.SysMem">
            <summary>
            Gets or sets a pointer to the initialization data.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.SysMemPitch">
            <summary>
            Gets or sets the distance (in bytes) from the beginning of one line of a texture to the next line.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.SysMemSlicePitch">
            <summary>
            Gets or sets the distance (in bytes) from the beginning of one depth level to the next.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr,JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr,JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.Equals(JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11SubResourceDataPtr.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv">
            <summary>
            Specifies the subresources from an array of 1D textures to use in a depth-stencil view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.mipSlice">
            <summary>
            The index of the first mipmap level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.firstArraySlice">
            <summary>
            The index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.arraySize">
            <summary>
            The number of textures to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.MipSlice">
            <summary>
            Gets or sets the index of the first mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.FirstArraySlice">
            <summary>
            Gets or sets the index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.ArraySize">
            <summary>
            Gets or sets the number of textures to use.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayDsv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv">
            <summary>
            Specifies the subresources from an array of 1D textures to use in a render-target view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.mipSlice">
            <summary>
            The index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.firstArraySlice">
            <summary>
            The index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.arraySize">
            <summary>
            The number of textures to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.MipSlice">
            <summary>
            Gets or sets the index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.FirstArraySlice">
            <summary>
            Gets or sets the index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.ArraySize">
            <summary>
            Gets or sets the number of textures to use.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayRtv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv">
            <summary>
            Specifies the subresources from an array of 1D textures to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.mostDetailedMip">
            <summary>
            The index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.mipLevels">
            <summary>
            The maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.firstArraySlice">
            <summary>
            The index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.arraySize">
            <summary>
            The number of textures in the array.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.MostDetailedMip">
            <summary>
            Gets or sets the index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.FirstArraySlice">
            <summary>
            Gets or sets the index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.ArraySize">
            <summary>
            Gets or sets the number of textures in the array.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArraySrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav">
            <summary>
            Describes an array of unordered-access 1D texture resources.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.mipSlice">
            <summary>
            The mipmap slice index.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.firstArraySlice">
            <summary>
            The zero-based index of the first array slice to be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.arraySize">
            <summary>
            The number of slices in the array.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.MipSlice">
            <summary>
            Gets or sets the mipmap slice index.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.FirstArraySlice">
            <summary>
            Gets or sets the zero-based index of the first array slice to be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.ArraySize">
            <summary>
            Gets or sets the number of slices in the array.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav,JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav,JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DArrayUav.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc">
            <summary>
            Describes a 1D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.width">
            <summary>
            The texture width (in texels).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.mipLevels">
            <summary>
            The maximum number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.arraySize">
            <summary>
            The number of textures in the array.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.format">
            <summary>
            The texture format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.usage">
            <summary>
            Identifies how the texture is to be read from and written to.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.bindOptions">
            <summary>
            Options for binding to pipeline stages.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.cpuAccessOptions">
            <summary>
            Options to specify the types of CPU access allowed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.miscOptions">
            <summary>
            Options that identify other, less common resource options.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="arraySize">The number of textures in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="arraySize">The number of textures in the array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="arraySize">The number of textures in the array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="arraySize">The number of textures in the array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="arraySize">The number of textures in the array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
            <param name="cpuAccessOptions">Options to specify the types of CPU access allowed.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions,JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="arraySize">The number of textures in the array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
            <param name="cpuAccessOptions">Options to specify the types of CPU access allowed.</param>
            <param name="miscOptions">Options that identify other, less common resource options.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.Width">
            <summary>
            Gets or sets the texture width (in texels).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.ArraySize">
            <summary>
            Gets or sets the number of textures in the array.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.Format">
            <summary>
            Gets or sets the texture format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.Usage">
            <summary>
            Gets or sets a value indicating how the texture is to be read from and written to.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.BindOptions">
            <summary>
            Gets or sets options for binding to pipeline stages.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.CpuAccessOptions">
            <summary>
            Gets or sets options to specify the types of CPU access allowed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.MiscOptions">
            <summary>
            Gets or sets options that identify other, less common resource options.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc,JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc,JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv">
            <summary>
            Specifies the subresource from a 1D texture that is accessible to a depth-stencil view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv.mipSlice">
            <summary>
            The index of the first mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv.MipSlice">
            <summary>
            Gets or sets the index of the first mipmap level to use.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv">
            <summary>
            Specifies the subresource from a 1D texture to use in a render-target view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv.mipSlice">
            <summary>
            The index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv.MipSlice">
            <summary>
            Gets or sets the index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DRtv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv">
            <summary>
            Specifies the subresource from a 1D texture to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.mostDetailedMip">
            <summary>
            The index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.mipLevels">
            <summary>
            The maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.MostDetailedMip">
            <summary>
            Gets or sets the index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv,JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DSrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav">
            <summary>
            Describes a unordered-access 1D texture resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav.mipSlice">
            <summary>
            The mipmap slice index.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav.MipSlice">
            <summary>
            Gets or sets the mipmap slice index.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav,JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav,JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture1DUav.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv">
            <summary>
            Specifies the subresources from an array 2D textures that are accessible to a depth-stencil view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.mipSlice">
            <summary>
            The index of the first mipmap level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.firstArraySlice">
            <summary>
            The index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.arraySize">
            <summary>
            The number of textures to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.MipSlice">
            <summary>
            Gets or sets the index of the first mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.FirstArraySlice">
            <summary>
            Gets or sets the index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.ArraySize">
            <summary>
            Gets or sets the number of textures to use.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayDsv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv">
            <summary>
            Specifies the subresources from an array of 2D textures to use in a render-target view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.mipSlice">
            <summary>
            The index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.firstArraySlice">
            <summary>
            The index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.arraySize">
            <summary>
            The number of textures in the array to use in the render target view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.MipSlice">
            <summary>
            Gets or sets the index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.FirstArraySlice">
            <summary>
            Gets or sets the index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.ArraySize">
            <summary>
            Gets or sets the number of textures in the array to use in the render target view.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayRtv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv">
            <summary>
            Specifies the subresources from an array of 2D textures to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.mostDetailedMip">
            <summary>
            The index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.mipLevels">
            <summary>
            The maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.firstArraySlice">
            <summary>
            The index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.arraySize">
            <summary>
            The number of textures in the array.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.MostDetailedMip">
            <summary>
            Gets or sets the index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.FirstArraySlice">
            <summary>
            Gets or sets the index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.ArraySize">
            <summary>
            Gets or sets the number of textures in the array.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArraySrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav">
            <summary>
            Describes an array of unordered-access 2D texture resources.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.mipSlice">
            <summary>
            The mipmap slice index.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.firstArraySlice">
            <summary>
            The zero-based index of the first array slice to be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.arraySize">
            <summary>
            The number of slices in the array.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.MipSlice">
            <summary>
            Gets or sets the mipmap slice index.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.FirstArraySlice">
            <summary>
            Gets or sets the zero-based index of the first array slice to be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.ArraySize">
            <summary>
            Gets or sets the number of slices in the array.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav,JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav,JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DArrayUav.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc">
            <summary>
            Describes a 2D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.width">
            <summary>
            The texture width (in texels).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.height">
            <summary>
            The texture height (in texels).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.mipLevels">
            <summary>
            The maximum number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.arraySize">
            <summary>
            The number of textures in the texture array.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.format">
            <summary>
            The texture format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.sampleDesc">
            <summary>
            The multisampling parameters for the texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.usage">
            <summary>
            Identifies how the texture is to be read from and written to.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.bindOptions">
            <summary>
            Options for binding to pipeline stages.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.cpuAccessOptions">
            <summary>
            Options to specify the types of CPU access allowed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.miscOptions">
            <summary>
            Options that identify other, less common resource options.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="arraySize">The number of textures in the texture array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="arraySize">The number of textures in the texture array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="arraySize">The number of textures in the texture array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="arraySize">The number of textures in the texture array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="arraySize">The number of textures in the texture array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
            <param name="cpuAccessOptions">Options to specify the types of CPU access allowed.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="arraySize">The number of textures in the texture array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
            <param name="cpuAccessOptions">Options to specify the types of CPU access allowed.</param>
            <param name="sampleCount">The sample count.</param>
            <param name="sampleQuality">The sample quality.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="arraySize">The number of textures in the texture array.</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
            <param name="cpuAccessOptions">Options to specify the types of CPU access allowed.</param>
            <param name="sampleCount">The sample count.</param>
            <param name="sampleQuality">The sample quality.</param>
            <param name="miscOptions">Options that identify other, less common resource options.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.Width">
            <summary>
            Gets or sets the texture width (in texels).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.Height">
            <summary>
            Gets or sets the texture height (in texels).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.ArraySize">
            <summary>
            Gets or sets the number of textures in the texture array.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.Format">
            <summary>
            Gets or sets the texture format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.SampleDesc">
            <summary>
            Gets or sets the multisampling parameters for the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.Usage">
            <summary>
            Gets or sets a value indicating how the texture is to be read from and written to.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.BindOptions">
            <summary>
            Gets or sets options for binding to pipeline stages.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.CpuAccessOptions">
            <summary>
            Gets or sets options to specify the types of CPU access allowed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.MiscOptions">
            <summary>
            Gets or sets options that identify other, less common resource options.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc,JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc,JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv">
            <summary>
            Specifies the subresource from a 2D texture that is accessible to a depth-stencil view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv.mipSlice">
            <summary>
            The index of the first mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv.MipSlice">
            <summary>
            Gets or sets the index of the first mipmap level to use.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DDsv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv">
            <summary>
            Specifies the subresources from an array of multisampled 2D textures for a depth-stencil view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.firstArraySlice">
            <summary>
            The index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.arraySize">
            <summary>
            The number of textures to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.FirstArraySlice">
            <summary>
            Gets or sets the index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.ArraySize">
            <summary>
            Gets or sets the number of textures to use.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayDsv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv">
            <summary>
            Specifies the subresources from a an array of multisampled 2D textures to use in a render-target view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.firstArraySlice">
            <summary>
            The index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.arraySize">
            <summary>
            The number of textures to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.FirstArraySlice">
            <summary>
            Gets or sets the index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.ArraySize">
            <summary>
            Gets or sets the number of textures to use.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArrayRtv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv">
            <summary>
            Specifies the subresources from an array of multisampled 2D textures to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.firstArraySlice">
            <summary>
            The index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.arraySize">
            <summary>
            The number of textures to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.FirstArraySlice">
            <summary>
            Gets or sets the index of the first texture to use in an array of textures.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.ArraySize">
            <summary>
            Gets or sets the number of textures to use.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsArraySrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv">
            <summary>
            Specifies the subresource from a multisampled 2D texture that is accessible to a depth-stencil view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv.unusedFieldNothingToDefine">
            <summary>
            Unused field.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsDsv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv">
            <summary>
            Specifies the subresource from a multisampled 2D texture to use in a render-target view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv.unusedFieldNothingToDefine">
            <summary>
            Unused field.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsRtv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv">
            <summary>
            Specifies the subresources from a multisampled 2D texture to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv.unusedFieldNothingToDefine">
            <summary>
            Unused field.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DMsSrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv">
            <summary>
            Specifies the subresource from a 2D texture to use in a render-target view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv.mipSlice">
            <summary>
            The index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv.MipSlice">
            <summary>
            Gets or sets the index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DRtv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv">
            <summary>
            Specifies the subresource from a 2D texture to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.mostDetailedMip">
            <summary>
            The index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.mipLevels">
            <summary>
            The maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.MostDetailedMip">
            <summary>
            Gets or sets the index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv,JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DSrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav">
            <summary>
            Describes a unordered-access 2D texture resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav.mipSlice">
            <summary>
            The mipmap slice index.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav.MipSlice">
            <summary>
            Gets or sets the mipmap slice index.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav,JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav,JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture2DUav.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc">
            <summary>
            Describes a 3D texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.width">
            <summary>
            The texture width (in texels).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.height">
            <summary>
            The texture height (in texels).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.depth">
            <summary>
            The texture depth (in texels).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.mipLevels">
            <summary>
            The maximum number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.format">
            <summary>
            The texture format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.usage">
            <summary>
            Identifies how the texture is to be read from and written to.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.bindOptions">
            <summary>
            Options for binding to pipeline stages.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.cpuAccessOptions">
            <summary>
            Options to specify the types of CPU access allowed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.miscOptions">
            <summary>
            Options that identify other, less common resource options.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="depth">The texture depth (in texels).</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="depth">The texture depth (in texels).</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="depth">The texture depth (in texels).</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="depth">The texture depth (in texels).</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="depth">The texture depth (in texels).</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
            <param name="cpuAccessOptions">Options to specify the types of CPU access allowed.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.#ctor(JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BindOptions,JeremyAnsel.DirectX.D3D11.D3D11Usage,JeremyAnsel.DirectX.D3D11.D3D11CpuAccessOptions,JeremyAnsel.DirectX.D3D11.D3D11ResourceMiscOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> struct.
            </summary>
            <param name="format">The texture format.</param>
            <param name="width">The texture width (in texels).</param>
            <param name="height">The texture height (in texels).</param>
            <param name="depth">The texture depth (in texels).</param>
            <param name="mipLevels">The maximum number of mipmap levels in the texture.</param>
            <param name="bindOptions">Options for binding to pipeline stages.</param>
            <param name="usage">Identifies how the texture is to be read from and written to.</param>
            <param name="cpuAccessOptions">Options to specify the types of CPU access allowed.</param>
            <param name="miscOptions">Options that identify other, less common resource options.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.Width">
            <summary>
            Gets or sets the texture width (in texels).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.Height">
            <summary>
            Gets or sets the texture height (in texels).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.Depth">
            <summary>
            Gets or sets the texture depth (in texels).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels in the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.Format">
            <summary>
            Gets or sets the texture format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.Usage">
            <summary>
            Gets or sets a value indicating how the texture is to be read from and written to.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.BindOptions">
            <summary>
            Gets or sets options for binding to pipeline stages.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.CpuAccessOptions">
            <summary>
            Gets or sets options to specify the types of CPU access allowed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.MiscOptions">
            <summary>
            Gets or sets options that identify other, less common resource options.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc,JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc,JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv">
            <summary>
            Specifies the subresources from a 3D texture to use in a render-target view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.mipSlice">
            <summary>
            The index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.firstWSlice">
            <summary>
            The first depth level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.wsize">
            <summary>
            The number of depth levels to use in the render-target view.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.MipSlice">
            <summary>
            Gets or sets the index of the mipmap level to use mip slice.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.FirstWSlice">
            <summary>
            Gets or sets the first depth level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.WSize">
            <summary>
            Gets or sets the number of depth levels to use in the render-target view.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv,JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DRtv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv">
            <summary>
            Specifies the subresources from a 3D texture to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.mostDetailedMip">
            <summary>
            The index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.mipLevels">
            <summary>
            The maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.MostDetailedMip">
            <summary>
            Gets or sets the index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv,JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv,JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DSrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav">
            <summary>
            Describes a unordered-access 3D texture resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.mipSlice">
            <summary>
            The mipmap slice index.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.firstWSlice">
            <summary>
            The zero-based index of the first depth slice to be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.wsize">
            <summary>
            The number of depth slices.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.MipSlice">
            <summary>
            Gets or sets the mipmap slice index.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.FirstWSlice">
            <summary>
            Gets or sets the zero-based index of the first depth slice to be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.WSize">
            <summary>
            Gets or sets the number of depth slices.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav,JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav,JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.Equals(JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Texture3DUav.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv">
            <summary>
            Specifies the subresources from an array of cube textures to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.mostDetailedMip">
            <summary>
            The index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.mipLevels">
            <summary>
            The maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.first2DArrayFace">
            <summary>
            The index of the first 2D texture to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.numCubes">
            <summary>
            The number of cube textures in the array.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.MostDetailedMip">
            <summary>
            Gets or sets the index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.First2DArrayFace">
            <summary>
            Gets or sets the index of the first 2D texture to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.NumCubes">
            <summary>
            Gets or sets the number of cube textures in the array.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv,JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv,JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeArraySrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv">
            <summary>
            Specifies the subresource from a cube texture to use in a shader resource view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.mostDetailedMip">
            <summary>
            The index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.mipLevels">
            <summary>
            The maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.MostDetailedMip">
            <summary>
            Gets or sets the index of the most detailed mipmap level to use.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.MipLevels">
            <summary>
            Gets or sets the maximum number of mipmap levels for the view of the texture.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv,JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv,JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.Equals(JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11TextureCubeSrv.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc">
            <summary>
            Specifies the subresources from a resource that are accessible using an unordered-access view.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.format">
            <summary>
            The data format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.viewDimension">
            <summary>
            The resource type.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.buffer">
            <summary>
            Specifies which buffer elements can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.texture1D">
            <summary>
            Specifies the subresources in a 1D texture that can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.texture1DArray">
            <summary>
            Specifies the subresources in a 1D texture array that can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.texture2D">
            <summary>
            Specifies the subresources in a 2D texture that can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.texture2DArray">
            <summary>
            Specifies the subresources in a 2D texture array that can be accessed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.texture3D">
            <summary>
            Specifies the subresources in a 3D texture that can be accessed.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11UavDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BufferUavOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
            <param name="bufferOptions">The view options for a buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Buffer,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="buffer">A buffer.</param>
            <param name="format">The viewing format.</param>
            <param name="firstElement">The number of bytes between the beginning of the buffer and the first element to access.</param>
            <param name="numElements">The total number of elements in the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Buffer,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,JeremyAnsel.DirectX.D3D11.D3D11BufferUavOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="buffer">A buffer.</param>
            <param name="format">The viewing format.</param>
            <param name="firstElement">The number of bytes between the beginning of the buffer and the first element to access.</param>
            <param name="numElements">The total number of elements in the view.</param>
            <param name="options">The view options for a buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11UavDimension,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="viewDimension">The resource type of the view.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstArraySlice">The index of the first element to use in an array of elements.</param>
            <param name="arraySize">The number of elements in the array.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstWSlice">The first depth level to use.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.Dxgi.DxgiFormat,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="format">The viewing format.</param>
            <param name="mipSlice">The index of the mipmap level to use mip slice.</param>
            <param name="firstWSlice">The first depth level to use.</param>
            <param name="wsize">The number of depth levels to use in the render-target view.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.Format">
            <summary>
            Gets or sets the data format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.ViewDimension">
            <summary>
            Gets or sets the resource type.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.Buffer">
            <summary>
            Gets or sets a value indicating which buffer elements can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.Texture1D">
            <summary>
            Gets or sets the subresources in a 1D texture that can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.Texture1DArray">
            <summary>
            Gets or sets the subresources in a 1D texture array that can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.Texture2D">
            <summary>
            Gets or sets the subresources in a 2D texture that can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.Texture2DArray">
            <summary>
            Gets or sets the subresources in a 2D texture array that can be accessed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.Texture3D">
            <summary>
            Gets or sets the subresources in a 3D texture that can be accessed.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc,JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc,JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.Equals(JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11UnorderedAccessViewDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport">
            <summary>
            Defines the dimensions of a viewport.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Viewport.topLeftX">
            <summary>
            The X position of the left hand side of the viewport.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Viewport.topLeftY">
            <summary>
            The Y position of the top of the viewport.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Viewport.width">
            <summary>
            The width of the viewport.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Viewport.height">
            <summary>
            The height of the viewport.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Viewport.minDepth">
            <summary>
            The minimum depth of the viewport.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.D3D11.D3D11Viewport.maxDepth">
            <summary>
            The maximum depth of the viewport.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
            <param name="topLeftY">The Y position of the top of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
            <param name="topLeftY">The Y position of the top of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minDepth">The minimum depth of the viewport.</param>
            <param name="maxDepth">The maximum depth of the viewport.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Buffer,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="buffer">A buffer.</param>
            <param name="view">The render-target view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Buffer,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="buffer">A buffer.</param>
            <param name="view">The render-target view.</param>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Buffer,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="buffer">A buffer.</param>
            <param name="view">The render-target view.</param>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
            <param name="minDepth">The minimum depth of the viewport.</param>
            <param name="maxDepth">The maximum depth of the viewport.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="view">The render-target view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="view">The render-target view.</param>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture1D,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="texture">A 1D texture.</param>
            <param name="view">The render-target view.</param>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
            <param name="minDepth">The minimum depth of the viewport.</param>
            <param name="maxDepth">The maximum depth of the viewport.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="view">The render-target view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="view">The render-target view.</param>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
            <param name="topLeftY">The Y position of the top of the viewport.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture2D,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="texture">A 2D texture.</param>
            <param name="view">The render-target view.</param>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
            <param name="topLeftY">The Y position of the top of the viewport.</param>
            <param name="minDepth">The minimum depth of the viewport.</param>
            <param name="maxDepth">The maximum depth of the viewport.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="view">The render-target view.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="view">The render-target view.</param>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
            <param name="topLeftY">The Y position of the top of the viewport.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.#ctor(JeremyAnsel.DirectX.D3D11.D3D11Texture3D,JeremyAnsel.DirectX.D3D11.D3D11RenderTargetView,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> struct.
            </summary>
            <param name="texture">A 3D texture.</param>
            <param name="view">The render-target view.</param>
            <param name="topLeftX">The X position of the left hand side of the viewport.</param>
            <param name="topLeftY">The Y position of the top of the viewport.</param>
            <param name="minDepth">The minimum depth of the viewport.</param>
            <param name="maxDepth">The maximum depth of the viewport.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Viewport.TopLeftX">
            <summary>
            Gets or sets the X position of the left hand side of the viewport.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Viewport.TopLeftY">
            <summary>
            Gets or sets the Y position of the top of the viewport.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Viewport.Width">
            <summary>
            Gets or sets the width of the viewport.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Viewport.Height">
            <summary>
            Gets or sets the height of the viewport.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Viewport.MinDepth">
            <summary>
            Gets or sets the minimum depth of the viewport.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.D3D11.D3D11Viewport.MaxDepth">
            <summary>
            Gets or sets the maximum depth of the viewport.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.op_Equality(JeremyAnsel.DirectX.D3D11.D3D11Viewport,JeremyAnsel.DirectX.D3D11.D3D11Viewport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.op_Inequality(JeremyAnsel.DirectX.D3D11.D3D11Viewport,JeremyAnsel.DirectX.D3D11.D3D11Viewport)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.D3D11.D3D11Viewport"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.Equals(JeremyAnsel.DirectX.D3D11.D3D11Viewport)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.D3D11.D3D11Viewport.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
    </members>
</doc>
