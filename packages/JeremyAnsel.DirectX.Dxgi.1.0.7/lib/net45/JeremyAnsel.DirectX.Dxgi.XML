<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JeremyAnsel.DirectX.Dxgi</name>
    </assembly>
    <members>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter">
            <summary>
            The <c>IDXGIAdapter</c> interface represents a display sub-system (including one or more GPU's, DACs and video memory).
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter.EnumOutputs(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput@)">
            <summary>
            Enumerate adapter (video card) outputs.
            </summary>
            <param name="uindex">The index of the output.</param>
            <param name="output">The address of a pointer to an <c>IDXGIOutput</c> interface at the position specified by the Output parameter.</param>
            <returns>A code that indicates success or failure. Will return <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than the number of outputs.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter.GetDesc">
            <summary>
            Gets a DXGI 1.0 description of an adapter (or video card).
            </summary>
            <returns>A <c>DXGI_ADAPTER_DESC</c> structure that describes the adapter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter.CheckInterfaceSupport(System.Guid@,System.Int64@)">
            <summary>
            Checks whether the system supports a device interface for a graphics component.
            </summary>
            <param name="name">The GUID of the interface of the device version for which support is being checked.</param>
            <param name="umdVersion">The user mode driver version of interface's name.</param>
            <returns><value>S_OK</value> indicates that the interface is supported, otherwise <value>DXGI_ERROR_UNSUPPORTED</value>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1">
            <summary>
            The <c>IDXGIAdapter1</c> interface represents a display sub-system (including one or more GPU's, DACs and video memory).
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1.EnumOutputs(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput@)">
            <summary>
            Enumerate adapter (video card) outputs.
            </summary>
            <param name="uindex">The index of the output.</param>
            <param name="output">The address of a pointer to an <c>IDXGIOutput</c> interface at the position specified by the Output parameter.</param>
            <returns>A code that indicates success or failure. Will return <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than the number of outputs.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1.GetDesc">
            <summary>
            Gets a DXGI 1.0 description of an adapter (or video card).
            </summary>
            <returns>A <c>DXGI_ADAPTER_DESC</c> structure that describes the adapter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1.CheckInterfaceSupport(System.Guid@,System.Int64@)">
            <summary>
            Checks whether the system supports a device interface for a graphics component.
            </summary>
            <param name="name">The GUID of the interface of the device version for which support is being checked.</param>
            <param name="umdVersion">The user mode driver version of interface's name.</param>
            <returns><value>S_OK</value> indicates that the interface is supported, otherwise <value>DXGI_ERROR_UNSUPPORTED</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1.GetDesc1">
            <summary>
            Gets a DXGI 1.1 description of an adapter (or video card).
            </summary>
            <returns>A <c>DXGI_ADAPTER_DESC1</c> structure that describes the adapter.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2">
            <summary>
            The <c>IDXGIAdapter2</c> interface represents a display sub-system, which includes one or more GPUs, DACs, and video memory.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2.EnumOutputs(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput@)">
            <summary>
            Enumerate adapter (video card) outputs.
            </summary>
            <param name="uindex">The index of the output.</param>
            <param name="output">The address of a pointer to an <c>IDXGIOutput</c> interface at the position specified by the Output parameter.</param>
            <returns>A code that indicates success or failure. Will return <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than the number of outputs.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2.GetDesc">
            <summary>
            Gets a DXGI 1.0 description of an adapter (or video card).
            </summary>
            <returns>A <c>DXGI_ADAPTER_DESC</c> structure that describes the adapter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2.CheckInterfaceSupport(System.Guid@,System.Int64@)">
            <summary>
            Checks whether the system supports a device interface for a graphics component.
            </summary>
            <param name="name">The GUID of the interface of the device version for which support is being checked.</param>
            <param name="umdVersion">The user mode driver version of interface's name.</param>
            <returns><value>S_OK</value> indicates that the interface is supported, otherwise <value>DXGI_ERROR_UNSUPPORTED</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2.GetDesc1">
            <summary>
            Gets a DXGI 1.1 description of an adapter (or video card).
            </summary>
            <returns>A <c>DXGI_ADAPTER_DESC1</c> structure that describes the adapter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2.GetDesc2">
            <summary>
            Gets a Microsoft DirectX Graphics Infrastructure (DXGI) 1.2 description of an adapter or video card. This description includes information about the granularity at which the graphics processing unit (GPU) can be preempted from performing its current task.
            </summary>
            <returns>A <c>DXGI_ADAPTER_DESC2</c> structure that describes the adapter.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice">
            <summary>
            An <c>IDXGIDevice</c> interface implements a derived class for DXGI objects that produce image data.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice.GetAdapter">
            <summary>
            Returns the adapter for the specified device.
            </summary>
            <returns>The adapter for the specified device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice.CreateSurface(JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc@,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiUsages,JeremyAnsel.DirectX.Dxgi.DxgiSharedResource@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface[])">
            <summary>
            Returns a surface. This method is used internally and you should not call it directly in your application.
            </summary>
            <param name="desc">A <c>DXGI_SURFACE_DESC</c> structure that describes the surface.</param>
            <param name="numSurfaces">The number of surfaces to create.</param>
            <param name="usage">A <c>DXGI_USAGE</c> flag that specifies how the surface is expected to be used.</param>
            <param name="sharedResource">An optional <c>DXGI_SHARED_RESOURCE</c> structure that contains shared resource information for opening views of such resources.</param>
            <param name="surface">The address of an <c>IDXGISurface</c> interface pointer to the first created surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice.QueryResourceResidency(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource[],JeremyAnsel.DirectX.Dxgi.DxgiResidency[],System.UInt32)">
            <summary>
            Gets the residency status of an array of resources.
            </summary>
            <param name="resources">An array of <c>IDXGIResource</c> interfaces.</param>
            <param name="residencyStatus">An array of <c>DXGI_RESIDENCY</c> flags. Each element describes the residency status for corresponding element in the <c>resources</c> argument array.</param>
            <param name="numResources">The number of resources in the argument arrays.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice.SetGpuThreadPriority(System.Int32)">
            <summary>
            Sets the GPU thread priority.
            </summary>
            <param name="priority">A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice.GetGpuThreadPriority">
            <summary>
            Gets the GPU thread priority.
            </summary>
            <returns>A value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1">
            <summary>
            An <c>IDXGIDevice1</c> interface implements a derived class for DXGI objects that produce image data.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.GetAdapter">
            <summary>
            Returns the adapter for the specified device.
            </summary>
            <returns>The adapter for the specified device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.CreateSurface(JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc@,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiUsages,JeremyAnsel.DirectX.Dxgi.DxgiSharedResource@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface[])">
            <summary>
            Returns a surface. This method is used internally and you should not call it directly in your application.
            </summary>
            <param name="desc">A <c>DXGI_SURFACE_DESC</c> structure that describes the surface.</param>
            <param name="numSurfaces">The number of surfaces to create.</param>
            <param name="usage">A <c>DXGI_USAGE</c> flag that specifies how the surface is expected to be used.</param>
            <param name="sharedResource">An optional <c>DXGI_SHARED_RESOURCE</c> structure that contains shared resource information for opening views of such resources.</param>
            <param name="surface">The address of an <c>IDXGISurface</c> interface pointer to the first created surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.QueryResourceResidency(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource[],JeremyAnsel.DirectX.Dxgi.DxgiResidency[],System.UInt32)">
            <summary>
            Gets the residency status of an array of resources.
            </summary>
            <param name="resources">An array of <c>IDXGIResource</c> interfaces.</param>
            <param name="residencyStatus">An array of <c>DXGI_RESIDENCY</c> flags. Each element describes the residency status for corresponding element in the <c>resources</c> argument array.</param>
            <param name="numResources">The number of resources in the argument arrays.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.SetGpuThreadPriority(System.Int32)">
            <summary>
            Sets the GPU thread priority.
            </summary>
            <param name="priority">A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.GetGpuThreadPriority">
            <summary>
            Gets the GPU thread priority.
            </summary>
            <returns>A value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.SetMaximumFrameLatency(System.UInt32)">
            <summary>
            Sets the number of frames that the system is allowed to queue for rendering.
            </summary>
            <param name="maxLatency">The maximum number of back buffer frames that a driver can queue. The value defaults to 3, but can range from 1 to 16. A value of 0 will reset latency to the default. For multi-head devices, this value is specified per-head.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1.GetMaximumFrameLatency">
            <summary>
            Gets the number of frames that the system is allowed to queue for rendering.
            </summary>
            <returns>The number of frames that can be queued for render. This value defaults to 3, but can range from 1 to 16.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2">
            <summary>
            The <c>IDXGIDevice2</c> interface implements a derived class for DXGI objects that produce image data. The interface exposes methods to block CPU processing until the GPU completes processing, and to offer resources to the operating system.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice1"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.GetAdapter">
            <summary>
            Returns the adapter for the specified device.
            </summary>
            <returns>The adapter for the specified device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.CreateSurface(JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc@,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiUsages,JeremyAnsel.DirectX.Dxgi.DxgiSharedResource@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface[])">
            <summary>
            Returns a surface. This method is used internally and you should not call it directly in your application.
            </summary>
            <param name="desc">A <c>DXGI_SURFACE_DESC</c> structure that describes the surface.</param>
            <param name="numSurfaces">The number of surfaces to create.</param>
            <param name="usage">A <c>DXGI_USAGE</c> flag that specifies how the surface is expected to be used.</param>
            <param name="sharedResource">An optional <c>DXGI_SHARED_RESOURCE</c> structure that contains shared resource information for opening views of such resources.</param>
            <param name="surface">The address of an <c>IDXGISurface</c> interface pointer to the first created surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.QueryResourceResidency(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource[],JeremyAnsel.DirectX.Dxgi.DxgiResidency[],System.UInt32)">
            <summary>
            Gets the residency status of an array of resources.
            </summary>
            <param name="resources">An array of <c>IDXGIResource</c> interfaces.</param>
            <param name="residencyStatus">An array of <c>DXGI_RESIDENCY</c> flags. Each element describes the residency status for corresponding element in the <c>resources</c> argument array.</param>
            <param name="numResources">The number of resources in the argument arrays.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.SetGpuThreadPriority(System.Int32)">
            <summary>
            Sets the GPU thread priority.
            </summary>
            <param name="priority">A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.GetGpuThreadPriority">
            <summary>
            Gets the GPU thread priority.
            </summary>
            <returns>A value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.SetMaximumFrameLatency(System.UInt32)">
            <summary>
            Sets the number of frames that the system is allowed to queue for rendering.
            </summary>
            <param name="maxLatency">The maximum number of back buffer frames that a driver can queue. The value defaults to 3, but can range from 1 to 16. A value of 0 will reset latency to the default. For multi-head devices, this value is specified per-head.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.GetMaximumFrameLatency">
            <summary>
            Gets the number of frames that the system is allowed to queue for rendering.
            </summary>
            <returns>The number of frames that can be queued for render. This value defaults to 3, but can range from 1 to 16.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.OfferResources(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource[],JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority)">
            <summary>
            Allows the operating system to free the video memory of resources by discarding their content.
            </summary>
            <param name="numResources">The number of resources in the <c>resources</c> argument array.</param>
            <param name="resources">An array of pointers to <c>IDXGIResource</c> interfaces for the resources to offer.</param>
            <param name="priority">A <c>DXGI_OFFER_RESOURCE_PRIORITY</c>-typed value that indicates how valuable data is.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.ReclaimResources(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource[],System.Boolean[])">
            <summary>
            Restores access to resources that were previously offered by calling <c>IDXGIDevice2::OfferResources</c>.
            </summary>
            <param name="numResources">The number of resources in the <c>resources</c> argument and <c>discarded</c> argument arrays.</param>
            <param name="resources">An array of pointers to <c>IDXGIResource</c> interfaces for the resources to reclaim.</param>
            <param name="discarded">A pointer to an array that receives Boolean values. Each value in the array corresponds to a resource at the same index that the ppResources parameter specifies. The runtime sets each Boolean value to <value>TRUE</value> if the corresponding resource’s content was discarded and is now undefined, or to <value>FALSE</value> if the corresponding resource’s old content is still intact. The caller can pass in <value>NULL</value>, if the caller intends to fill the resources with new content regardless of whether the old content was discarded.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2.EnqueueSetEvent(System.IntPtr)">
            <summary>
            Flushes any outstanding rendering commands and sets the specified event object to the signaled state after all previously submitted rendering commands complete.
            </summary>
            <param name="eventHandle">A handle to the event object.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3">
            <summary>
            The <c>IDXGIDevice3</c> interface implements a derived class for DXGI objects that produce image data. The interface exposes a method to trim graphics memory usage by the DXGI device.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice2"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.GetAdapter">
            <summary>
            Returns the adapter for the specified device.
            </summary>
            <returns>The adapter for the specified device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.CreateSurface(JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc@,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiUsages,JeremyAnsel.DirectX.Dxgi.DxgiSharedResource@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface[])">
            <summary>
            Returns a surface. This method is used internally and you should not call it directly in your application.
            </summary>
            <param name="desc">A <c>DXGI_SURFACE_DESC</c> structure that describes the surface.</param>
            <param name="numSurfaces">The number of surfaces to create.</param>
            <param name="usage">A <c>DXGI_USAGE</c> flag that specifies how the surface is expected to be used.</param>
            <param name="sharedResource">An optional <c>DXGI_SHARED_RESOURCE</c> structure that contains shared resource information for opening views of such resources.</param>
            <param name="surface">The address of an <c>IDXGISurface</c> interface pointer to the first created surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.QueryResourceResidency(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource[],JeremyAnsel.DirectX.Dxgi.DxgiResidency[],System.UInt32)">
            <summary>
            Gets the residency status of an array of resources.
            </summary>
            <param name="resources">An array of <c>IDXGIResource</c> interfaces.</param>
            <param name="residencyStatus">An array of <c>DXGI_RESIDENCY</c> flags. Each element describes the residency status for corresponding element in the <c>resources</c> argument array.</param>
            <param name="numResources">The number of resources in the argument arrays.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.SetGpuThreadPriority(System.Int32)">
            <summary>
            Sets the GPU thread priority.
            </summary>
            <param name="priority">A value that specifies the required GPU thread priority. This value must be between -7 and 7, inclusive, where 0 represents normal priority.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.GetGpuThreadPriority">
            <summary>
            Gets the GPU thread priority.
            </summary>
            <returns>A value that indicates the current GPU thread priority. The value will be between -7 and 7, inclusive, where 0 represents normal priority.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.SetMaximumFrameLatency(System.UInt32)">
            <summary>
            Sets the number of frames that the system is allowed to queue for rendering.
            </summary>
            <param name="maxLatency">The maximum number of back buffer frames that a driver can queue. The value defaults to 3, but can range from 1 to 16. A value of 0 will reset latency to the default. For multi-head devices, this value is specified per-head.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.GetMaximumFrameLatency">
            <summary>
            Gets the number of frames that the system is allowed to queue for rendering.
            </summary>
            <returns>The number of frames that can be queued for render. This value defaults to 3, but can range from 1 to 16.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.OfferResources(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource[],JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority)">
            <summary>
            Allows the operating system to free the video memory of resources by discarding their content.
            </summary>
            <param name="numResources">The number of resources in the <c>resources</c> argument array.</param>
            <param name="resources">An array of pointers to <c>IDXGIResource</c> interfaces for the resources to offer.</param>
            <param name="priority">A <c>DXGI_OFFER_RESOURCE_PRIORITY</c>-typed value that indicates how valuable data is.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.ReclaimResources(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource[],System.Boolean[])">
            <summary>
            Restores access to resources that were previously offered by calling <c>IDXGIDevice2::OfferResources</c>.
            </summary>
            <param name="numResources">The number of resources in the <c>resources</c> argument and <c>discarded</c> argument arrays.</param>
            <param name="resources">An array of pointers to <c>IDXGIResource</c> interfaces for the resources to reclaim.</param>
            <param name="discarded">A pointer to an array that receives Boolean values. Each value in the array corresponds to a resource at the same index that the ppResources parameter specifies. The runtime sets each Boolean value to <value>TRUE</value> if the corresponding resource’s content was discarded and is now undefined, or to <value>FALSE</value> if the corresponding resource’s old content is still intact. The caller can pass in <value>NULL</value>, if the caller intends to fill the resources with new content regardless of whether the old content was discarded.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.EnqueueSetEvent(System.IntPtr)">
            <summary>
            Flushes any outstanding rendering commands and sets the specified event object to the signaled state after all previously submitted rendering commands complete.
            </summary>
            <param name="eventHandle">A handle to the event object.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDevice3.Trim">
            <summary>
            Trims the graphics memory allocated by the <c>IDXGIDevice3</c> DXGI device on the app's behalf.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject">
            <summary>
            Inherited from objects that are tied to the device so that they can retrieve a pointer to it.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject.GetParent(System.Guid)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory">
            <summary>
            An <c>IDXGIFactory</c> interface implements methods for generating DXGI objects (which handle full screen transitions).
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory.EnumAdapters(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter@)">
            <summary>
            Enumerates the adapters (video cards).
            </summary>
            <param name="index">The index of the adapter to enumerate.</param>
            <param name="adapter">The address of a pointer to an <c>IDXGIAdapter</c> interface at the position specified by the index parameter.</param>
            <returns><value>S_OK</value> if successful; otherwise, returns <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than or equal to the number of adapters in the local system.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory.MakeWindowAssociation(System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions)">
            <summary>
            Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).
            </summary>
            <param name="windowHandle">The handle of the window that is to be monitored. This parameter can be <value>Zero</value>; but only if the flags are also 0.</param>
            <param name="options">One or more options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory.GetWindowAssociation">
            <summary>
            Get the window through which the user controls the transition to and from full screen.
            </summary>
            <returns>A window handle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory.CreateSwapChain(System.Object,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc@)">
            <summary>
            Creates a swap chain.
            </summary>
            <param name="device">A Direct3D device that will write 2D images to the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC</c> structure for the swap-chain description.</param>
            <returns>An <c>IDXGISwapChain</c> interface for the swap chain</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory.CreateSoftwareAdapter(System.IntPtr)">
            <summary>
            Create an adapter interface that represents a software adapter.
            </summary>
            <param name="module">Handle to the software adapter's dll.</param>
            <returns>An adapter.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1">
            <summary>
            The <c>IDXGIFactory1</c> interface implements methods for generating DXGI objects.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.EnumAdapters(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter@)">
            <summary>
            Enumerates the adapters (video cards).
            </summary>
            <param name="index">The index of the adapter to enumerate.</param>
            <param name="adapter">The address of a pointer to an <c>IDXGIAdapter</c> interface at the position specified by the index parameter.</param>
            <returns><value>S_OK</value> if successful; otherwise, returns <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than or equal to the number of adapters in the local system.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.MakeWindowAssociation(System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions)">
            <summary>
            Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).
            </summary>
            <param name="windowHandle">The handle of the window that is to be monitored. This parameter can be <value>Zero</value>; but only if the flags are also 0.</param>
            <param name="options">One or more options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.GetWindowAssociation">
            <summary>
            Get the window through which the user controls the transition to and from full screen.
            </summary>
            <returns>A window handle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.CreateSwapChain(System.Object,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc@)">
            <summary>
            Creates a swap chain.
            </summary>
            <param name="device">A Direct3D device that will write 2D images to the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC</c> structure for the swap-chain description.</param>
            <returns>An <c>IDXGISwapChain</c> interface for the swap chain</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.CreateSoftwareAdapter(System.IntPtr)">
            <summary>
            Create an adapter interface that represents a software adapter.
            </summary>
            <param name="module">Handle to the software adapter's dll.</param>
            <returns>An adapter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.EnumAdapters1(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1@)">
            <summary>
            Enumerates both adapters (video cards) with or without outputs.
            </summary>
            <param name="index">The index of the adapter to enumerate.</param>
            <param name="adapter">The address of a pointer to an <c>IDXGIAdapter1</c> interface at the position specified by the index parameter.</param>
            <returns><value>S_OK</value> if successful; otherwise, returns <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than or equal to the number of adapters in the local system.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1.IsCurrent">
            <summary>
            Informs an application of the possible need to re-enumerate adapters.
            </summary>
            <returns><value>false</value>, if a new adapter is becoming available or the current adapter is going away. <value>true</value>, no adapter changes.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2">
            <summary>
            The <c>IDXGIFactory2</c> interface includes methods to create a newer version swap chain with more features than <c>IDXGISwapChain</c> and to monitor stereoscopic 3D capabilities.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.EnumAdapters(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter@)">
            <summary>
            Enumerates the adapters (video cards).
            </summary>
            <param name="index">The index of the adapter to enumerate.</param>
            <param name="adapter">The address of a pointer to an <c>IDXGIAdapter</c> interface at the position specified by the index parameter.</param>
            <returns><value>S_OK</value> if successful; otherwise, returns <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than or equal to the number of adapters in the local system.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.MakeWindowAssociation(System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions)">
            <summary>
            Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).
            </summary>
            <param name="windowHandle">The handle of the window that is to be monitored. This parameter can be <value>Zero</value>; but only if the flags are also 0.</param>
            <param name="options">One or more options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.GetWindowAssociation">
            <summary>
            Get the window through which the user controls the transition to and from full screen.
            </summary>
            <returns>A window handle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.CreateSwapChain(System.Object,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc@)">
            <summary>
            Creates a swap chain.
            </summary>
            <param name="device">A Direct3D device that will write 2D images to the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC</c> structure for the swap-chain description.</param>
            <returns>An <c>IDXGISwapChain</c> interface for the swap chain</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.CreateSoftwareAdapter(System.IntPtr)">
            <summary>
            Create an adapter interface that represents a software adapter.
            </summary>
            <param name="module">Handle to the software adapter's dll.</param>
            <returns>An adapter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.EnumAdapters1(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1@)">
            <summary>
            Enumerates both adapters (video cards) with or without outputs.
            </summary>
            <param name="index">The index of the adapter to enumerate.</param>
            <param name="adapter">The address of a pointer to an <c>IDXGIAdapter1</c> interface at the position specified by the index parameter.</param>
            <returns><value>S_OK</value> if successful; otherwise, returns <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than or equal to the number of adapters in the local system.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.IsCurrent">
            <summary>
            Informs an application of the possible need to re-enumerate adapters.
            </summary>
            <returns><value>false</value>, if a new adapter is becoming available or the current adapter is going away. <value>true</value>, no adapter changes.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.IsWindowedStereoEnabled">
            <summary>
            Determines whether to use stereo mode.
            </summary>
            <returns>Indicates whether to use stereo mode. <value>TRUE</value> indicates that you can use stereo mode; otherwise, <value>FALSE</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.CreateSwapChainForWindowHandle(System.Object,System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1@,System.IntPtr,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Creates a swap chain that is associated with an <c>HWND</c> handle to the output window for the swap chain.
            </summary>
            <param name="device">The Direct3D device for the swap chain.</param>
            <param name="hwnd">The <c>HWND</c> handle that is associated with the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC1</c> structure for the swap-chain description.</param>
            <param name="fullscreenDesc">A <c>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</c> structure for the description of a full-screen swap chain.</param>
            <param name="restrictToOutput">The <c>IDXGIOutput</c> interface for the output to restrict content to.</param>
            <returns>The <c>IDXGISwapChain1</c> interface for the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.CreateSwapChainForCoreWindow(System.Object,System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Creates a swap chain that is associated with the <c>CoreWindow</c> object for the output window for the swap chain.
            </summary>
            <param name="device">The Direct3D device for the swap chain.</param>
            <param name="window">The <c>CoreWindow</c> object that is associated with the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC1</c> structure for the swap-chain description.</param>
            <param name="restrictToOutput">The <c>IDXGIOutput</c> interface for the output to restrict content to.</param>
            <returns>The <c>IDXGISwapChain1</c> interface for the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.GetSharedResourceAdapterLuid(System.IntPtr)">
            <summary>
            Identifies the adapter on which a shared resource object was created.
            </summary>
            <param name="resourceHandle">A handle to a shared resource object.</param>
            <returns>A locally unique identifier (LUID) value that identifies the adapter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.RegisterStereoStatusWindow(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
             a locally unique identifier ( LUID) value that identifies the adapter.
            </summary>
            <param name="windowHandle">The handle of the window to send a notification message to when stereo status change occurs.</param>
            <param name="msg">Identifies the notification message to send.</param>
            <param name="cookie">A pointer to a key value that an application can pass to the <c>IDXGIFactory2::UnregisterStereoStatus</c> method to unregister the notification message.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.RegisterStereoStatusEvent(System.IntPtr,System.UInt32@)">
            <summary>
            Registers to receive notification of changes in stereo status by using event signaling.
            </summary>
            <param name="eventHandle">A handle to the event object that the operating system sets when notification of stereo status change occurs.</param>
            <param name="cookie">A pointer to a key value that an application can pass to the <c>IDXGIFactory2::UnregisterStereoStatus</c> method to unregister the notification event.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.UnregisterStereoStatus(System.UInt32)">
            <summary>
            Unregisters a window or an event to stop it from receiving notification when stereo status changes.
            </summary>
            <param name="cookie">A key value for the window or event to unregister.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.RegisterOcclusionStatusWindow(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            Registers an application window to receive notification messages of changes of occlusion status.
            </summary>
            <param name="windowHandle">The handle of the window to send a notification message to when occlusion status change occurs.</param>
            <param name="msg">Identifies the notification message to send.</param>
            <param name="cookie">A key value that an application can pass to the <c>IDXGIFactory2::UnregisterOcclusionStatus</c> method to unregister the notification message.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.RegisterOcclusionStatusEvent(System.IntPtr,System.UInt32@)">
            <summary>
            Registers to receive notification of changes in occlusion status by using event signaling.
            </summary>
            <param name="eventHandle">A handle to the event object that the operating system sets when notification of occlusion status change occurs.</param>
            <param name="cookie">A key value that an application can pass to the IDXGIFactory2::UnregisterOcclusionStatus method to unregister the notification event.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.UnregisterOcclusionStatus(System.UInt32)">
            <summary>
            Unregisters a window or an event to stop it from receiving notification when occlusion status changes.
            </summary>
            <param name="cookie">A key value for the window or event to unregister.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2.CreateSwapChainForComposition(System.Object,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Creates a swap chain that you can use to send Direct3D content into the DirectComposition API or the <c>Windows.UI.Xaml</c> framework to compose in a window.
            </summary>
            <param name="device">The Direct3D device for the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC1</c> structure for the swap-chain description.</param>
            <param name="restrictToOutput">The <c>IDXGIOutput</c> interface for the output to restrict content to.</param>
            <returns>The <c>IDXGISwapChain1</c> interface for the swap chain.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3">
            <summary>
            Enables creating Microsoft DirectX Graphics Infrastructure (DXGI) objects.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.EnumAdapters(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter@)">
            <summary>
            Enumerates the adapters (video cards).
            </summary>
            <param name="index">The index of the adapter to enumerate.</param>
            <param name="adapter">The address of a pointer to an <c>IDXGIAdapter</c> interface at the position specified by the index parameter.</param>
            <returns><value>S_OK</value> if successful; otherwise, returns <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than or equal to the number of adapters in the local system.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.MakeWindowAssociation(System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions)">
            <summary>
            Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).
            </summary>
            <param name="windowHandle">The handle of the window that is to be monitored. This parameter can be <value>Zero</value>; but only if the flags are also 0.</param>
            <param name="options">One or more options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.GetWindowAssociation">
            <summary>
            Get the window through which the user controls the transition to and from full screen.
            </summary>
            <returns>A window handle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.CreateSwapChain(System.Object,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc@)">
            <summary>
            Creates a swap chain.
            </summary>
            <param name="device">A Direct3D device that will write 2D images to the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC</c> structure for the swap-chain description.</param>
            <returns>An <c>IDXGISwapChain</c> interface for the swap chain</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.CreateSoftwareAdapter(System.IntPtr)">
            <summary>
            Create an adapter interface that represents a software adapter.
            </summary>
            <param name="module">Handle to the software adapter's dll.</param>
            <returns>An adapter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.EnumAdapters1(System.UInt32,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1@)">
            <summary>
            Enumerates both adapters (video cards) with or without outputs.
            </summary>
            <param name="index">The index of the adapter to enumerate.</param>
            <param name="adapter">The address of a pointer to an <c>IDXGIAdapter1</c> interface at the position specified by the index parameter.</param>
            <returns><value>S_OK</value> if successful; otherwise, returns <value>DXGI_ERROR_NOT_FOUND</value> if the index is greater than or equal to the number of adapters in the local system.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.IsCurrent">
            <summary>
            Informs an application of the possible need to re-enumerate adapters.
            </summary>
            <returns><value>false</value>, if a new adapter is becoming available or the current adapter is going away. <value>true</value>, no adapter changes.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.IsWindowedStereoEnabled">
            <summary>
            Determines whether to use stereo mode.
            </summary>
            <returns>Indicates whether to use stereo mode. <value>TRUE</value> indicates that you can use stereo mode; otherwise, <value>FALSE</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.CreateSwapChainForWindowHandle(System.Object,System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1@,System.IntPtr,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Creates a swap chain that is associated with an <c>HWND</c> handle to the output window for the swap chain.
            </summary>
            <param name="device">The Direct3D device for the swap chain.</param>
            <param name="hwnd">The <c>HWND</c> handle that is associated with the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC1</c> structure for the swap-chain description.</param>
            <param name="fullscreenDesc">A <c>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</c> structure for the description of a full-screen swap chain.</param>
            <param name="restrictToOutput">The <c>IDXGIOutput</c> interface for the output to restrict content to.</param>
            <returns>The <c>IDXGISwapChain1</c> interface for the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.CreateSwapChainForCoreWindow(System.Object,System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Creates a swap chain that is associated with the <c>CoreWindow</c> object for the output window for the swap chain.
            </summary>
            <param name="device">The Direct3D device for the swap chain.</param>
            <param name="window">The <c>CoreWindow</c> object that is associated with the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC1</c> structure for the swap-chain description.</param>
            <param name="restrictToOutput">The <c>IDXGIOutput</c> interface for the output to restrict content to.</param>
            <returns>The <c>IDXGISwapChain1</c> interface for the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.GetSharedResourceAdapterLuid(System.IntPtr)">
            <summary>
            Identifies the adapter on which a shared resource object was created.
            </summary>
            <param name="resourceHandle">A handle to a shared resource object.</param>
            <returns>A locally unique identifier (LUID) value that identifies the adapter.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.RegisterStereoStatusWindow(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
             a locally unique identifier ( LUID) value that identifies the adapter.
            </summary>
            <param name="windowHandle">The handle of the window to send a notification message to when stereo status change occurs.</param>
            <param name="msg">Identifies the notification message to send.</param>
            <param name="cookie">A pointer to a key value that an application can pass to the <c>IDXGIFactory2::UnregisterStereoStatus</c> method to unregister the notification message.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.RegisterStereoStatusEvent(System.IntPtr,System.UInt32@)">
            <summary>
            Registers to receive notification of changes in stereo status by using event signaling.
            </summary>
            <param name="eventHandle">A handle to the event object that the operating system sets when notification of stereo status change occurs.</param>
            <param name="cookie">A pointer to a key value that an application can pass to the <c>IDXGIFactory2::UnregisterStereoStatus</c> method to unregister the notification event.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.UnregisterStereoStatus(System.UInt32)">
            <summary>
            Unregisters a window or an event to stop it from receiving notification when stereo status changes.
            </summary>
            <param name="cookie">A key value for the window or event to unregister.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.RegisterOcclusionStatusWindow(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            Registers an application window to receive notification messages of changes of occlusion status.
            </summary>
            <param name="windowHandle">The handle of the window to send a notification message to when occlusion status change occurs.</param>
            <param name="msg">Identifies the notification message to send.</param>
            <param name="cookie">A key value that an application can pass to the <c>IDXGIFactory2::UnregisterOcclusionStatus</c> method to unregister the notification message.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.RegisterOcclusionStatusEvent(System.IntPtr,System.UInt32@)">
            <summary>
            Registers to receive notification of changes in occlusion status by using event signaling.
            </summary>
            <param name="eventHandle">A handle to the event object that the operating system sets when notification of occlusion status change occurs.</param>
            <param name="cookie">A key value that an application can pass to the IDXGIFactory2::UnregisterOcclusionStatus method to unregister the notification event.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.UnregisterOcclusionStatus(System.UInt32)">
            <summary>
            Unregisters a window or an event to stop it from receiving notification when occlusion status changes.
            </summary>
            <param name="cookie">A key value for the window or event to unregister.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.CreateSwapChainForComposition(System.Object,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Creates a swap chain that you can use to send Direct3D content into the DirectComposition API or the <c>Windows.UI.Xaml</c> framework to compose in a window.
            </summary>
            <param name="device">The Direct3D device for the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC1</c> structure for the swap-chain description.</param>
            <param name="restrictToOutput">The <c>IDXGIOutput</c> interface for the output to restrict content to.</param>
            <returns>The <c>IDXGISwapChain1</c> interface for the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3.GetCreationOptions">
            <summary>
            Gets the flags that were used when a Microsoft DirectX Graphics Infrastructure (DXGI) object was created.
            </summary>
            <returns>The creation flags.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiKeyedMutex">
            <summary>
            Represents a keyed mutex, which allows exclusive access to a shared resource that is used by multiple devices.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiKeyedMutex.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiKeyedMutex.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiKeyedMutex.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiKeyedMutex.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiKeyedMutex.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiKeyedMutex.AcquireSync(System.UInt64,System.UInt32)">
            <summary>
            Using a key, acquires exclusive rendering access to a shared resource.
            </summary>
            <param name="key">A value that indicates which device to give access to.</param>
            <param name="milliseconds">The time-out interval, in milliseconds.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiKeyedMutex.ReleaseSync(System.UInt64)">
            <summary>
            Using a key, releases exclusive rendering access to a shared resource.
            </summary>
            <param name="key">A value that indicates which device to give access to.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject">
            <summary>
            An <c>IDXGIObject</c> interface is a base interface for all DXGI objects. <c>IDXGIObject</c> supports associating caller-defined (private data) with an object and retrieval of an interface to the parent object.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput">
            <summary>
            An <c>IDXGIOutput</c> interface represents an adapter output (such as a monitor).
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiObject"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.GetDesc">
            <summary>
            Get a description of the output.
            </summary>
            <returns>The output description.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.GetDisplayModeList(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiEnumModes,System.UInt32@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc[])">
            <summary>
            Gets the display modes that match the requested format and other input options.
            </summary>
            <param name="format">The color format.</param>
            <param name="modes">Options for modes to include.</param>
            <param name="numModes">Set <c>desc</c> to <value>null</value> so that <c>numModes</c> returns the number of display modes that match the format and the options. Otherwise, <c>numModes</c> returns the number of display modes returned in <c>desc</c>.</param>
            <param name="desc">A list of display modes. Set to <value>null</value> to get the number of display modes.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.FindClosestMatchingMode(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc@,System.Object)">
            <summary>
            Finds the display mode that most closely matches the requested display mode.
            </summary>
            <param name="modeToMatch">The desired display mode.</param>
            <param name="closestMatch">The mode that most closely matches <c>modeToMatch</c>.</param>
            <param name="concernedDevice">The Direct3D device interface. If this parameter is <value>null</value>, only modes whose format matches that of <c>modeToMatch</c> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.WaitForVBlank">
            <summary>
            Halt a thread until the next vertical blank occurs.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.TakeOwnership(System.Object,System.Boolean)">
            <summary>
            Takes ownership of an output.
            </summary>
            <param name="device">The <see cref="T:IUnknown"/> interface of a device.</param>
            <param name="exclusive">Set to <value>true</value> to enable other threads or applications to take ownership of the device; otherwise, set to <value>false</value>.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.ReleaseOwnership">
            <summary>
            Releases ownership of the output.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.GetGammaControlCapabilities">
            <summary>
            Gets a description of the gamma-control capabilities.
            </summary>
            <returns>A description of the gamma-control capabilities.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.SetGammaControl(JeremyAnsel.DirectX.Dxgi.DxgiGammaControl@)">
            <summary>
            Sets the gamma controls.
            </summary>
            <param name="gammaControl">A <c>DXGI_GAMMA_CONTROL</c> structure that describes the gamma curve to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.GetGammaControl">
            <summary>
            Gets the gamma control settings.
            </summary>
            <returns>An array of gamma control settings.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.SetDisplaySurface(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface)">
            <summary>
            Changes the display mode.
            </summary>
            <param name="scanoutSurface">A surface used for rendering an image to the screen. The surface must have been created as a back buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.GetDisplaySurfaceData(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface)">
            <summary>
            Gets a copy of the current display surface.
            </summary>
            <param name="destination">A destination surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput.GetFrameStatistics">
            <summary>
            Gets statistics about recently rendered frames.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1">
            <summary>
            An <c>IDXGIOutput1</c> interface represents an adapter output (such as a monitor).
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetDesc">
            <summary>
            Get a description of the output.
            </summary>
            <returns>The output description.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetDisplayModeList(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiEnumModes,System.UInt32@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc[])">
            <summary>
            Gets the display modes that match the requested format and other input options.
            </summary>
            <param name="format">The color format.</param>
            <param name="modes">Options for modes to include.</param>
            <param name="numModes">Set <c>desc</c> to <value>null</value> so that <c>numModes</c> returns the number of display modes that match the format and the options. Otherwise, <c>numModes</c> returns the number of display modes returned in <c>desc</c>.</param>
            <param name="desc">A list of display modes. Set to <value>null</value> to get the number of display modes.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.FindClosestMatchingMode(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc@,System.Object)">
            <summary>
            Finds the display mode that most closely matches the requested display mode.
            </summary>
            <param name="modeToMatch">The desired display mode.</param>
            <param name="closestMatch">The mode that most closely matches <c>modeToMatch</c>.</param>
            <param name="concernedDevice">The Direct3D device interface. If this parameter is <value>null</value>, only modes whose format matches that of <c>modeToMatch</c> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.WaitForVBlank">
            <summary>
            Halt a thread until the next vertical blank occurs.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.TakeOwnership(System.Object,System.Boolean)">
            <summary>
            Takes ownership of an output.
            </summary>
            <param name="device">The <see cref="T:IUnknown"/> interface of a device.</param>
            <param name="exclusive">Set to <value>true</value> to enable other threads or applications to take ownership of the device; otherwise, set to <value>false</value>.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.ReleaseOwnership">
            <summary>
            Releases ownership of the output.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetGammaControlCapabilities">
            <summary>
            Gets a description of the gamma-control capabilities.
            </summary>
            <returns>A description of the gamma-control capabilities.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.SetGammaControl(JeremyAnsel.DirectX.Dxgi.DxgiGammaControl@)">
            <summary>
            Sets the gamma controls.
            </summary>
            <param name="gammaControl">A <c>DXGI_GAMMA_CONTROL</c> structure that describes the gamma curve to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetGammaControl">
            <summary>
            Gets the gamma control settings.
            </summary>
            <returns>An array of gamma control settings.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.SetDisplaySurface(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface)">
            <summary>
            Changes the display mode.
            </summary>
            <param name="scanoutSurface">A surface used for rendering an image to the screen. The surface must have been created as a back buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetDisplaySurfaceData(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface)">
            <summary>
            Gets a copy of the current display surface.
            </summary>
            <param name="destination">A destination surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetFrameStatistics">
            <summary>
            Gets statistics about recently rendered frames.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetDisplayModeList1(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiEnumModes,System.UInt32@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1[])">
            <summary>
            Gets the display modes that match the requested format and other input options.
            </summary>
            <param name="format">The color format.</param>
            <param name="modes">Options for modes to include.</param>
            <param name="numModes">Set <c>desc</c> to <value>null</value> so that <c>numModes</c> returns the number of display modes that match the format and the options. Otherwise, <c>numModes</c> returns the number of display modes returned in <c>desc</c>.</param>
            <param name="desc">A list of display modes. Set to <value>null</value> to get the number of display modes.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.FindClosestMatchingMode1(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1@,System.Object)">
            <summary>
            Finds the display mode that most closely matches the requested display mode.
            </summary>
            <param name="modeToMatch">The desired display mode.</param>
            <param name="closestMatch">The mode that most closely matches <c>modeToMatch</c>.</param>
            <param name="concernedDevice">The Direct3D device interface. If this parameter is <value>null</value>, only modes whose format matches that of <c>modeToMatch</c> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.GetDisplaySurfaceData1(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource)">
            <summary>
            Copies the display surface (front buffer) to a user-provided resource.
            </summary>
            <param name="destination">A resource interface that represents the resource to which copies the display surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1.DuplicateOutput(System.Object)">
            <summary>
            Creates a desktop duplication interface from the <c>IDXGIOutput1</c> interface that represents an adapter output.
            </summary>
            <param name="device">The Direct3D device interface that you can use to process the desktop image. This device must be created from the adapter to which the output is connected.</param>
            <returns>The new <c>IDXGIOutputDuplication</c> interface.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2">
            <summary>
            Represents an adapter output (such as a monitor). The <c>IDXGIOutput2</c> interface exposes a method to check for multi-plane overlay support on the primary output adapter.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetDesc">
            <summary>
            Get a description of the output.
            </summary>
            <returns>The output description.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetDisplayModeList(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiEnumModes,System.UInt32@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc[])">
            <summary>
            Gets the display modes that match the requested format and other input options.
            </summary>
            <param name="format">The color format.</param>
            <param name="modes">Options for modes to include.</param>
            <param name="numModes">Set <c>desc</c> to <value>null</value> so that <c>numModes</c> returns the number of display modes that match the format and the options. Otherwise, <c>numModes</c> returns the number of display modes returned in <c>desc</c>.</param>
            <param name="desc">A list of display modes. Set to <value>null</value> to get the number of display modes.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.FindClosestMatchingMode(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc@,System.Object)">
            <summary>
            Finds the display mode that most closely matches the requested display mode.
            </summary>
            <param name="modeToMatch">The desired display mode.</param>
            <param name="closestMatch">The mode that most closely matches <c>modeToMatch</c>.</param>
            <param name="concernedDevice">The Direct3D device interface. If this parameter is <value>null</value>, only modes whose format matches that of <c>modeToMatch</c> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.WaitForVBlank">
            <summary>
            Halt a thread until the next vertical blank occurs.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.TakeOwnership(System.Object,System.Boolean)">
            <summary>
            Takes ownership of an output.
            </summary>
            <param name="device">The <see cref="T:IUnknown"/> interface of a device.</param>
            <param name="exclusive">Set to <value>true</value> to enable other threads or applications to take ownership of the device; otherwise, set to <value>false</value>.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.ReleaseOwnership">
            <summary>
            Releases ownership of the output.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetGammaControlCapabilities">
            <summary>
            Gets a description of the gamma-control capabilities.
            </summary>
            <returns>A description of the gamma-control capabilities.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.SetGammaControl(JeremyAnsel.DirectX.Dxgi.DxgiGammaControl@)">
            <summary>
            Sets the gamma controls.
            </summary>
            <param name="gammaControl">A <c>DXGI_GAMMA_CONTROL</c> structure that describes the gamma curve to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetGammaControl">
            <summary>
            Gets the gamma control settings.
            </summary>
            <returns>An array of gamma control settings.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.SetDisplaySurface(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface)">
            <summary>
            Changes the display mode.
            </summary>
            <param name="scanoutSurface">A surface used for rendering an image to the screen. The surface must have been created as a back buffer.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetDisplaySurfaceData(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface)">
            <summary>
            Gets a copy of the current display surface.
            </summary>
            <param name="destination">A destination surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetFrameStatistics">
            <summary>
            Gets statistics about recently rendered frames.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetDisplayModeList1(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiEnumModes,System.UInt32@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1[])">
            <summary>
            Gets the display modes that match the requested format and other input options.
            </summary>
            <param name="format">The color format.</param>
            <param name="modes">Options for modes to include.</param>
            <param name="numModes">Set <c>desc</c> to <value>null</value> so that <c>numModes</c> returns the number of display modes that match the format and the options. Otherwise, <c>numModes</c> returns the number of display modes returned in <c>desc</c>.</param>
            <param name="desc">A list of display modes. Set to <value>null</value> to get the number of display modes.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.FindClosestMatchingMode1(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1@,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1@,System.Object)">
            <summary>
            Finds the display mode that most closely matches the requested display mode.
            </summary>
            <param name="modeToMatch">The desired display mode.</param>
            <param name="closestMatch">The mode that most closely matches <c>modeToMatch</c>.</param>
            <param name="concernedDevice">The Direct3D device interface. If this parameter is <value>null</value>, only modes whose format matches that of <c>modeToMatch</c> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.GetDisplaySurfaceData1(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource)">
            <summary>
            Copies the display surface (front buffer) to a user-provided resource.
            </summary>
            <param name="destination">A resource interface that represents the resource to which copies the display surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.DuplicateOutput(System.Object)">
            <summary>
            Creates a desktop duplication interface from the <c>IDXGIOutput1</c> interface that represents an adapter output.
            </summary>
            <param name="device">The Direct3D device interface that you can use to process the desktop image. This device must be created from the adapter to which the output is connected.</param>
            <returns>The new <c>IDXGIOutputDuplication</c> interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2.SupportsOverlays">
            <summary>
            Queries an adapter output for multi-plane overlay support.
            </summary>
            <returns><value>true</value> if the output adapter is the primary adapter and it supports multi-plane overlays, otherwise returns <value>false</value>.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource">
            <summary>
            An <c>IDXGIResource</c> interface allows resource sharing and identifies the memory that a resource resides in.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource.GetSharedHandle">
            <summary>
            Gets the handle to a shared resource.
            </summary>
            <returns>A handle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource.GetUsage">
            <summary>
            Get the expected resource usage.
            </summary>
            <returns>A usage flag.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource.SetEvictionPriority(JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority)">
            <summary>
            Set the priority for evicting the resource from memory.
            </summary>
            <param name="evictionPriority">The eviction priority, which determines when a resource can be evicted from memory.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource.GetEvictionPriority">
            <summary>
            Get the eviction priority.
            </summary>
            <returns>The eviction priority, which determines when a resource can be evicted from memory.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1">
            <summary>
            An <c>IDXGIResource1</c> interface extends the <c>IDXGIResource</c> interface by adding support for creating a sub-resource surface object and for creating a handle to a shared resource.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.GetSharedHandle">
            <summary>
            Gets the handle to a shared resource.
            </summary>
            <returns>A handle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.GetUsage">
            <summary>
            Get the expected resource usage.
            </summary>
            <returns>A usage flag.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.SetEvictionPriority(JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority)">
            <summary>
            Set the priority for evicting the resource from memory.
            </summary>
            <param name="evictionPriority">The eviction priority, which determines when a resource can be evicted from memory.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.GetEvictionPriority">
            <summary>
            Get the eviction priority.
            </summary>
            <returns>The eviction priority, which determines when a resource can be evicted from memory.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.CreateSubresourceSurface(System.UInt32)">
            <summary>
            Creates a sub-resource surface object.
            </summary>
            <param name="index">The index of the sub-resource surface object to enumerate.</param>
            <returns>A <c>IDXGISurface2</c> interface that represents the created sub-resource surface object at the position specified.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiResource1.CreateSharedHandle(System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiSharedResourceAccess,System.String)">
            <summary>
            Creates a handle to a shared resource. You can then use the returned handle with multiple Direct3D devices.
            </summary>
            <param name="securityAttributes">A pointer to a <c>SECURITY_ATTRIBUTES</c> structure that contains two separate but related data members: an optional security descriptor, and a Boolean value that determines whether child processes can inherit the returned handle.</param>
            <param name="access">The requested access rights to the resource.</param>
            <param name="name">The name of the resource to share. The name is limited to <value>MAX_PATH</value> characters. Name comparison is case sensitive.</param>
            <returns>The <c>NT HANDLE</c> value to the resource to share. You can use this handle in calls to access the resource.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface">
            <summary>
            The <c>IDXGISurface</c> interface implements methods for image-data objects.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface.GetDesc">
            <summary>
            Get a description of the surface.
            </summary>
            <returns>The surface description.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface.Map(JeremyAnsel.DirectX.Dxgi.DxgiMappedRect@,JeremyAnsel.DirectX.Dxgi.DxgiMapOptions)">
            <summary>
            Get a pointer to the data contained in the surface, and deny GPU access to the surface.
            </summary>
            <param name="lockedRect">The surface data.</param>
            <param name="options">CPU read-write flags. These flags can be combined with a logical OR.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface.Unmap">
            <summary>
            Invalidate the pointer to the surface retrieved by <c>IDXGISurface::Map</c> and re-enable GPU access to the resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1">
            <summary>
            The <c>IDXGISurface1</c> interface extends the <c>IDXGISurface</c> by adding support for using Windows Graphics Device Interface (GDI) to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.GetDesc">
            <summary>
            Get a description of the surface.
            </summary>
            <returns>The surface description.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.Map(JeremyAnsel.DirectX.Dxgi.DxgiMappedRect@,JeremyAnsel.DirectX.Dxgi.DxgiMapOptions)">
            <summary>
            Get a pointer to the data contained in the surface, and deny GPU access to the surface.
            </summary>
            <param name="lockedRect">The surface data.</param>
            <param name="options">CPU read-write flags. These flags can be combined with a logical OR.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.Unmap">
            <summary>
            Invalidate the pointer to the surface retrieved by <c>IDXGISurface::Map</c> and re-enable GPU access to the resource.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.GetDC(System.Boolean)">
            <summary>
            Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).
            </summary>
            <param name="discard">A value indicating whether to preserve Direct3D contents in the GDI DC.</param>
            <returns>An HDC handle that represents the current device context for GDI rendering.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1.ReleaseDC(JeremyAnsel.DirectX.Dxgi.DxgiRect@)">
            <summary>
            Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.
            </summary>
            <param name="dirtyRect">A RECT structure that identifies the dirty region of the surface. A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve. This area is used as a performance hint to graphics subsystem in certain scenarios. Do not use this parameter to restrict rendering to the specified rectangular region.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2">
            <summary>
            The <c>IDXGISurface2</c> interface extends the <c>IDXGISurface1</c> interface by adding support for sub-resource surfaces and getting a handle to a shared resource.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.GetDesc">
            <summary>
            Get a description of the surface.
            </summary>
            <returns>The surface description.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.Map(JeremyAnsel.DirectX.Dxgi.DxgiMappedRect@,JeremyAnsel.DirectX.Dxgi.DxgiMapOptions)">
            <summary>
            Get a pointer to the data contained in the surface, and deny GPU access to the surface.
            </summary>
            <param name="lockedRect">The surface data.</param>
            <param name="options">CPU read-write flags. These flags can be combined with a logical OR.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.Unmap">
            <summary>
            Invalidate the pointer to the surface retrieved by <c>IDXGISurface::Map</c> and re-enable GPU access to the resource.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.GetDC(System.Boolean)">
            <summary>
            Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).
            </summary>
            <param name="discard">A value indicating whether to preserve Direct3D contents in the GDI DC.</param>
            <returns>An HDC handle that represents the current device context for GDI rendering.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.ReleaseDC(JeremyAnsel.DirectX.Dxgi.DxgiRect@)">
            <summary>
            Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.
            </summary>
            <param name="dirtyRect">A RECT structure that identifies the dirty region of the surface. A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve. This area is used as a performance hint to graphics subsystem in certain scenarios. Do not use this parameter to restrict rendering to the specified rectangular region.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2.GetResource(System.Guid@,System.Object@,System.UInt32@)">
            <summary>
            Gets the parent resource and sub-resource index that support a sub-resource surface.
            </summary>
            <param name="riid">The globally unique identifier (GUID) of the requested interface type.</param>
            <param name="parentResource">A pointer to the parent resource object for the sub-resource surface.</param>
            <param name="subresourceIndex">A variable that receives the index of the sub-resource surface.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain">
            <summary>
            An <c>IDXGISwapChain</c> interface implements one or more surfaces for storing rendered data before presenting it to an output.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiDeviceSubObject"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.Present(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions)">
            <summary>
            Presents a rendered image to the user.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">The swap-chain presentation options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.GetBuffer(System.UInt32,System.Guid@)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <param name="riid">The type of interface used to manipulate the buffer.</param>
            <returns>A pointer to a back-buffer interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.SetFullscreenState(System.Boolean,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Sets the display state to windowed or full screen.
            </summary>
            <param name="fullscreen">A value indicating whether to set the display state to windowed or full screen.</param>
            <param name="target">A pointer to an <c>IDXGIOutput</c> interface for the output target that contains the swap chain.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.GetFullscreenState(System.Boolean@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput@)">
            <summary>
            Get the state associated with full-screen mode.
            </summary>
            <param name="fullscreen">A value indicating whether to set the display state to windowed or full screen.</param>
            <param name="target">The output target when the mode is full screen.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.GetDesc">
            <summary>
            Get a description of the swap chain.
            </summary>
            <returns>The swap-chain description.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.ResizeBuffers(System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions)">
            <summary>
            Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.
            </summary>
            <param name="bufferCount">The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain.</param>
            <param name="width">New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window.</param>
            <param name="height">New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window.</param>
            <param name="format">A <c>DXGI_FORMAT</c>-typed value for the new format of the back buffer. Set this value to <value>DXGI_FORMAT_UNKNOWN</value> to preserve the existing format of the back buffer.</param>
            <param name="options">The options for swap-chain behavior.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.ResizeTarget(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc@)">
            <summary>
            Resizes the output target.
            </summary>
            <param name="targetParameters">A <c>DXGI_MODE_DESC</c> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is <value>DXGI_FORMAT_UNKNOWN</value>, ResizeTarget uses the existing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.GetContainingOutput">
            <summary>
            Get the output (the display monitor) that contains the majority of the client area of the target window.
            </summary>
            <returns>The output interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.GetFrameStatistics">
            <summary>
            Gets performance statistics about the last render frame.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain.GetLastPresentCount">
            <summary>
            Gets the number of times that <c>IDXGISwapChain::Present</c> or <c>IDXGISwapChain1::Present1</c> has been called.
            </summary>
            <returns>The number of calls.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1">
            <summary>
            Provides presentation capabilities that are enhanced from <c>IDXGISwapChain</c>. These presentation capabilities consist of specifying dirty rectangles and scroll rectangle to optimize the presentation.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.Present(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions)">
            <summary>
            Presents a rendered image to the user.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">The swap-chain presentation options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetBuffer(System.UInt32,System.Guid@)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <param name="riid">The type of interface used to manipulate the buffer.</param>
            <returns>A pointer to a back-buffer interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.SetFullscreenState(System.Boolean,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Sets the display state to windowed or full screen.
            </summary>
            <param name="fullscreen">A value indicating whether to set the display state to windowed or full screen.</param>
            <param name="target">A pointer to an <c>IDXGIOutput</c> interface for the output target that contains the swap chain.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetFullscreenState(System.Boolean@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput@)">
            <summary>
            Get the state associated with full-screen mode.
            </summary>
            <param name="fullscreen">A value indicating whether to set the display state to windowed or full screen.</param>
            <param name="target">The output target when the mode is full screen.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetDesc">
            <summary>
            Get a description of the swap chain.
            </summary>
            <returns>The swap-chain description.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.ResizeBuffers(System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions)">
            <summary>
            Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.
            </summary>
            <param name="bufferCount">The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain.</param>
            <param name="width">New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window.</param>
            <param name="height">New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window.</param>
            <param name="format">A <c>DXGI_FORMAT</c>-typed value for the new format of the back buffer. Set this value to <value>DXGI_FORMAT_UNKNOWN</value> to preserve the existing format of the back buffer.</param>
            <param name="options">The options for swap-chain behavior.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.ResizeTarget(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc@)">
            <summary>
            Resizes the output target.
            </summary>
            <param name="targetParameters">A <c>DXGI_MODE_DESC</c> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is <value>DXGI_FORMAT_UNKNOWN</value>, ResizeTarget uses the existing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetContainingOutput">
            <summary>
            Get the output (the display monitor) that contains the majority of the client area of the target window.
            </summary>
            <returns>The output interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetFrameStatistics">
            <summary>
            Gets performance statistics about the last render frame.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetLastPresentCount">
            <summary>
            Gets the number of times that <c>IDXGISwapChain::Present</c> or <c>IDXGISwapChain1::Present1</c> has been called.
            </summary>
            <returns>The number of calls.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetDesc1">
            <summary>
            Gets a description of the swap chain.
            </summary>
            <returns>A <c>DXGI_SWAP_CHAIN_DESC1</c> structure that describes the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetFullscreenDesc">
            <summary>
            Gets a description of a full-screen swap chain.
            </summary>
            <returns>A <c>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</c> structure that describes the full-screen swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetWindowHandle">
            <summary>
            Retrieves the underlying <c>HWND</c> for this swap-chain object.
            </summary>
            <returns>The <c>HWND</c> for the swap-chain object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetCoreWindow(System.Guid@)">
            <summary>
            Retrieves the underlying <c>CoreWindow</c> object for this swap-chain object.
            </summary>
            <param name="riid">The globally unique identifier (GUID) of the <c>CoreWindow</c> object.</param>
            <returns>A pointer to the <c>CoreWindow</c> object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.Present1(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions,JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters@)">
            <summary>
            Presents a frame on the display screen.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">An integer value that contains swap-chain presentation options.</param>
            <param name="parameters">A <c>DXGI_PRESENT_PARAMETERS</c> structure that describes updated rectangles and scroll information of the frame to present.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.IsTemporaryMonoSupported">
            <summary>
            Determines whether a swap chain supports “temporary mono.”
            </summary>
            <returns>Indicates whether to use the swap chain in temporary mono mode. <value>true</value> indicates that you can use temporary-mono mode; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetRestrictToOutput">
            <summary>
            Gets the output (the display monitor) to which you can restrict the contents of a present operation.
            </summary>
            <returns>The <c>IDXGIOutput</c> interface for the restrict-to output.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.SetBackgroundColor(JeremyAnsel.DirectX.Dxgi.DxgiColorRgba@)">
            <summary>
            Changes the background color of the swap chain.
            </summary>
            <param name="color">A <c>DXGI_RGBA</c> structure that specifies the background color to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetBackgroundColor">
            <summary>
            Retrieves the background color of the swap chain.
            </summary>
            <returns>The background color of the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.SetRotation(JeremyAnsel.DirectX.Dxgi.DxgiModeRotation)">
            <summary>
            Sets the rotation of the back buffers for the swap chain.
            </summary>
            <param name="rotation">A <c>DXGI_MODE_ROTATION</c>-typed value that specifies how to set the rotation of the back buffers for the swap chain.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1.GetRotation">
            <summary>
            Gets the rotation of the back buffers for the swap chain.
            </summary>
            <returns>A <c>DXGI_MODE_ROTATION</c>-typed value that specifies the rotation of the back buffers for the swap chain.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2">
            <summary>
            Extends <c>IDXGISwapChain1</c> with methods to support swap back buffer scaling and lower-latency swap chains.
            </summary>
            <remarks>Inherited from <see cref="T:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1"/></remarks>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.SetPrivateData(System.Guid@,System.UInt32,System.Byte[])">
            <summary>
            Sets application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="dataSize">The size of the object's data.</param>
            <param name="data">A pointer to the object's data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.SetPrivateDataInterface(System.Guid@,System.Object)">
            <summary>
            Set an interface in the object's private data.
            </summary>
            <param name="name">A GUID identifying the interface.</param>
            <param name="unknown">The interface to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetPrivateData(System.Guid@,System.UInt32@,System.Byte[])">
            <summary>
            Get a pointer to the object's data.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <param name="dataSize">The size of the data.</param>
            <param name="data">Pointer to the data.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetParent(System.Guid@)">
            <summary>
            Gets the parent of the object.
            </summary>
            <param name="riid">The ID of the requested interface.</param>
            <returns>The address of a pointer to the parent object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetDevice(System.Guid@)">
            <summary>
            Retrieves the device.
            </summary>
            <param name="riid">The reference id for the device.</param>
            <returns>The address of a pointer to the device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.Present(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions)">
            <summary>
            Presents a rendered image to the user.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">The swap-chain presentation options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetBuffer(System.UInt32,System.Guid@)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <param name="riid">The type of interface used to manipulate the buffer.</param>
            <returns>A pointer to a back-buffer interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.SetFullscreenState(System.Boolean,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Sets the display state to windowed or full screen.
            </summary>
            <param name="fullscreen">A value indicating whether to set the display state to windowed or full screen.</param>
            <param name="target">A pointer to an <c>IDXGIOutput</c> interface for the output target that contains the swap chain.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetFullscreenState(System.Boolean@,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput@)">
            <summary>
            Get the state associated with full-screen mode.
            </summary>
            <param name="fullscreen">A value indicating whether to set the display state to windowed or full screen.</param>
            <param name="target">The output target when the mode is full screen.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetDesc">
            <summary>
            Get a description of the swap chain.
            </summary>
            <returns>The swap-chain description.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.ResizeBuffers(System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions)">
            <summary>
            Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.
            </summary>
            <param name="bufferCount">The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain.</param>
            <param name="width">New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window.</param>
            <param name="height">New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window.</param>
            <param name="format">A <c>DXGI_FORMAT</c>-typed value for the new format of the back buffer. Set this value to <value>DXGI_FORMAT_UNKNOWN</value> to preserve the existing format of the back buffer.</param>
            <param name="options">The options for swap-chain behavior.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.ResizeTarget(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc@)">
            <summary>
            Resizes the output target.
            </summary>
            <param name="targetParameters">A <c>DXGI_MODE_DESC</c> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is <value>DXGI_FORMAT_UNKNOWN</value>, ResizeTarget uses the existing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetContainingOutput">
            <summary>
            Get the output (the display monitor) that contains the majority of the client area of the target window.
            </summary>
            <returns>The output interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetFrameStatistics">
            <summary>
            Gets performance statistics about the last render frame.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetLastPresentCount">
            <summary>
            Gets the number of times that <c>IDXGISwapChain::Present</c> or <c>IDXGISwapChain1::Present1</c> has been called.
            </summary>
            <returns>The number of calls.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetDesc1">
            <summary>
            Gets a description of the swap chain.
            </summary>
            <returns>A <c>DXGI_SWAP_CHAIN_DESC1</c> structure that describes the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetFullscreenDesc">
            <summary>
            Gets a description of a full-screen swap chain.
            </summary>
            <returns>A <c>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</c> structure that describes the full-screen swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetWindowHandle">
            <summary>
            Retrieves the underlying <c>HWND</c> for this swap-chain object.
            </summary>
            <returns>The <c>HWND</c> for the swap-chain object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetCoreWindow(System.Guid@)">
            <summary>
            Retrieves the underlying <c>CoreWindow</c> object for this swap-chain object.
            </summary>
            <param name="riid">The globally unique identifier (GUID) of the <c>CoreWindow</c> object.</param>
            <returns>A pointer to the <c>CoreWindow</c> object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.Present1(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions,JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters@)">
            <summary>
            Presents a frame on the display screen.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">An integer value that contains swap-chain presentation options.</param>
            <param name="parameters">A <c>DXGI_PRESENT_PARAMETERS</c> structure that describes updated rectangles and scroll information of the frame to present.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.IsTemporaryMonoSupported">
            <summary>
            Determines whether a swap chain supports “temporary mono.”
            </summary>
            <returns>Indicates whether to use the swap chain in temporary mono mode. <value>true</value> indicates that you can use temporary-mono mode; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetRestrictToOutput">
            <summary>
            Gets the output (the display monitor) to which you can restrict the contents of a present operation.
            </summary>
            <returns>The <c>IDXGIOutput</c> interface for the restrict-to output.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.SetBackgroundColor(JeremyAnsel.DirectX.Dxgi.DxgiColorRgba@)">
            <summary>
            Changes the background color of the swap chain.
            </summary>
            <param name="color">A <c>DXGI_RGBA</c> structure that specifies the background color to set.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetBackgroundColor">
            <summary>
            Retrieves the background color of the swap chain.
            </summary>
            <returns>The background color of the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.SetRotation(JeremyAnsel.DirectX.Dxgi.DxgiModeRotation)">
            <summary>
            Sets the rotation of the back buffers for the swap chain.
            </summary>
            <param name="rotation">A <c>DXGI_MODE_ROTATION</c>-typed value that specifies how to set the rotation of the back buffers for the swap chain.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetRotation">
            <summary>
            Gets the rotation of the back buffers for the swap chain.
            </summary>
            <returns>A <c>DXGI_MODE_ROTATION</c>-typed value that specifies the rotation of the back buffers for the swap chain.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.SetSourceSize(System.UInt32,System.UInt32)">
            <summary>
            Sets the source region to be used for the swap chain.
            </summary>
            <param name="width">Source width to use for the swap chain. This value must be greater than zero, and must be less than or equal to the overall width of the swap chain.</param>
            <param name="height">Source height to use for the swap chain. This value must be greater than zero, and must be less than or equal to the overall height of the swap chain.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetSourceSize(System.UInt32@,System.UInt32@)">
            <summary>
            Gets the source region used for the swap chain.
            </summary>
            <param name="width">The current width of the source region of the swap chain. This value can range from 1 to the overall width of the swap chain.</param>
            <param name="height">The current height of the source region of the swap chain. This value can range from 1 to the overall height of the swap chain.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.SetMaximumFrameLatency(System.UInt32)">
            <summary>
            Sets the number of frames that the swap chain is allowed to queue for rendering.
            </summary>
            <param name="maxLatency">The maximum number of back buffer frames that will be queued for the swap chain. This value is 1 by default, but should be set to 2 if the scene takes longer than it takes for one vertical refresh to draw.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetMaximumFrameLatency">
            <summary>
            Gets the number of frames that the swap chain is allowed to queue for rendering.
            </summary>
            <returns>The maximum number of back buffer frames that will be queued for the swap chain. This value is 1 by default, but should be set to 2 if the scene takes longer than it takes for one vertical refresh to draw.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetFrameLatencyWaitableObject">
            <summary>
            Returns a waitable handle that signals when the DXGI adapter has finished presenting a new frame.
            </summary>
            <returns>A handle to the waitable object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.SetMatrixTransform(JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F@)">
            <summary>
            Sets the transform matrix that will be applied to a composition swap chain upon the next present.
            </summary>
            <param name="matrix">The transform matrix to use for swap chain scaling and translation.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2.GetMatrixTransform">
            <summary>
            Gets the transform matrix that will be applied to a composition swap chain upon the next present.
            </summary>
            <returns>The transform matrix currently used for swap chain scaling and translation.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter">
            <summary>
            The <c>IDXGIAdapter</c> interface represents a display sub-system (including one or more GPU's, DACs and video memory).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapter.adapter">
            <summary>
            The DXGI adapter interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter"/> class.
            </summary>
            <param name="adapter">A DXGI adapter interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapter.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapter.Description">
            <summary>
            Gets a DXGI 1.0 description of an adapter (or video card).
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter.EnumOutputs">
            <summary>
            Enumerate adapter (video card) outputs.
            </summary>
            <returns>An IEnumerable of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter.GetParent">
            <summary>
            Gets the parent of the object.
            </summary>
            <returns>The parent of the object.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter1">
            <summary>
            The <c>IDXGIAdapter1</c> interface represents a display sub-system (including one or more GPU's, DACs and video memory).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapter1.adapter">
            <summary>
            The DXGI adapter interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter1.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter1)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter1"/> class.
            </summary>
            <param name="adapter">A DXGI adapter interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapter1.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapter1.Description">
            <summary>
            Gets a DXGI 1.1 description of an adapter (or video card).
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter1.EnumOutputs">
            <summary>
            Enumerate adapter (video card) outputs.
            </summary>
            <returns>An IEnumerable of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter1.GetParent">
            <summary>
            Gets the parent of the object.
            </summary>
            <returns>The parent of the object.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter2">
            <summary>
            The <c>IDXGIAdapter2</c> interface represents a display sub-system, which includes one or more GPUs, DACs, and video memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapter2.adapter">
            <summary>
            The DXGI adapter interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter2.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter2"/> class.
            </summary>
            <param name="adapter">A DXGI adapter interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapter2.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapter2.Description">
            <summary>
            Gets a DXGI 1.2 description of an adapter (or video card).
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter2.EnumOutputs">
            <summary>
            Enumerate adapter (video card) outputs.
            </summary>
            <returns>An IEnumerable of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter2.GetParent">
            <summary>
            Gets the parent of the object.
            </summary>
            <returns>The parent of the object.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter3">
            <summary>
            The <c>IDXGIAdapter2</c> interface represents a display sub-system, which includes one or more GPUs, DACs, and video memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapter3.adapter">
            <summary>
            The DXGI adapter interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter3.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiAdapter2)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter3"/> class.
            </summary>
            <param name="adapter">A DXGI adapter interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapter3.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapter3.Description">
            <summary>
            Gets a DXGI 1.2 description of an adapter (or video card).
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter3.EnumOutputs">
            <summary>
            Enumerate adapter (video card) outputs.
            </summary>
            <returns>An IEnumerable of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapter3.GetParent">
            <summary>
            Gets the parent of the object.
            </summary>
            <returns>The parent of the object.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiDevice">
            <summary>
            An <c>IDXGIDevice</c> interface implements a derived class for DXGI objects that produce image data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiDevice.device">
            <summary>
            The DXGI device interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiDevice"/> class.
            </summary>
            <param name="device">A device interface which implements the <c>IDxgiDevice</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiDevice.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice.GetAdapter">
            <summary>
            Returns the adapter for the specified device.
            </summary>
            <returns>The adapter for the specified device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice.QueryResourceResidency(JeremyAnsel.DirectX.Dxgi.DxgiResource[])">
            <summary>
            Gets the residency status of an array of resources.
            </summary>
            <param name="resources">An array of <c>IDXGIResource</c> interfaces.</param>
            <returns>An array of <c>DXGI_RESIDENCY</c> flags. Each element describes the residency status for corresponding element in the <c>resources</c> argument array.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiDevice1">
            <summary>
            An <c>IDXGIDevice1</c> interface implements a derived class for DXGI objects that produce image data.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiDevice1.device">
            <summary>
            The DXGI device interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiDevice1"/> class.
            </summary>
            <param name="device">A device interface which implements the <c>IDxgiDevice1</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiDevice1.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiDevice1.MaximumFrameLatency">
            <summary>
            Gets or sets the number of frames that the system is allowed to queue for rendering.
            </summary>
            <returns>The number of frames that can be queued for render. This value defaults to 3, but can range from 1 to 16.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice1.GetAdapter">
            <summary>
            Returns the adapter for the specified device.
            </summary>
            <returns>The adapter for the specified device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice1.QueryResourceResidency(JeremyAnsel.DirectX.Dxgi.DxgiResource1[])">
            <summary>
            Gets the residency status of an array of resources.
            </summary>
            <param name="resources">An array of <c>IDXGIResource</c> interfaces.</param>
            <returns>An array of <c>DXGI_RESIDENCY</c> flags. Each element describes the residency status for corresponding element in the <c>resources</c> argument array.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiDevice2">
            <summary>
            The <c>IDXGIDevice2</c> interface implements a derived class for DXGI objects that produce image data. The interface exposes methods to block CPU processing until the GPU completes processing, and to offer resources to the operating system.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiDevice2.device">
            <summary>
            The DXGI device interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice2.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiDevice2"/> class.
            </summary>
            <param name="device">A device interface which implements the <c>IDxgiDevice2</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiDevice2.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiDevice2.MaximumFrameLatency">
            <summary>
            Gets or sets the number of frames that the system is allowed to queue for rendering.
            </summary>
            <returns>The number of frames that can be queued for render. This value defaults to 3, but can range from 1 to 16.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice2.GetAdapter">
            <summary>
            Returns the adapter for the specified device.
            </summary>
            <returns>The adapter for the specified device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice2.QueryResourceResidency(JeremyAnsel.DirectX.Dxgi.DxgiResource2[])">
            <summary>
            Gets the residency status of an array of resources.
            </summary>
            <param name="resources">An array of <c>IDXGIResource</c> interfaces.</param>
            <returns>An array of <c>DXGI_RESIDENCY</c> flags. Each element describes the residency status for corresponding element in the <c>resources</c> argument array.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice2.OfferResources(JeremyAnsel.DirectX.Dxgi.DxgiResource2[],JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority)">
            <summary>
            Allows the operating system to free the video memory of resources by discarding their content.
            </summary>
            <param name="resources">An array of pointers to <c>IDXGIResource</c> interfaces for the resources to offer.</param>
            <param name="priority">A <c>DXGI_OFFER_RESOURCE_PRIORITY</c>-typed value that indicates how valuable data is.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice2.ReclaimResources(JeremyAnsel.DirectX.Dxgi.DxgiResource2[])">
            <summary>
            Restores access to resources that were previously offered by calling <c>IDXGIDevice2::OfferResources</c>.
            </summary>
            <param name="resources">An array of pointers to <c>IDXGIResource</c> interfaces for the resources to reclaim.</param>
            <returns>A pointer to an array that receives Boolean values. Each value in the array corresponds to a resource at the same index that the ppResources parameter specifies. The runtime sets each Boolean value to <value>TRUE</value> if the corresponding resource’s content was discarded and is now undefined, or to <value>FALSE</value> if the corresponding resource’s old content is still intact. The caller can pass in <value>NULL</value>, if the caller intends to fill the resources with new content regardless of whether the old content was discarded.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiDevice3">
            <summary>
            The <c>IDXGIDevice3</c> interface implements a derived class for DXGI objects that produce image data. The interface exposes a method to trim graphics memory usage by the DXGI device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiDevice3.device">
            <summary>
            The DXGI device interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice3.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiDevice3"/> class.
            </summary>
            <param name="device">A device interface which implements the <c>IDxgiDevice3</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiDevice3.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiDevice3.MaximumFrameLatency">
            <summary>
            Gets or sets the number of frames that the system is allowed to queue for rendering.
            </summary>
            <returns>The number of frames that can be queued for render. This value defaults to 3, but can range from 1 to 16.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice3.GetAdapter">
            <summary>
            Returns the adapter for the specified device.
            </summary>
            <returns>The adapter for the specified device.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice3.QueryResourceResidency(JeremyAnsel.DirectX.Dxgi.DxgiResource3[])">
            <summary>
            Gets the residency status of an array of resources.
            </summary>
            <param name="resources">An array of <c>IDXGIResource</c> interfaces.</param>
            <returns>An array of <c>DXGI_RESIDENCY</c> flags. Each element describes the residency status for corresponding element in the <c>resources</c> argument array.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice3.OfferResources(JeremyAnsel.DirectX.Dxgi.DxgiResource3[],JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority)">
            <summary>
            Allows the operating system to free the video memory of resources by discarding their content.
            </summary>
            <param name="resources">An array of pointers to <c>IDXGIResource</c> interfaces for the resources to offer.</param>
            <param name="priority">A <c>DXGI_OFFER_RESOURCE_PRIORITY</c>-typed value that indicates how valuable data is.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice3.ReclaimResources(JeremyAnsel.DirectX.Dxgi.DxgiResource3[])">
            <summary>
            Restores access to resources that were previously offered by calling <c>IDXGIDevice2::OfferResources</c>.
            </summary>
            <param name="resources">An array of pointers to <c>IDXGIResource</c> interfaces for the resources to reclaim.</param>
            <returns>A pointer to an array that receives Boolean values. Each value in the array corresponds to a resource at the same index that the ppResources parameter specifies. The runtime sets each Boolean value to <value>TRUE</value> if the corresponding resource’s content was discarded and is now undefined, or to <value>FALSE</value> if the corresponding resource’s old content is still intact. The caller can pass in <value>NULL</value>, if the caller intends to fill the resources with new content regardless of whether the old content was discarded.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDevice3.Trim">
            <summary>
            Trims the graphics memory allocated by the <c>IDXGIDevice3</c> DXGI device on the app's behalf.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiDeviceSubObject">
            <summary>
            Inherited from objects that are tied to the device so that they can retrieve a pointer to it.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiDeviceSubObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiDeviceSubObject"/> class.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiError">
            <summary>
            DXGI error codes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.InvalidCall">
            <summary>
            The application made a call that is invalid. Either the parameters of the call or the state of some object was incorrect.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.NotFound">
            <summary>
            The object was not found.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.MoreData">
            <summary>
            The caller did not supply a sufficiently large buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.Unsupported">
            <summary>
            The specified device interface or feature level is not supported on this system.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.DeviceRemoved">
            <summary>
            The GPU device instance has been suspended. Use GetDeviceRemovedReason to determine the appropriate action.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.DeviceHung">
            <summary>
            The GPU will not respond to more commands, most likely because of an invalid command passed by the calling application.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.DeviceReset">
            <summary>
            The GPU will not respond to more commands, most likely because some other application submitted invalid commands.
            The calling application should re-create the device and continue.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.WasStillDrawing">
            <summary>
            The GPU was busy at the moment when the call was made, and the call was neither executed nor scheduled.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.FrameStatisticsDisjoint">
            <summary>
            An event (such as power cycle) interrupted the gathering of presentation statistics.
            Any previous statistics should be considered invalid.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.GraphicsVidpnSourceInUse">
            <summary>
            Full screen mode could not be achieved because the specified output was already in use.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.DriverInternalError">
            <summary>
            An internal issue prevented the driver from carrying out the specified operation.
            The driver's state is probably suspect, and the application should not continue.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.NonExclusive">
            <summary>
            A global counter resource was in use, and the specified counter cannot be used by this Direct3D device at this time.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.NotCurrentlyAvailable">
            <summary>
            A resource is not available at the time of the call, but may become available later.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.RemoteClientDisconnected">
            <summary>
            The application's remote device has been removed due to session disconnect or network disconnect.
            The application should call IDXGIFactory1::IsCurrent to find out when the remote device becomes available again.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.RemoteOutOfMemory">
            <summary>
            The device has been removed during a remote session because the remote computer ran out of memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.AccessLost">
            <summary>
            The keyed mutex was abandoned.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.WaitTimeout">
            <summary>
            The timeout value has elapsed and the resource is not yet available.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.SessionDisconnected">
            <summary>
            The output duplication has been turned off because the Windows session ended or was disconnected.
            This happens when a remote user disconnects, or when "switch user" is used locally.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.RestrictToOutputStale">
            <summary>
            The DXGI output (monitor) to which the swap chain content was restricted, has been disconnected or changed.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.CannotProtectContent">
            <summary>
            DXGI is unable to provide content protection on the swap chain.
            This is typically caused by an older driver, or by the application using a swap chain that is incompatible with content protection.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.AccessDenied">
            <summary>
            The application is trying to use a resource to which it does not have the required access privileges.
            This is most commonly caused by writing to a shared resource with read-only access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.NameAlreadyExists">
            <summary>
            The application is trying to create a shared handle using a name that is already associated with some other resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiError.SdkComponentMissing">
            <summary>
            The application requested an operation that depends on an SDK component that is missing or mismatched.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory">
            <summary>
            An <c>IDXGIFactory</c> interface implements methods for generating DXGI objects (which handle full screen transitions).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFactory.factory">
            <summary>
            The DXGI factory interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory"/> class.
            </summary>
            <param name="factory">A DXGI factory interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory.WindowAssociation">
            <summary>
            Gets the window through which the user controls the transition to and from full screen.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory.Create">
            <summary>
            Creates a DXGI 1.0 factory that you can use to generate other DXGI objects.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory"/> object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory.EnumAdapters">
            <summary>
            Enumerates the adapters (video cards).
            </summary>
            <returns>An IEnumerable of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory.MakeWindowAssociation(System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions)">
            <summary>
            Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).
            </summary>
            <param name="windowHandle">The handle of the window that is to be monitored. This parameter can be <value>Zero</value>; but only if the flags are also 0.</param>
            <param name="options">One or more options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory.CreateSwapChain(System.Object,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc)">
            <summary>
            Creates a swap chain.
            </summary>
            <param name="device">A Direct3D device that will write 2D images to the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC</c> structure for the swap-chain description.</param>
            <returns>An <c>IDXGISwapChain</c> interface for the swap chain</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory1">
            <summary>
            The <c>IDXGIFactory1</c> interface implements methods for generating DXGI objects.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFactory1.factory">
            <summary>
            The DXGI factory interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory1.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory1"/> class.
            </summary>
            <param name="factory">A DXGI factory interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory1.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory1.WindowAssociation">
            <summary>
            Gets the window through which the user controls the transition to and from full screen.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory1.IsCurrent">
            <summary>
            Gets a value indicating whether the adapter has not changed.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory1.Create">
            <summary>
            Creates a DXGI 1.1 factory that you can use to generate other DXGI objects.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory1"/> object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory1.EnumAdapters">
            <summary>
            Enumerates both adapters (video cards) with or without outputs.
            </summary>
            <returns>An IEnumerable of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter1"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory1.MakeWindowAssociation(System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions)">
            <summary>
            Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).
            </summary>
            <param name="windowHandle">The handle of the window that is to be monitored. This parameter can be <value>Zero</value>; but only if the flags are also 0.</param>
            <param name="options">One or more options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory1.CreateSwapChain(System.Object,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc)">
            <summary>
            Creates a swap chain.
            </summary>
            <param name="device">A Direct3D device that will write 2D images to the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC</c> structure for the swap-chain description.</param>
            <returns>An <c>IDXGISwapChain</c> interface for the swap chain</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory2">
            <summary>
            The <c>IDXGIFactory2</c> interface includes methods to create a newer version swap chain with more features than <c>IDXGISwapChain</c> and to monitor stereoscopic 3D capabilities.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.factory">
            <summary>
            The DXGI factory interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory2"/> class.
            </summary>
            <param name="factory">A DXGI factory interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.WindowAssociation">
            <summary>
            Gets the window through which the user controls the transition to and from full screen.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.IsCurrent">
            <summary>
            Gets a value indicating whether the adapter has not changed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.IsWindowedStereoEnabled">
            <summary>
            Gets a value indicating whether to use stereo mode.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.Create">
            <summary>
            Creates a DXGI 1.2 factory that you can use to generate other DXGI objects.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory2"/> object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.EnumAdapters">
            <summary>
            Enumerates both adapters (video cards) with or without outputs.
            </summary>
            <returns>An IEnumerable of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter2"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.MakeWindowAssociation(System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions)">
            <summary>
            Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).
            </summary>
            <param name="windowHandle">The handle of the window that is to be monitored. This parameter can be <value>Zero</value>; but only if the flags are also 0.</param>
            <param name="options">One or more options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory2.CreateSwapChainForWindowHandle(System.Object,System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1,System.Nullable{JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc},JeremyAnsel.DirectX.Dxgi.DxgiOutput2)">
            <summary>
            Creates a swap chain that is associated with an <c>HWND</c> handle to the output window for the swap chain.
            </summary>
            <param name="device">The Direct3D device for the swap chain.</param>
            <param name="hwnd">The <c>HWND</c> handle that is associated with the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC1</c> structure for the swap-chain description.</param>
            <param name="fullscreenDesc">A <c>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</c> structure for the description of a full-screen swap chain.</param>
            <param name="restrictToOutput">The <c>IDXGIOutput</c> interface for the output to restrict content to.</param>
            <returns>The <c>IDXGISwapChain1</c> interface for the swap chain.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory3">
            <summary>
            Enables creating Microsoft DirectX Graphics Infrastructure (DXGI) objects.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.factory">
            <summary>
            The DXGI factory interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory3)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory3"/> class.
            </summary>
            <param name="factory">A DXGI factory interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.WindowAssociation">
            <summary>
            Gets the window through which the user controls the transition to and from full screen.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.IsCurrent">
            <summary>
            Gets a value indicating whether the adapter has not changed.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.IsWindowedStereoEnabled">
            <summary>
            Gets a value indicating whether to use stereo mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.CreationOptions">
            <summary>
            Gets the flags that were used when a Microsoft DirectX Graphics Infrastructure (DXGI) object was created.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.Create">
            <summary>
            Creates a DXGI 1.3 factory that you can use to generate other DXGI objects.
            </summary>
            <returns>A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory3"/> object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.Create(JeremyAnsel.DirectX.Dxgi.DxgiCreateFactoryOptions)">
            <summary>
            Creates a DXGI 1.3 factory that you can use to generate other DXGI objects.
            </summary>
            <param name="options">The creation options.</param>
            <returns>A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFactory3"/> object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.EnumAdapters">
            <summary>
            Enumerates both adapters (video cards) with or without outputs.
            </summary>
            <returns>An IEnumerable of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapter3"/>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.MakeWindowAssociation(System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions)">
            <summary>
            Allows DXGI to monitor an application's message queue for the alt-enter key sequence (which causes the application to switch from windowed to full screen or vice versa).
            </summary>
            <param name="windowHandle">The handle of the window that is to be monitored. This parameter can be <value>Zero</value>; but only if the flags are also 0.</param>
            <param name="options">One or more options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFactory3.CreateSwapChainForWindowHandle(System.Object,System.IntPtr,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1,System.Nullable{JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc},JeremyAnsel.DirectX.Dxgi.DxgiOutput3)">
            <summary>
            Creates a swap chain that is associated with an <c>HWND</c> handle to the output window for the swap chain.
            </summary>
            <param name="device">The Direct3D device for the swap chain.</param>
            <param name="hwnd">The <c>HWND</c> handle that is associated with the swap chain.</param>
            <param name="desc">A <c>DXGI_SWAP_CHAIN_DESC1</c> structure for the swap-chain description.</param>
            <param name="fullscreenDesc">A <c>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</c> structure for the description of a full-screen swap chain.</param>
            <param name="restrictToOutput">The <c>IDXGIOutput</c> interface for the output to restrict content to.</param>
            <returns>The <c>IDXGISwapChain1</c> interface for the swap chain.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex">
            <summary>
            Represents a keyed mutex, which allows exclusive access to a shared resource that is used by multiple devices.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex.keyedMutex">
            <summary>
            The DXGI keyed mutex interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex"/> class.
            </summary>
            <param name="resource">A resource interface which implements the <c>IDXGIKeyedMutex</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex.AcquireSync(System.UInt64,System.UInt32)">
            <summary>
            Using a key, acquires exclusive rendering access to a shared resource.
            </summary>
            <param name="key">A value that indicates which device to give access to.</param>
            <param name="milliseconds">The time-out interval, in milliseconds.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiKeyedMutex.ReleaseSync(System.UInt64)">
            <summary>
            Using a key, releases exclusive rendering access to a shared resource.
            </summary>
            <param name="key">A value that indicates which device to give access to.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiObject">
            <summary>
            An <c>IDXGIObject</c> interface is a base interface for all DXGI objects. <c>IDXGIObject</c> supports associating caller-defined (private data) with an object and retrieval of an interface to the parent object.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiObject"/> class.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiObject.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiObject.op_Implicit(JeremyAnsel.DirectX.Dxgi.DxgiObject)~System.Boolean">
            <summary>
            Gets a boolean indicating if the handle is not null.
            </summary>
            <param name="value">A DXGI object.</param>
            <returns>A boolean</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiObject.ToBoolean">
            <summary>
            Gets a boolean indicating if the handle is not null.
            </summary>
            <returns>A boolean</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiObject.Dispose">
            <summary>
            Immediately releases the unmanaged resources used by the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiObject"/> object.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiObject.Release">
            <summary>
            Releases the managed reference to the COM DXGI interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiObject.SetPrivateDataText(System.Guid,System.String)">
            <summary>
            Sets an application-defined data to the object and associates that data with a GUID.
            </summary>
            <param name="name">A GUID that identifies the data.</param>
            <param name="text">The object's text.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiObject.GetPrivateDataText(System.Guid)">
            <summary>
            Gets an application-defined data from the object that is associated with a GUID.
            </summary>
            <param name="name">A GUID identifying the data.</param>
            <returns>The object's text.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiObject.GetHandle``1">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
            <typeparam name="T">A DXGI interface type.</typeparam>
            <returns>The DXGI interface.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput">
            <summary>
            An <c>IDXGIOutput</c> interface represents an adapter output (such as a monitor).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOutput.output">
            <summary>
            The DXGI output interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput"/> class.
            </summary>
            <param name="output">A DXGI output interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutput.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutput.Description">
            <summary>
            Gets a description of the output.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput.GetDisplayModeList(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiEnumModes)">
            <summary>
            Gets the display modes that match the requested format and other input options.
            </summary>
            <param name="format">The color format.</param>
            <param name="modes">Options for modes to include.</param>
            <returns>An array of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> structure.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput.FindClosestMatchingMode(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc,System.Object)">
            <summary>
            Finds the display mode that most closely matches the requested display mode.
            </summary>
            <param name="modeToMatch">The desired display mode.</param>
            <param name="concernedDevice">The Direct3D device interface. If this parameter is <value>null</value>, only modes whose format matches that of <c>modeToMatch</c> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned.</param>
            <returns>The mode that most closely matches <c>modeToMatch</c>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput.WaitForVBlank">
            <summary>
            Halt a thread until the next vertical blank occurs.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput.GetDisplaySurfaceData(JeremyAnsel.DirectX.Dxgi.DxgiSurface)">
            <summary>
            Gets a copy of the current display surface.
            </summary>
            <param name="destination">A destination surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput.GetFrameStatistics">
            <summary>
            Gets statistics about recently rendered frames.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput1">
            <summary>
            An <c>IDXGIOutput</c> interface represents an adapter output (such as a monitor).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOutput1.output">
            <summary>
            The DXGI output interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput1.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput1"/> class.
            </summary>
            <param name="output">A DXGI output interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutput1.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutput1.Description">
            <summary>
            Gets a description of the output.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput1.GetDisplayModeList(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiEnumModes)">
            <summary>
            Gets the display modes that match the requested format and other input options.
            </summary>
            <param name="format">The color format.</param>
            <param name="modes">Options for modes to include.</param>
            <returns>An array of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> structure.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput1.FindClosestMatchingMode(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc,System.Object)">
            <summary>
            Finds the display mode that most closely matches the requested display mode.
            </summary>
            <param name="modeToMatch">The desired display mode.</param>
            <param name="concernedDevice">The Direct3D device interface. If this parameter is <value>null</value>, only modes whose format matches that of <c>modeToMatch</c> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned.</param>
            <returns>The mode that most closely matches <c>modeToMatch</c>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput1.WaitForVBlank">
            <summary>
            Halt a thread until the next vertical blank occurs.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput1.GetDisplaySurfaceData(JeremyAnsel.DirectX.Dxgi.DxgiSurface1)">
            <summary>
            Gets a copy of the current display surface.
            </summary>
            <param name="destination">A destination surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput1.GetFrameStatistics">
            <summary>
            Gets statistics about recently rendered frames.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput2">
            <summary>
            An <c>IDXGIOutput1</c> interface represents an adapter output (such as a monitor).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOutput2.output">
            <summary>
            The DXGI output interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput2.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput1)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput2"/> class.
            </summary>
            <param name="output">A DXGI output interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutput2.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutput2.Description">
            <summary>
            Gets a description of the output.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput2.GetDisplayModeList(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiEnumModes)">
            <summary>
            Gets the display modes that match the requested format and other input options.
            </summary>
            <param name="format">The color format.</param>
            <param name="modes">Options for modes to include.</param>
            <returns>An array of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> structure.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput2.FindClosestMatchingMode(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1,System.Object)">
            <summary>
            Finds the display mode that most closely matches the requested display mode.
            </summary>
            <param name="modeToMatch">The desired display mode.</param>
            <param name="concernedDevice">The Direct3D device interface. If this parameter is <value>null</value>, only modes whose format matches that of <c>modeToMatch</c> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned.</param>
            <returns>The mode that most closely matches <c>modeToMatch</c>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput2.WaitForVBlank">
            <summary>
            Halt a thread until the next vertical blank occurs.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput2.GetDisplaySurfaceData(JeremyAnsel.DirectX.Dxgi.DxgiResource2)">
            <summary>
            Copies the display surface (front buffer) to a user-provided resource.
            </summary>
            <param name="destination">A resource interface that represents the resource to which copies the display surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput2.GetFrameStatistics">
            <summary>
            Gets statistics about recently rendered frames.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput3">
            <summary>
            Represents an adapter output (such as a monitor). The <c>IDXGIOutput2</c> interface exposes a method to check for multi-plane overlay support on the primary output adapter.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.output">
            <summary>
            The DXGI output interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiOutput2)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutput3"/> class.
            </summary>
            <param name="output">A DXGI output interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.Description">
            <summary>
            Gets a description of the output.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.SupportsOverlays">
            <summary>
            Gets a value indicating whether the output adapter supports multi-plane overlay.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.GetDisplayModeList(JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiEnumModes)">
            <summary>
            Gets the display modes that match the requested format and other input options.
            </summary>
            <param name="format">The color format.</param>
            <param name="modes">Options for modes to include.</param>
            <returns>An array of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> structure.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.FindClosestMatchingMode(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1,System.Object)">
            <summary>
            Finds the display mode that most closely matches the requested display mode.
            </summary>
            <param name="modeToMatch">The desired display mode.</param>
            <param name="concernedDevice">The Direct3D device interface. If this parameter is <value>null</value>, only modes whose format matches that of <c>modeToMatch</c> will be returned; otherwise, only those formats that are supported for scan-out by the device are returned.</param>
            <returns>The mode that most closely matches <c>modeToMatch</c>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.WaitForVBlank">
            <summary>
            Halt a thread until the next vertical blank occurs.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.GetDisplaySurfaceData(JeremyAnsel.DirectX.Dxgi.DxgiResource3)">
            <summary>
            Copies the display surface (front buffer) to a user-provided resource.
            </summary>
            <param name="destination">A resource interface that represents the resource to which copies the display surface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutput3.GetFrameStatistics">
            <summary>
            Gets statistics about recently rendered frames.
            </summary>
            <returns>The frame statistics.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiResource">
            <summary>
            An <c>IDXGIResource</c> interface allows resource sharing and identifies the memory that a resource resides in.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResource.resource">
            <summary>
            The DXGI resource interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiResource"/> class.
            </summary>
            <param name="resource">A resource interface which implements the <c>IDxgiResource</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource.Usage">
            <summary>
            Gets the expected resource usage.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource.EvictionPriority">
            <summary>
            Gets or sets the eviction priority.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource.GetSharedHandle">
            <summary>
            Gets the handle to a shared resource.
            </summary>
            <returns>A handle.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiResource1">
            <summary>
            An <c>IDXGIResource</c> interface allows resource sharing and identifies the memory that a resource resides in.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResource1.resource">
            <summary>
            The DXGI resource interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiResource1"/> class.
            </summary>
            <param name="resource">A resource interface which implements the <c>IDxgiResource</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource1.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource1.Usage">
            <summary>
            Gets the expected resource usage.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource1.EvictionPriority">
            <summary>
            Gets or sets the eviction priority.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource1.GetSharedHandle">
            <summary>
            Gets the handle to a shared resource.
            </summary>
            <returns>A handle.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiResource2">
            <summary>
            An <c>IDXGIResource1</c> interface extends the <c>IDXGIResource</c> interface by adding support for creating a sub-resource surface object and for creating a handle to a shared resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResource2.resource">
            <summary>
            The DXGI resource interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource2.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiResource2"/> class.
            </summary>
            <param name="resource">A resource interface which implements the <c>IDxgiResource1</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource2.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource2.Usage">
            <summary>
            Gets the expected resource usage.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource2.EvictionPriority">
            <summary>
            Gets or sets the eviction priority.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource2.GetSharedHandle">
            <summary>
            Gets the handle to a shared resource.
            </summary>
            <returns>A handle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource2.CreateSubresourceSurface(System.UInt32)">
            <summary>
            Creates a sub-resource surface object.
            </summary>
            <param name="index">The index of the sub-resource surface object to enumerate.</param>
            <returns>A <c>IDXGISurface2</c> interface that represents the created sub-resource surface object at the position specified.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiResource3">
            <summary>
            An <c>IDXGIResource1</c> interface extends the <c>IDXGIResource</c> interface by adding support for creating a sub-resource surface object and for creating a handle to a shared resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResource3.resource">
            <summary>
            The DXGI resource interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource3.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiResource3"/> class.
            </summary>
            <param name="resource">A resource interface which implements the <c>IDxgiResource1</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource3.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource3.Usage">
            <summary>
            Gets the expected resource usage.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiResource3.EvictionPriority">
            <summary>
            Gets or sets the eviction priority.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource3.GetSharedHandle">
            <summary>
            Gets the handle to a shared resource.
            </summary>
            <returns>A handle.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiResource3.CreateSubresourceSurface(System.UInt32)">
            <summary>
            Creates a sub-resource surface object.
            </summary>
            <param name="index">The index of the sub-resource surface object to enumerate.</param>
            <returns>A <c>IDXGISurface2</c> interface that represents the created sub-resource surface object at the position specified.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface">
            <summary>
            The <c>IDXGISurface</c> interface implements methods for image-data objects.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurface.InterfaceGuid">
            <summary>
            The interface GUID.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurface.surface">
            <summary>
            The DXGI surface interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface"/> class.
            </summary>
            <param name="resource">A resource interface which implements the <c>IDXGISurface</c> interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface"/> class.
            </summary>
            <param name="surface">A resource interface which implements the <c>IDXGISurface</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurface.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurface.Description">
            <summary>
            Gets a description of the surface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface.Map(JeremyAnsel.DirectX.Dxgi.DxgiMapOptions)">
            <summary>
            Get a pointer to the data contained in the surface, and deny GPU access to the surface.
            </summary>
            <param name="options">CPU read-write flags. These flags can be combined with a logical OR.</param>
            <returns>The surface data.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface.Unmap">
            <summary>
            Invalidate the pointer to the surface retrieved by <c>IDXGISurface::Map</c> and re-enable GPU access to the resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface1">
            <summary>
            The <c>IDXGISurface1</c> interface extends the <c>IDXGISurface</c> by adding support for using Windows Graphics Device Interface (GDI) to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.InterfaceGuid">
            <summary>
            The interface GUID.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.surface">
            <summary>
            The DXGI surface interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface1"/> class.
            </summary>
            <param name="resource">A resource interface which implements the <c>IDXGISurface1</c> interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface1)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface1"/> class.
            </summary>
            <param name="surface">A resource interface which implements the <c>IDXGISurface1</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.Description">
            <summary>
            Gets a description of the surface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.Map(JeremyAnsel.DirectX.Dxgi.DxgiMapOptions)">
            <summary>
            Get a pointer to the data contained in the surface, and deny GPU access to the surface.
            </summary>
            <param name="options">CPU read-write flags. These flags can be combined with a logical OR.</param>
            <returns>The surface data.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.Unmap">
            <summary>
            Invalidate the pointer to the surface retrieved by <c>IDXGISurface::Map</c> and re-enable GPU access to the resource.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.GetDC(System.Boolean)">
            <summary>
            Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).
            </summary>
            <param name="discard">A value indicating whether to preserve Direct3D contents in the GDI DC.</param>
            <returns>An HDC handle that represents the current device context for GDI rendering.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface1.ReleaseDC(JeremyAnsel.DirectX.Dxgi.DxgiRect)">
            <summary>
            Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.
            </summary>
            <param name="dirtyRect">A RECT structure that identifies the dirty region of the surface. A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve. This area is used as a performance hint to graphics subsystem in certain scenarios. Do not use this parameter to restrict rendering to the specified rectangular region.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface2">
            <summary>
            The <c>IDXGISurface2</c> interface extends the <c>IDXGISurface1</c> interface by adding support for sub-resource surfaces and getting a handle to a shared resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.InterfaceGuid">
            <summary>
            The interface GUID.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.surface">
            <summary>
            The DXGI surface interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface2"/> class.
            </summary>
            <param name="resource">A resource interface which implements the <c>IDXGISurface2</c> interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface2"/> class.
            </summary>
            <param name="surface">A resource interface which implements the <c>IDXGISurface2</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.Description">
            <summary>
            Gets a description of the surface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.Map(JeremyAnsel.DirectX.Dxgi.DxgiMapOptions)">
            <summary>
            Get a pointer to the data contained in the surface, and deny GPU access to the surface.
            </summary>
            <param name="options">CPU read-write flags. These flags can be combined with a logical OR.</param>
            <returns>The surface data.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.Unmap">
            <summary>
            Invalidate the pointer to the surface retrieved by <c>IDXGISurface::Map</c> and re-enable GPU access to the resource.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.GetDC(System.Boolean)">
            <summary>
            Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).
            </summary>
            <param name="discard">A value indicating whether to preserve Direct3D contents in the GDI DC.</param>
            <returns>An HDC handle that represents the current device context for GDI rendering.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface2.ReleaseDC(JeremyAnsel.DirectX.Dxgi.DxgiRect)">
            <summary>
            Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.
            </summary>
            <param name="dirtyRect">A RECT structure that identifies the dirty region of the surface. A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve. This area is used as a performance hint to graphics subsystem in certain scenarios. Do not use this parameter to restrict rendering to the specified rectangular region.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface3">
            <summary>
            The <c>IDXGISurface2</c> interface extends the <c>IDXGISurface1</c> interface by adding support for sub-resource surfaces and getting a handle to a shared resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.InterfaceGuid">
            <summary>
            The interface GUID.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.surface">
            <summary>
            The DXGI surface interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface3"/> class.
            </summary>
            <param name="resource">A resource interface which implements the <c>IDXGISurface2</c> interface.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSurface2)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurface3"/> class.
            </summary>
            <param name="surface">A resource interface which implements the <c>IDXGISurface2</c> interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.Description">
            <summary>
            Gets a description of the surface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.Map(JeremyAnsel.DirectX.Dxgi.DxgiMapOptions)">
            <summary>
            Get a pointer to the data contained in the surface, and deny GPU access to the surface.
            </summary>
            <param name="options">CPU read-write flags. These flags can be combined with a logical OR.</param>
            <returns>The surface data.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.Unmap">
            <summary>
            Invalidate the pointer to the surface retrieved by <c>IDXGISurface::Map</c> and re-enable GPU access to the resource.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.GetDC(System.Boolean)">
            <summary>
            Returns a device context (DC) that allows you to render to a Microsoft DirectX Graphics Infrastructure (DXGI) surface using Windows Graphics Device Interface (GDI).
            </summary>
            <param name="discard">A value indicating whether to preserve Direct3D contents in the GDI DC.</param>
            <returns>An HDC handle that represents the current device context for GDI rendering.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurface3.ReleaseDC(JeremyAnsel.DirectX.Dxgi.DxgiRect)">
            <summary>
            Releases the GDI device context (DC) that is associated with the current surface and allows you to use Direct3D to render.
            </summary>
            <param name="dirtyRect">A RECT structure that identifies the dirty region of the surface. A dirty region is any part of the surface that you used for GDI rendering and that you want to preserve. This area is used as a performance hint to graphics subsystem in certain scenarios. Do not use this parameter to restrict rendering to the specified rectangular region.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain">
            <summary>
            An <c>IDXGISwapChain</c> interface implements one or more surfaces for storing rendered data before presenting it to an output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.swapChain">
            <summary>
            The DXGI swap chain interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain"/> class.
            </summary>
            <param name="swapChain">A DXGI output interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.Description">
            <summary>
            Gets a description of the swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.FrameStatistics">
            <summary>
            Gets performance statistics about the last render frame.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.LastPresentCount">
            <summary>
            Gets the number of times that <c>IDXGISwapChain::Present</c> or <c>IDXGISwapChain1::Present1</c> has been called.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.Present(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions)">
            <summary>
            Presents a rendered image to the user.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">The swap-chain presentation options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.GetBuffer(System.UInt32,System.Guid)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <param name="riid">The type of interface used to manipulate the buffer.</param>
            <returns>A pointer to a back-buffer interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.GetSurface(System.UInt32)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <returns>A back-buffer surface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.ResizeBuffers(System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions)">
            <summary>
            Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.
            </summary>
            <param name="bufferCount">The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain.</param>
            <param name="width">New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window.</param>
            <param name="height">New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window.</param>
            <param name="format">A <c>DXGI_FORMAT</c>-typed value for the new format of the back buffer. Set this value to <value>DXGI_FORMAT_UNKNOWN</value> to preserve the existing format of the back buffer.</param>
            <param name="options">The options for swap-chain behavior.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.ResizeTarget(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc)">
            <summary>
            Resizes the output target.
            </summary>
            <param name="targetParameters">A <c>DXGI_MODE_DESC</c> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is <value>DXGI_FORMAT_UNKNOWN</value>, ResizeTarget uses the existing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain.GetContainingOutput">
            <summary>
            Get the output (the display monitor) that contains the majority of the client area of the target window.
            </summary>
            <returns>The output interface.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1">
            <summary>
            An <c>IDXGISwapChain</c> interface implements one or more surfaces for storing rendered data before presenting it to an output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.swapChain">
            <summary>
            The DXGI swap chain interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1"/> class.
            </summary>
            <param name="swapChain">A DXGI output interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.Description">
            <summary>
            Gets a description of the swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.FrameStatistics">
            <summary>
            Gets performance statistics about the last render frame.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.LastPresentCount">
            <summary>
            Gets the number of times that <c>IDXGISwapChain::Present</c> or <c>IDXGISwapChain1::Present1</c> has been called.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.Present(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions)">
            <summary>
            Presents a rendered image to the user.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">The swap-chain presentation options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.GetBuffer(System.UInt32,System.Guid)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <param name="riid">The type of interface used to manipulate the buffer.</param>
            <returns>A pointer to a back-buffer interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.GetSurface(System.UInt32)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <returns>A back-buffer surface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.ResizeBuffers(System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions)">
            <summary>
            Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.
            </summary>
            <param name="bufferCount">The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain.</param>
            <param name="width">New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window.</param>
            <param name="height">New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window.</param>
            <param name="format">A <c>DXGI_FORMAT</c>-typed value for the new format of the back buffer. Set this value to <value>DXGI_FORMAT_UNKNOWN</value> to preserve the existing format of the back buffer.</param>
            <param name="options">The options for swap-chain behavior.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.ResizeTarget(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc)">
            <summary>
            Resizes the output target.
            </summary>
            <param name="targetParameters">A <c>DXGI_MODE_DESC</c> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is <value>DXGI_FORMAT_UNKNOWN</value>, ResizeTarget uses the existing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain1.GetContainingOutput">
            <summary>
            Get the output (the display monitor) that contains the majority of the client area of the target window.
            </summary>
            <returns>The output interface.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2">
            <summary>
            Provides presentation capabilities that are enhanced from <c>IDXGISwapChain</c>. These presentation capabilities consist of specifying dirty rectangles and scroll rectangle to optimize the presentation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.swapChain">
            <summary>
            The DXGI swap chain interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain1)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2"/> class.
            </summary>
            <param name="swapChain">A DXGI output interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.Description">
            <summary>
            Gets a description of the swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.FullscreenDescription">
            <summary>
            Gets a description of a full-screen swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.FrameStatistics">
            <summary>
            Gets performance statistics about the last render frame.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.LastPresentCount">
            <summary>
            Gets the number of times that <c>IDXGISwapChain::Present</c> or <c>IDXGISwapChain1::Present1</c> has been called.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.WindowHandle">
            <summary>
            Gets the underlying <c>HWND</c> for this swap-chain object.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.IsTemporaryMonoSupported">
            <summary>
            Gets a value indicating whether a swap chain supports “temporary mono.”
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.BackgroundColor">
            <summary>
            Gets or sets the background color of the swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.Rotation">
            <summary>
            Gets or sets the rotation of the back buffers for the swap chain.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.Present(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions)">
            <summary>
            Presents a frame on the display screen.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">An integer value that contains swap-chain presentation options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.Present(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions,JeremyAnsel.DirectX.Dxgi.DxgiRect[],JeremyAnsel.DirectX.Dxgi.DxgiRect,JeremyAnsel.DirectX.Dxgi.DxgiPoint)">
            <summary>
            Presents a frame on the display screen.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">An integer value that contains swap-chain presentation options.</param>
            <param name="dirtyRects">A list of updated rectangles that you update in the back buffer for the presented frame.</param>
            <param name="scrollRect">The rectangle of the previous frame from which the runtime bit-block transfers content.</param>
            <param name="scrollOffset">The offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame).</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.GetBuffer(System.UInt32,System.Guid)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <param name="riid">The type of interface used to manipulate the buffer.</param>
            <returns>A pointer to a back-buffer interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.GetSurface(System.UInt32)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <returns>A back-buffer surface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.ResizeBuffers(System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions)">
            <summary>
            Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.
            </summary>
            <param name="bufferCount">The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain.</param>
            <param name="width">New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window.</param>
            <param name="height">New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window.</param>
            <param name="format">A <c>DXGI_FORMAT</c>-typed value for the new format of the back buffer. Set this value to <value>DXGI_FORMAT_UNKNOWN</value> to preserve the existing format of the back buffer.</param>
            <param name="options">The options for swap-chain behavior.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.ResizeTarget(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc)">
            <summary>
            Resizes the output target.
            </summary>
            <param name="targetParameters">A <c>DXGI_MODE_DESC</c> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is <value>DXGI_FORMAT_UNKNOWN</value>, ResizeTarget uses the existing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.GetContainingOutput">
            <summary>
            Get the output (the display monitor) that contains the majority of the client area of the target window.
            </summary>
            <returns>The output interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain2.GetRestrictToOutput">
            <summary>
            Gets the output (the display monitor) to which you can restrict the contents of a present operation.
            </summary>
            <returns>The <c>IDXGIOutput</c> interface for the restrict-to output.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3">
            <summary>
            Extends <c>IDXGISwapChain1</c> with methods to support swap back buffer scaling and lower-latency swap chains.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.swapChain">
            <summary>
            The DXGI swap chain interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.#ctor(JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiSwapChain2)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3"/> class.
            </summary>
            <param name="swapChain">A DXGI output interface.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.Handle">
            <summary>
            Gets an handle representing the DXGI object interface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.Description">
            <summary>
            Gets a description of the swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.FullscreenDescription">
            <summary>
            Gets a description of a full-screen swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.FrameStatistics">
            <summary>
            Gets performance statistics about the last render frame.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.LastPresentCount">
            <summary>
            Gets the number of times that <c>IDXGISwapChain::Present</c> or <c>IDXGISwapChain1::Present1</c> has been called.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.WindowHandle">
            <summary>
            Gets the underlying <c>HWND</c> for this swap-chain object.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.IsTemporaryMonoSupported">
            <summary>
            Gets a value indicating whether a swap chain supports “temporary mono.”
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.BackgroundColor">
            <summary>
            Gets or sets the background color of the swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.Rotation">
            <summary>
            Gets or sets the rotation of the back buffers for the swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.MaximumFrameLatency">
            <summary>
            Gets or sets the number of frames that the swap chain is allowed to queue for rendering.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.MatrixTransform">
            <summary>
            Gets or sets the transform matrix that will be applied to a composition swap chain upon the next present.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.Present(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions)">
            <summary>
            Presents a frame on the display screen.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">An integer value that contains swap-chain presentation options.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.Present(System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions,JeremyAnsel.DirectX.Dxgi.DxgiRect[],JeremyAnsel.DirectX.Dxgi.DxgiRect,JeremyAnsel.DirectX.Dxgi.DxgiPoint)">
            <summary>
            Presents a frame on the display screen.
            </summary>
            <param name="syncInterval">An integer that specifies how to synchronize presentation of a frame with the vertical blank.</param>
            <param name="options">An integer value that contains swap-chain presentation options.</param>
            <param name="dirtyRects">A list of updated rectangles that you update in the back buffer for the presented frame.</param>
            <param name="scrollRect">The rectangle of the previous frame from which the runtime bit-block transfers content.</param>
            <param name="scrollOffset">The offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame).</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.GetBuffer(System.UInt32,System.Guid)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <param name="riid">The type of interface used to manipulate the buffer.</param>
            <returns>A pointer to a back-buffer interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.GetSurface(System.UInt32)">
            <summary>
            Accesses one of the swap-chain's back buffers.
            </summary>
            <param name="buffer">A zero-based buffer index.</param>
            <returns>A back-buffer surface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.ResizeBuffers(System.UInt32,System.UInt32,System.UInt32,JeremyAnsel.DirectX.Dxgi.DxgiFormat,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions)">
            <summary>
            Changes the swap chain's back buffer size, format, and number of buffers. This should be called when the application window is resized.
            </summary>
            <param name="bufferCount">The number of buffers in the swap chain (including all back and front buffers). This number can be different from the number of buffers with which you created the swap chain.</param>
            <param name="width">New width of the back buffer. If you specify zero, DXGI will use the width of the client area of the target window.</param>
            <param name="height">New height of the back buffer. If you specify zero, DXGI will use the height of the client area of the target window.</param>
            <param name="format">A <c>DXGI_FORMAT</c>-typed value for the new format of the back buffer. Set this value to <value>DXGI_FORMAT_UNKNOWN</value> to preserve the existing format of the back buffer.</param>
            <param name="options">The options for swap-chain behavior.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.ResizeTarget(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc)">
            <summary>
            Resizes the output target.
            </summary>
            <param name="targetParameters">A <c>DXGI_MODE_DESC</c> structure that describes the mode, which specifies the new width, height, format, and refresh rate of the target. If the format is <value>DXGI_FORMAT_UNKNOWN</value>, ResizeTarget uses the existing format.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.GetContainingOutput">
            <summary>
            Get the output (the display monitor) that contains the majority of the client area of the target window.
            </summary>
            <returns>The output interface.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.GetRestrictToOutput">
            <summary>
            Gets the output (the display monitor) to which you can restrict the contents of a present operation.
            </summary>
            <returns>The <c>IDXGIOutput</c> interface for the restrict-to output.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.SetSourceSize(System.UInt32,System.UInt32)">
            <summary>
            Sets the source region to be used for the swap chain.
            </summary>
            <param name="width">Source width to use for the swap chain. This value must be greater than zero, and must be less than or equal to the overall width of the swap chain.</param>
            <param name="height">Source height to use for the swap chain. This value must be greater than zero, and must be less than or equal to the overall height of the swap chain.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChain3.GetSourceSize(System.UInt32@,System.UInt32@)">
            <summary>
            Gets the source region used for the swap chain.
            </summary>
            <param name="width">The current width of the source region of the swap chain. This value can range from 1 to the overall width of the swap chain.</param>
            <param name="height">The current height of the source region of the swap chain. This value can range from 1 to the overall height of the swap chain.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiUtils">
            <summary>
            Utility methods.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiUtils.DisposeAndNull``1(``0@)">
            <summary>
            Immediately releases the unmanaged resources.
            </summary>
            <typeparam name="T">A releasable type.</typeparam>
            <param name="obj">The object.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiUtils.ReleaseAndNull``1(``0@)">
            <summary>
            Releases the managed reference to the COM interface.
            </summary>
            <typeparam name="T">A releasable type.</typeparam>
            <param name="obj">The COM interface.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterType">
            <summary>
            Identifies the type of DXGI adapter.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterType.None">
            <summary>
            Specifies no flags.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterType.Remote">
            <summary>
            Specifies a remote adapter.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterType.Software">
            <summary>
            Specifies a software adapter.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiAlphaMode">
            <summary>
            Identifies the alpha value, transparency behavior, of a surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAlphaMode.Unspecified">
            <summary>
            Indicates that the transparency behavior is not specified.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAlphaMode.Premultiplied">
            <summary>
            Indicates that the transparency behavior is pre-multiplied. Each color is first scaled by the alpha value. The alpha value itself is the same in both straight and pre-multiplied alpha. Typically, no color channel value is greater than the alpha channel value. If a color channel value in a pre-multiplied format is greater than the alpha channel, the standard source-over blending math results in an additive blend.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAlphaMode.Straight">
            <summary>
            Indicates that the transparency behavior is not pre-multiplied. The alpha channel indicates the transparency of the color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAlphaMode.Ignore">
            <summary>
            Indicates to ignore the transparency behavior.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity">
            <summary>
            Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current compute task.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity.DmaBufferBoundary">
            <summary>
            Indicates the preemption granularity as a compute packet.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity.DispatchBoundary">
            <summary>
            Indicates the preemption granularity as a dispatch. A dispatch is a part of a compute packet.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity.ThreadGroupBoundary">
            <summary>
            Indicates the preemption granularity as a thread group. A thread group is a part of a dispatch.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity.ThreadBoundary">
            <summary>
            Indicates the preemption granularity as a thread in a thread group. A thread is a part of a thread group.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity.InstructionBoundary">
            <summary>
            Indicates the preemption granularity as a compute instruction in a thread.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiCpuAccess">
            <summary>
            CPU data access patterns.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiCpuAccess.None">
            <summary>
            Maps should be validated to fail on this access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiCpuAccess.Dynamic">
            <summary>
            Frequent CPU write-only access, high-performance GPU read-only access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiCpuAccess.ReadWrite">
            <summary>
            Frequent CPU read/write access, non-optimal GPU read-only access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiCpuAccess.Scratch">
            <summary>
            Frequent CPU read/write access, no GPU access.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiCreateFactoryOptions">
            <summary>
            Options for factory creation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiCreateFactoryOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiCreateFactoryOptions.Debug">
            <summary>
            Debug factory.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiEnumModes">
            <summary>
            Options for enumerating display modes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiEnumModes.None">
            <summary>
            Include centered modes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiEnumModes.Interlaced">
            <summary>
            Include interlaced modes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiEnumModes.Scaling">
            <summary>
            Include stretched-scaling modes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiEnumModes.Stereo">
            <summary>
            Include stereo modes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiEnumModes.DisabledStereo">
            <summary>
            Include stereo modes that are hidden because the user has disabled stereo. Control panel applications can use this option to show stereo capabilities that have been disabled as part of a user interface that enables and disables stereo.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat">
            <summary>
            Resource data formats which includes fully-typed and typeless formats.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.Unknown">
            <summary>The format is not known.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32B32A32Typeless">
            <summary>A four-component, 128-bit typeless format that supports 32 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32B32A32Float">
            <summary>A four-component, 128-bit floating-point format that supports 32 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32B32A32UInt">
            <summary>A four-component, 128-bit unsigned-integer format that supports 32 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32B32A32SInt">
            <summary>A four-component, 128-bit signed-integer format that supports 32 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32B32Typeless">
            <summary>A three-component, 96-bit typeless format that supports 32 bits per color channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32B32Float">
            <summary>A three-component, 96-bit floating-point format that supports 32 bits per color channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32B32UInt">
            <summary>A three-component, 96-bit unsigned-integer format that supports 32 bits per color channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32B32SInt">
            <summary>A three-component, 96-bit signed-integer format that supports 32 bits per color channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16B16A16Typeless">
            <summary>A four-component, 64-bit typeless format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16B16A16Float">
            <summary>A four-component, 64-bit floating-point format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16B16A16UNorm">
            <summary>A four-component, 64-bit unsigned-normalized-integer format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16B16A16UInt">
            <summary>A four-component, 64-bit unsigned-integer format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16B16A16SNorm">
            <summary>A four-component, 64-bit signed-normalized-integer format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16B16A16SInt">
            <summary>A four-component, 64-bit signed-integer format that supports 16 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32Typeless">
            <summary>A two-component, 64-bit typeless format that supports 32 bits for the red channel and 32 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32Float">
            <summary>A two-component, 64-bit floating-point format that supports 32 bits for the red channel and 32 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32UInt">
            <summary>A two-component, 64-bit unsigned-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G32SInt">
            <summary>A two-component, 64-bit signed-integer format that supports 32 bits for the red channel and 32 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32G8X24Typeless">
            <summary>A two-component, 64-bit typeless format that supports 32 bits for the red channel, 8 bits for the green channel, and 24 bits are unused.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.D32FloatS8X24UInt">
            <summary>A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits). This format supports 32-bit depth, 8-bit stencil, and 24 bits are unused.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32FloatX8X24Typeless">
            <summary>A 32-bit floating-point component, and two typeless components (with an additional 32 bits). This format supports 32-bit red channel, 8 bits are unused, and 24 bits are unused.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.X32TypelessG8X24UInt">
            <summary>A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits). This format has 32 bits unused, 8 bits for green channel, and 24 bits are unused.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R10G10B10A2Typeless">
            <summary>A four-component, 32-bit typeless format that supports 10 bits for each color and 2 bits for alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R10G10B10A2UNorm">
            <summary>A four-component, 32-bit unsigned-normalized-integer format that supports 10 bits for each color and 2 bits for alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R10G10B10A2UInt">
            <summary>A four-component, 32-bit unsigned-integer format that supports 10 bits for each color and 2 bits for alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R11G11B10Float">
            <summary>Three partial-precision floating-point numbers encoded into a single 32-bit value (a variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa for R and G, and a 5-bit mantissa for B.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8B8A8Typeless">
            <summary>A four-component, 32-bit typeless format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8B8A8UNorm">
            <summary>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8B8A8UNormSrgb">
            <summary>A four-component, 32-bit unsigned-normalized integer sRGB format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8B8A8UInt">
            <summary>A four-component, 32-bit unsigned-integer format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8B8A8SNorm">
            <summary>A four-component, 32-bit signed-normalized-integer format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8B8A8SInt">
            <summary>A four-component, 32-bit signed-integer format that supports 8 bits per channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16Typeless">
            <summary>A two-component, 32-bit typeless format that supports 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16Float">
            <summary>A two-component, 32-bit floating-point format that supports 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16UNorm">
            <summary>A two-component, 32-bit unsigned-normalized-integer format that supports 16 bits each for the green and red channels.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16UInt">
            <summary>A two-component, 32-bit unsigned-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16SNorm">
            <summary>A two-component, 32-bit signed-normalized-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16G16SInt">
            <summary>A two-component, 32-bit signed-integer format that supports 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32Typeless">
            <summary>A single-component, 32-bit typeless format that supports 32 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.D32Float">
            <summary>A single-component, 32-bit floating-point format that supports 32 bits for depth.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32Float">
            <summary>A single-component, 32-bit floating-point format that supports 32 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32UInt">
            <summary>A single-component, 32-bit unsigned-integer format that supports 32 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R32SInt">
            <summary>A single-component, 32-bit signed-integer format that supports 32 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R24G8Typeless">
            <summary>A two-component, 32-bit typeless format that supports 24 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.D24UNormS8UInt">
            <summary>A 32-bit z-buffer format that supports 24 bits for depth and 8 bits for stencil.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R24UNormX8Typeless">
            <summary>A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits. This format has 24 bits red channel and 8 bits unused.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.X24TypelessG8UInt">
            <summary>A 32-bit format, that contains a 24 bit, single-component, typeless format, with an additional 8 bit unsigned integer component. This format has 24 bits unused and 8 bits green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8Typeless">
            <summary>A two-component, 16-bit typeless format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8UNorm">
            <summary>A two-component, 16-bit unsigned-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8UInt">
            <summary>A two-component, 16-bit unsigned-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8SNorm">
            <summary>A two-component, 16-bit signed-normalized-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8SInt">
            <summary>A two-component, 16-bit signed-integer format that supports 8 bits for the red channel and 8 bits for the green channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16Typeless">
            <summary>A single-component, 16-bit typeless format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16Float">
            <summary>A single-component, 16-bit floating-point format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.D16UNorm">
            <summary>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for depth.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16UNorm">
            <summary>A single-component, 16-bit unsigned-normalized-integer format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16UInt">
            <summary>A single-component, 16-bit unsigned-integer format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16SNorm">
            <summary>A single-component, 16-bit signed-normalized-integer format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R16SInt">
            <summary>A single-component, 16-bit signed-integer format that supports 16 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8Typeless">
            <summary>A single-component, 8-bit typeless format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8UNorm">
            <summary>A single-component, 8-bit unsigned-normalized-integer format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8UInt">
            <summary>A single-component, 8-bit unsigned-integer format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8SNorm">
            <summary>A single-component, 8-bit signed-normalized-integer format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8SInt">
            <summary>A single-component, 8-bit signed-integer format that supports 8 bits for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.A8UNorm">
            <summary>A single-component, 8-bit unsigned-normalized-integer format for alpha only.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R1UNorm">
            <summary>A single-component, 1-bit unsigned-normalized integer format that supports 1 bit for the red channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R9G9B9E5SharedExp">
            <summary>Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5, which is sign bit, 10-bit mantissa, and 5-bit biased (15) exponent). There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R8G8B8G8UNorm">
            <summary>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the UYVY format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.G8R8G8B8UNorm">
            <summary>A four-component, 32-bit unsigned-normalized-integer format. This packed RGB format is analogous to the YUY2 format. Each 32-bit block describes a pair of pixels: (R8, G8, B8) and (R8, G8, B8) where the R8/B8 values are repeated, and the G8 values are unique to each pixel.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC1Typeless">
            <summary>Four-component typeless block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC1UNorm">
            <summary>Four-component block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC1UNormSrgb">
            <summary>Four-component block-compression format for sRGB data.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC2Typeless">
            <summary>Four-component typeless block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC2UNorm">
            <summary>Four-component block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC2UNormSrgb">
            <summary>Four-component block-compression format for sRGB data.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC3Typeless">
            <summary>Four-component typeless block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC3UNorm">
            <summary>Four-component block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC3UNormSrgb">
            <summary>Four-component block-compression format for sRGB data.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC4Typeless">
            <summary>One-component typeless block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC4UNorm">
            <summary>One-component block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC4SNorm">
            <summary>One-component block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC5Typeless">
            <summary>Two-component typeless block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC5UNorm">
            <summary>Two-component block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC5SNorm">
            <summary>Two-component block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.B5G6R5UNorm">
            <summary>A three-component, 16-bit unsigned-normalized-integer format that supports 5 bits for blue, 6 bits for green, and 5 bits for red.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.B5G5R5A1UNorm">
            <summary>A four-component, 16-bit unsigned-normalized-integer format that supports 5 bits for each color channel and 1-bit alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.B8G8R8A8UNorm">
            <summary>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8-bit alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.B8G8R8X8UNorm">
            <summary>A four-component, 32-bit unsigned-normalized-integer format that supports 8 bits for each color channel and 8 bits unused.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.R10G10B10XRBiasA2UNorm">
            <summary>A four-component, 32-bit 2.8-biased fixed-point format that supports 10 bits for each color channel and 2-bit alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.B8G8R8A8Typeless">
            <summary>A four-component, 32-bit typeless format that supports 8 bits for each channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.B8G8R8A8UNormSrgb">
            <summary>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each channel including alpha.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.B8G8R8X8Typeless">
            <summary>A four-component, 32-bit typeless format that supports 8 bits for each color channel, and 8 bits are unused.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.B8G8R8X8UNormSrgb">
            <summary>A four-component, 32-bit unsigned-normalized standard RGB format that supports 8 bits for each color channel, and 8 bits are unused.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC6HalfTypeless">
            <summary>A typeless block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC6HalfUF16">
            <summary>A block-compression format. </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC6HalfSF16">
            <summary>A block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC7Typeless">
            <summary>A typeless block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC7UNorm">
            <summary>A block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.BC7UNormSrgb">
            <summary>A block-compression format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.AYuv">
            <summary>Most common YUV 4:4:4 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.Y410">
            <summary>10-bit per channel packed YUV 4:4:4 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.Y416">
            <summary>16-bit per channel packed YUV 4:4:4 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.NV12">
            <summary>Most common YUV 4:2:0 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.P010">
            <summary>10-bit per channel planar YUV 4:2:0 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.P016">
            <summary>16-bit per channel planar YUV 4:2:0 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.P420Opaque">
            <summary>8-bit per channel planar YUV 4:2:0 video resource format. This format is subsampled where each pixel has its own Y value, but each 2x2 pixel block shares a single U and V value.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.Yuy2">
            <summary>8-bit per channel planar YUV 4:2:0 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.Y210">
            <summary>10-bit per channel packed YUV 4:2:2 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.Y216">
            <summary>16-bit per channel packed YUV 4:2:2 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.NV11">
            <summary>Most common planar YUV 4:1:1 video resource format.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.AI44">
            <summary>4-bit palletized YUV format that is commonly used for DVD sub-picture.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.IA44">
            <summary>4-bit palletized YUV format that is commonly used for DVD sub-picture.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.P8">
            <summary>8-bit palletized format that is used for palletized RGB data when the processor processes ISDB-T data and for palletized YUV data when the processor processes Blu-Ray data.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.A8P8">
            <summary>8-bit palletized format with 8 bits of alpha that is used for palletized YUV data when the processor processes Blu-Ray data.</summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFormat.B4G4R4A4UNorm">
            <summary>A four-component, 16-bit unsigned-normalized integer format that supports 4 bits for each channel including alpha.</summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity">
            <summary>
            Identifies the granularity at which the graphics processing unit (GPU) can be preempted from performing its current graphics rendering task.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity.DmaBufferBoundary">
            <summary>
            Indicates the preemption granularity as a DMA buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity.PrimitiveBoundary">
            <summary>
            Indicates the preemption granularity as a graphics primitive. A primitive is a section in a DMA buffer and can be a group of triangles.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity.TriangleBoundary">
            <summary>
            Indicates the preemption granularity as a triangle. A triangle is a part of a primitive.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity.PixelBoundary">
            <summary>
            Indicates the preemption granularity as a pixel. A pixel is a part of a triangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity.InstructionBoundary">
            <summary>
            Indicates the preemption granularity as a graphics instruction. A graphics instruction operates on a pixel.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiMapOptions">
            <summary>
            CPU read-write options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMapOptions.None">
            <summary>
             No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMapOptions.Read">
            <summary>
            Allow CPU read access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMapOptions.Write">
            <summary>
            Allow CPU write access.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMapOptions.Discard">
            <summary>
            Discard the previous contents of a resource when it is mapped.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiModeRotation">
            <summary>
            Indicate how the back buffers should be rotated to fit the physical rotation of a monitor.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeRotation.Unspecified">
            <summary>
            Unspecified rotation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeRotation.Identity">
            <summary>
            Specifies no rotation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeRotation.Rotate90">
            <summary>
            Specifies 90 degrees of rotation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeRotation.Rotate180">
            <summary>
            Specifies 180 degrees of rotation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeRotation.Rotate270">
            <summary>
            Specifies 270 degrees of rotation.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling">
            <summary>
            Indicate how an image is stretched to fit a given monitor's resolution.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling.Unspecified">
            <summary>
            Unspecified scaling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling.Centered">
            <summary>
            Specifies no scaling. The image is centered on the display.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling.Stretched">
            <summary>
            Specifies stretched scaling.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder">
            <summary>
            Indicate the method the raster uses to create an image on a surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder.Unspecified">
            <summary>
            Scanline order is unspecified.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder.Progressive">
            <summary>
            The image is created from the first scanline to the last without skipping any.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder.UpperFieldFirst">
            <summary>
            The image is created beginning with the upper field.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder.LowerFieldFirst">
            <summary>
            The image is created beginning with the lower field.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority">
            <summary>
            Identifies the importance of a resource’s content.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority.Unspecified">
            <summary>
            Unspecified priority.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority.Low">
            <summary>
            The resource is low priority. The operating system discards a low priority resource before other offered resources with higher priority. It is a good programming practice to mark a resource as low priority if it has no useful content.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority.Normal">
            <summary>
            The resource is normal priority. You mark a resource as normal priority if it has content that is easy to regenerate.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOfferResourcePriority.High">
            <summary>
            The resource is high priority. The operating system discards other offered resources with lower priority before it discards a high priority resource. You mark a resource as high priority if it has useful content that is difficult to regenerate.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions">
            <summary>
            Options for presenting frames to the output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.None">
            <summary>
            Present a frame from each buffer (starting with the current buffer) to the output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.Test">
            <summary>
            Do not present the frame to the output. The status of the swap chain will be tested and appropriate errors returned. <value>Test</value> is intended for use only when switching from the idle state; do not use it to determine when to switch to the idle state because doing so can leave the swap chain unable to exit full-screen mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.DoNotSequence">
            <summary>
            Present a frame from the current buffer to the output. Use this flag so that the presentation can use vertical-blank synchronization instead of sequencing buffers in the chain in the usual manner.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.Restart">
            <summary>
            Specifies that the runtime will discard outstanding queued presents.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.DoNotWait">
            <summary>
            Specifies that the runtime will fail the presentation with the <value>DXGI_ERROR_WAS_STILL_DRAWING</value> error code if the calling thread is blocked; the runtime returns <value>DXGI_ERROR_WAS_STILL_DRAWING</value> instead of sleeping until the dependency is resolved.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.StereoPreferRight">
            <summary>
            Indicates that if the stereo present must be reduced to mono, right-eye viewing is used rather than left-eye viewing.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.StereoTemporaryMono">
            <summary>
            Indicates that the presentation should use the left buffer as a mono buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.RestrictToOutput">
            <summary>
            Indicates that presentation content will be shown only on the particular output. The content will not be visible on other outputs. For example, if the user tries to relocate video content on another output, the video content will not be visible.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentOptions.UseDuration">
            <summary>
            Must be set by media apps that are currently using a custom present duration (custom refresh rate).
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiResidency">
            <summary>
            Indicates the memory location of a resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResidency.Unspecified">
            <summary>
            Not specified.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResidency.FullyResident">
            <summary>
            The resource is located in video memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResidency.ResidentInSharedMemory">
            <summary>
            At least some of the resource is located in CPU memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResidency.EvictedToDisk">
            <summary>
            At least some of the resource has been paged out to the hard drive.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority">
            <summary>
            Determines when a resource can be evicted from memory.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority.Unspecified">
            <summary>
            Not specified.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority.Minimum">
            <summary>
            The resource is unused and can be evicted as soon as another resource requires the memory that the resource occupies.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority.Low">
            <summary>
            The eviction priority of the resource is low. The placement of the resource is not critical, and minimal work is performed to find a location for the resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority.Normal">
            <summary>
            The eviction priority of the resource is normal. The placement of the resource is important, but not critical, for performance. The resource is placed in its preferred location instead of a low-priority resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority.High">
            <summary>
            The eviction priority of the resource is high. The resource is placed in its preferred location instead of a low-priority or normal-priority resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiResourceEvictionPriority.Maximum">
            <summary>
            The resource is evicted from memory only if there is no other way of resolving the memory requirement.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiScaling">
            <summary>
            Identifies resize behavior when the back-buffer size does not match the size of the target output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiScaling.Stretch">
            <summary>
            Directs DXGI to make the back-buffer contents scale to fit the presentation target size.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiScaling.None">
            <summary>
            Directs DXGI to make the back-buffer contents appear without any scaling when the presentation target size is not equal to the back-buffer size. The top edges of the back buffer and presentation target are aligned together.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiScaling.AspectRatioStretch">
            <summary>
            DXGI to make the back-buffer contents scale to fit the presentation target size, while preserving the aspect ratio of the back-buffer. If the scaled back-buffer does not fill the presentation area, it will be centered with black borders.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSharedResourceAccess">
            <summary>
            The shared resource accesses options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSharedResourceAccess.Unspecified">
            <summary>
            Unspecified access
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSharedResourceAccess.Read">
            <summary>
            Read access to the resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSharedResourceAccess.Write">
            <summary>
            Write access to the resource.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions">
            <summary>
            Options for swap-chain behavior.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.NonPrerotated">
            <summary>
            Set this flag to turn off automatic image rotation; that is, do not perform a rotation when transferring the contents of the front buffer to the monitor. Use this flag to avoid a bandwidth penalty when an application expects to handle rotation. This option is valid only during full-screen mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.AllowModeSwitch">
            <summary>
            Set this flag to enable an application to switch modes. When switching from windowed to full-screen mode, the display mode (or monitor resolution) will be changed to match the dimensions of the application window.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.GdiCompatible">
            <summary>
            Set this flag to enable an application to render using GDI on a swap chain or a surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.RestrictedContent">
            <summary>
            Set this flag to indicate that the swap chain might contain protected content; therefore, the operating system supports the creation of the swap chain only when driver and hardware protection is used. If the driver and hardware do not support content protection, the call to create a resource for the swap chain fails.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.RestrictSharedResourceDriver">
            <summary>
            Set this flag to indicate that shared resources that are created within the swap chain must be protected by using the driver’s mechanism for restricting access to shared surfaces.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.DisplayOnly">
            <summary>
            Set this flag to restrict presented content to the local displays. Therefore, the presented content is not accessible via remote accessing or through the desktop duplication APIs.
            This flag supports the window content protection features of Windows. Applications can use this flag to protect their own onscreen window content from being captured or copied through a specific set of public operating system features and APIs.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.FrameLatencyWaitableObject">
            <summary>
            Set this flag to create a waitable object you can use to ensure rendering does not begin while a frame is still being presented.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.ForegroundLayer">
            <summary>
            Set this flag to create a swap chain in the foreground layer for multi-plane rendering.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions.FullscreenVideo">
            <summary>
            Full screen video.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect">
            <summary>
            Options for handling pixels in a display surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect.Discard">
            <summary>
            Use this flag to specify the bit-block transfer model and to specify that DXGI discard the contents of the back buffer. This flag is valid for a swap chain with more than one back buffer, although, applications only have read and write access to buffer 0. Use this flag to enable the display driver to select the most efficient presentation technique for the swap chain.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect.Sequential">
            <summary>
            Use this flag to specify the bit-block transfer model and to specify that DXGI persist the contents of the back buffer. Use this option to present the contents of the swap chain in order, from the first buffer (buffer 0) to the last buffer. This flag cannot be used with multisampling.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect.FlipSequential">
            <summary>
            Use this flag to specify the flip presentation model and to specify that DXGI persist the contents of the back buffer. This flag cannot be used with multisampling.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiUsages">
            <summary>
            Surface and resource creation options.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiUsages.ShaderInput">
            <summary>
            Use the surface or resource as an input to a shader.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiUsages.RenderTargetOutput">
            <summary>
            Use the surface or resource as an output render target.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiUsages.BackBuffer">
            <summary>
            The surface or resource is used as a back buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiUsages.Shared">
            <summary>
            Share the surface or resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiUsages.ReadOnly">
            <summary>
            Use the surface or resource for reading only.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiUsages.DiscardOnPresent">
            <summary>
            This flag is for internal use only.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiUsages.UnorderedAcess">
            <summary>
            Use the surface or resource for unordered access.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions">
            <summary>
            Options for window association.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions.None">
            <summary>
            No option.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions.NoWindowChanges">
            <summary>
            Prevent DXGI from monitoring an applications message queue; this makes DXGI unable to respond to mode changes.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions.NoAltEnter">
            <summary>
            Prevent DXGI from responding to an alt-enter sequence.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiWindowAssociationOptions.NoPrintScreen">
            <summary>
            Prevent DXGI from responding to a print-screen key.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.IDxgiReleasable">
            <summary>
            Defines a method to release the managed reference to the COM interface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.IDxgiReleasable.Dispose">
            <summary>
            Immediately releases the unmanaged resources.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.IDxgiReleasable.Release">
            <summary>
            Releases the managed reference to the COM interface.
            </summary>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.NativeMethods">
            <summary>
            Native methods.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.NativeMethods.CreateDxgiFactory(System.Guid,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory@)">
            <summary>
            Creates a DXGI 1.0 factory that you can use to generate other DXGI objects.
            </summary>
            <param name="riid">The globally unique identifier (GUID) of the <c>IDXGIFactory</c> object</param>
            <param name="factory">Address of a pointer to an <c>IDXGIFactory</c> object.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.NativeMethods.CreateDxgiFactory1(System.Guid,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory1@)">
            <summary>
            Creates a DXGI 1.1 factory that you can use to generate other DXGI objects.
            </summary>
            <param name="riid">The globally unique identifier (GUID) of the <c>IDXGIFactory1</c> object</param>
            <param name="factory">Address of a pointer to an <c>IDXGIFactory1</c> object.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.NativeMethods.CreateDxgiFactory2(JeremyAnsel.DirectX.Dxgi.DxgiCreateFactoryOptions,System.Guid,JeremyAnsel.DirectX.Dxgi.ComInterfaces.IDxgiFactory2@)">
            <summary>
            Creates a DXGI 1.3 factory that you can use to generate other DXGI objects.
            </summary>
            <param name="options">The creation options.</param>
            <param name="riid">The globally unique identifier (GUID) of the <c>IDXGIFactory2</c> object</param>
            <param name="factory">Address of a pointer to an <c>IDXGIFactory2</c> object.</param>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc">
            <summary>
            Describes an adapter (or video card) by using DXGI 1.0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.adapterDescription">
            <summary>
            A string that contains the adapter description. On feature level 9 graphics hardware, “Software Adapter”.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.vendorId">
            <summary>
            The PCI ID of the hardware vendor. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.deviceId">
            <summary>
            The PCI ID of the hardware device. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.subSysId">
            <summary>
            The PCI ID of the sub system. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.revision">
            <summary>
            The PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.dedicatedVideoMemory">
            <summary>
            The number of bytes of dedicated video memory that are not shared with the CPU.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.dedicatedSystemMemory">
            <summary>
            The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.sharedSystemMemory">
            <summary>
            The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.adapterLuid">
            <summary>
            A unique value that identifies the adapter.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.AdapterDescription">
            <summary>
            Gets a string that contains the adapter description. On feature level 9 graphics hardware, “Software Adapter”.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.VendorId">
            <summary>
            Gets the PCI ID of the hardware vendor. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.DeviceId">
            <summary>
            Gets the PCI ID of the hardware device. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.SubSysId">
            <summary>
            Gets the PCI ID of the sub system. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.Revision">
            <summary>
            Gets the PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.DedicatedVideoMemory">
            <summary>
            Gets the number of bytes of dedicated video memory that are not shared with the CPU.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.DedicatedSystemMemory">
            <summary>
            Gets the number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.SharedSystemMemory">
            <summary>
            Gets the number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.AdapterLuid">
            <summary>
            Gets a unique value that identifies the adapter.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc,JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc,JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.Equals(JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1">
            <summary>
            Describes an adapter (or video card) using DXGI 1.1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.adapterDescription">
            <summary>
            A string that contains the adapter description. On feature level 9 graphics hardware, “Software Adapter”.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.vendorId">
            <summary>
            The PCI ID of the hardware vendor. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.deviceId">
            <summary>
            The PCI ID of the hardware device. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.subSysId">
            <summary>
            The PCI ID of the sub system. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.revision">
            <summary>
            The PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.dedicatedVideoMemory">
            <summary>
            The number of bytes of dedicated video memory that are not shared with the CPU.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.dedicatedSystemMemory">
            <summary>
            The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.sharedSystemMemory">
            <summary>
            The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.adapterLuid">
            <summary>
            A unique value that identifies the adapter.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.adapterType">
            <summary>
            A value of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterType"/> enumeration that describes the adapter type.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.AdapterDescription">
            <summary>
            Gets a string that contains the adapter description. On feature level 9 graphics hardware, “Software Adapter”.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.VendorId">
            <summary>
            Gets the PCI ID of the hardware vendor. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.DeviceId">
            <summary>
            Gets the PCI ID of the hardware device. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.SubSysId">
            <summary>
            Gets the PCI ID of the sub system. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.Revision">
            <summary>
            Gets the PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.DedicatedVideoMemory">
            <summary>
            Gets the number of bytes of dedicated video memory that are not shared with the CPU.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.DedicatedSystemMemory">
            <summary>
            Gets the number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.SharedSystemMemory">
            <summary>
            Gets the number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.AdapterLuid">
            <summary>
            Gets a unique value that identifies the adapter.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.AdapterType">
            <summary>
            Gets a value of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterType"/> enumeration that describes the adapter type.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1,JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1,JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.Equals(JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2">
            <summary>
            Describes an adapter (or video card) that uses Microsoft DirectX Graphics Infrastructure (DXGI) 1.2.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.adapterDescription">
            <summary>
            A string that contains the adapter description. On feature level 9 graphics hardware, “Software Adapter”.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.vendorId">
            <summary>
            The PCI ID of the hardware vendor. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.deviceId">
            <summary>
            The PCI ID of the hardware device. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.subSysId">
            <summary>
            The PCI ID of the sub system. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.revision">
            <summary>
            The PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.dedicatedVideoMemory">
            <summary>
            The number of bytes of dedicated video memory that are not shared with the CPU.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.dedicatedSystemMemory">
            <summary>
            The number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.sharedSystemMemory">
            <summary>
            The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.adapterLuid">
            <summary>
            A unique value that identifies the adapter.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.adapterType">
            <summary>
            A value of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterType"/> enumeration that describes the adapter type.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.graphicsPreemptionGranularity">
            <summary>
            A value of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity"/> enumeration that describes the granularity level at which the GPU can be preempted from performing its current graphics rendering task.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.computePreemptionGranularity">
            <summary>
            A value of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity"/> enumeration that describes the granularity level at which the GPU can be preempted from performing its current compute task.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.AdapterDescription">
            <summary>
            Gets a string that contains the adapter description. On feature level 9 graphics hardware, “Software Adapter”.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.VendorId">
            <summary>
            Gets the PCI ID of the hardware vendor. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.DeviceId">
            <summary>
            Gets the PCI ID of the hardware device. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.SubSysId">
            <summary>
            Gets the PCI ID of the sub system. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.Revision">
            <summary>
            Gets the PCI ID of the revision number of the adapter. On feature level 9 graphics hardware, 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.DedicatedVideoMemory">
            <summary>
            Gets the number of bytes of dedicated video memory that are not shared with the CPU.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.DedicatedSystemMemory">
            <summary>
            Gets the number of bytes of dedicated system memory that are not shared with the CPU. This memory is allocated from available system memory at boot time.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.SharedSystemMemory">
            <summary>
            Gets the number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.AdapterLuid">
            <summary>
            Gets a unique value that identifies the adapter.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.AdapterType">
            <summary>
            Gets a value of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterType"/> enumeration that describes the adapter type.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.GraphicsPreemptionGranularity">
            <summary>
            Gets a value of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGraphicsPreemptionGranularity"/> enumeration that describes the granularity level at which the GPU can be preempted from performing its current graphics rendering task.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.ComputePreemptionGranularity">
            <summary>
            Gets a value of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiComputePreemptionGranularity"/> enumeration that describes the granularity level at which the GPU can be preempted from performing its current compute task.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2,JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2,JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.Equals(JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiAdapterDesc2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb">
            <summary>
            Represents an RGB color.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.red">
            <summary>
            A value representing the color of the red component. The range of this value is between 0 and 1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.green">
            <summary>
            A value representing the color of the green component. The range of this value is between 0 and 1.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.blue">
            <summary>
            A value representing the color of the blue component. The range of this value is between 0 and 1.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.Red">
            <summary>
            Gets or sets a value representing the color of the red component. The range of this value is between 0 and 1.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.Green">
            <summary>
            Gets or sets a value representing the color of the green component. The range of this value is between 0 and 1.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.Blue">
            <summary>
            Gets or sets a value representing the color of the blue component. The range of this value is between 0 and 1.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiColorRgb,JeremyAnsel.DirectX.Dxgi.DxgiColorRgb)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiColorRgb,JeremyAnsel.DirectX.Dxgi.DxgiColorRgb)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.Equals(JeremyAnsel.DirectX.Dxgi.DxgiColorRgb)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba">
            <summary>
            The structure represents a color value with alpha, which is used for transparency.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.red">
            <summary>
            A value that specifies the red component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the red component, while a value of 1.0 indicates that red is fully present.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.green">
            <summary>
            A value that specifies the green component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the green component, while a value of 1.0 indicates that green is fully present.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.blue">
            <summary>
            A value that specifies the blue component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the blue component, while a value of 1.0 indicates that blue is fully present.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.alpha">
            <summary>
            A value that specifies the alpha component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates fully transparent, while a value of 1.0 indicates fully opaque.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.Red">
            <summary>
            Gets or sets a value that specifies the red component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the red component, while a value of 1.0 indicates that red is fully present.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.Green">
            <summary>
            Gets or sets a value that specifies the green component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the green component, while a value of 1.0 indicates that green is fully present.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.Blue">
            <summary>
            Gets or sets a value that specifies the blue component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates the complete absence of the blue component, while a value of 1.0 indicates that blue is fully present.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.Alpha">
            <summary>
            Gets or sets value that specifies the alpha component of a color. This value generally is in the range from 0.0 through 1.0. A value of 0.0 indicates fully transparent, while a value of 1.0 indicates fully opaque.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiColorRgba,JeremyAnsel.DirectX.Dxgi.DxgiColorRgba)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiColorRgba,JeremyAnsel.DirectX.Dxgi.DxgiColorRgba)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.Equals(JeremyAnsel.DirectX.Dxgi.DxgiColorRgba)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiColorRgba.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics">
            <summary>
            Describes timing and presentation statistics for a frame.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.presentCount">
            <summary>
            A value that represents the running total count of times that an image was presented to the monitor since the computer booted.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.presentRefreshCount">
            <summary>
            A value that represents the running total count of v-blanks at which the last image was presented to the monitor and that have happened since the computer booted (for windowed mode, since the swap chain was created).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.syncRefreshCount">
            <summary>
            A value that represents the running total count of v-blanks when the scheduler last sampled the machine time by calling <c>QueryPerformanceCounter</c> and that have happened since the computer booted (for windowed mode, since the swap chain was created).
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.syncQpcTime">
            <summary>
            A value that represents the high-resolution performance counter timer. This value is the same as the value returned by the <c>QueryPerformanceCounter</c> function.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.syncGpuTime">
            <summary>
            The GPU time. Reserved. Always returns 0.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.PresentCount">
            <summary>
            Gets a value that represents the running total count of times that an image was presented to the monitor since the computer booted.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.PresentRefreshCount">
            <summary>
            Gets a value that represents the running total count of v-blanks at which the last image was presented to the monitor and that have happened since the computer booted (for windowed mode, since the swap chain was created).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.SyncRefreshCount">
            <summary>
            Gets a value that represents the running total count of v-blanks when the scheduler last sampled the machine time by calling <c>QueryPerformanceCounter</c> and that have happened since the computer booted (for windowed mode, since the swap chain was created).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.SyncQpcTime">
            <summary>
            Gets a value that represents the high-resolution performance counter timer. This value is the same as the value returned by the <c>QueryPerformanceCounter</c> function.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.SyncGpuTime">
            <summary>
            Gets the GPU time. Reserved. Always returns 0.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics,JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics,JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.Equals(JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiFrameStatistics.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl">
            <summary>
            Controls the settings of a gamma curve.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.scale">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> structure with scalar values that are applied to RGB values before being sent to the gamma look up table.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.offset">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> structure with offset values that are applied to the RGB values before being sent to the gamma look up table.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.gammaCurve">
            <summary>
            An array of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> structures that control the points of a gamma curve.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.Scale">
            <summary>
            Gets or sets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> structure with scalar values that are applied to RGB values before being sent to the gamma look up table.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.Offset">
            <summary>
            Gets or sets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> structure with offset values that are applied to the RGB values before being sent to the gamma look up table.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiGammaControl,JeremyAnsel.DirectX.Dxgi.DxgiGammaControl)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiGammaControl,JeremyAnsel.DirectX.Dxgi.DxgiGammaControl)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.GetGammaCurve">
            <summary>
            Gets an array of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> structures that control the points of a gamma curve.
            </summary>
            <returns>An array of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> structures.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.SetGammaCurve(JeremyAnsel.DirectX.Dxgi.DxgiColorRgb[])">
            <summary>
            Sets an array of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> structures that control the points of a gamma curve.
            </summary>
            <param name="curve">An array of <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiColorRgb"/> structures.</param>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.Equals(JeremyAnsel.DirectX.Dxgi.DxgiGammaControl)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControl.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities">
            <summary>
            Controls the gamma capabilities of an adapter.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.isScaleAndOffsetSupported">
            <summary>
            <value>true</value> if scaling and offset operations are supported during gamma correction; otherwise, <value>false</value>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.maximumConvertedValue">
            <summary>
            A value describing the maximum range of the control-point positions.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.minimumConvertedValue">
            <summary>
            A value describing the minimum range of the control-point positions.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.gammaControlPointsCount">
            <summary>
            A value describing the number of control points in the array.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.gammaControlPointPositions">
            <summary>
            An array of values describing control points; the maximum length of control points is 1025.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.IsScaleAndOffsetSupported">
            <summary>
            Gets a value indicating whether scaling and offset operations are supported during gamma correction.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.MaximumConvertedValue">
            <summary>
            Gets a value describing the maximum range of the control-point positions.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.MinimumConvertedValue">
            <summary>
            Gets a value describing the minimum range of the control-point positions.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities,JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities,JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.GetGammaControlPointPositions">
            <summary>
            Gets an array of values describing control points; the maximum length of control points is 1025.
            </summary>
            <returns>An array of values describing control points.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.Equals(JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiGammaControlCapabilities.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect">
            <summary>
            Describes a mapped rectangle that is used to access a surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.pitch">
            <summary>
            A value that describes the width, in bytes, of the surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.bitsPointer">
            <summary>
            A pointer to the image buffer of the surface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.Pitch">
            <summary>
            Gets a value that describes the width, in bytes, of the surface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.BitsPointer">
            <summary>
            Gets a pointer to the image buffer of the surface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiMappedRect,JeremyAnsel.DirectX.Dxgi.DxgiMappedRect)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiMappedRect,JeremyAnsel.DirectX.Dxgi.DxgiMappedRect)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.Equals(JeremyAnsel.DirectX.Dxgi.DxgiMappedRect)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMappedRect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F">
            <summary>
            Represents a 3x2 matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.m11">
            <summary>
            The value in the first row and first column of the matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.m12">
            <summary>
            The value in the first row and second column of the matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.m21">
            <summary>
            The value in the second row and first column of the matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.m22">
            <summary>
            The value in the second row and second column of the matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.m31">
            <summary>
            The value in the third row and first column of the matrix.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.m32">
            <summary>
            The value in the third row and second column of the matrix.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.M11">
            <summary>
            Gets or sets the value in the first row and first column of the matrix.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.M12">
            <summary>
            Gets or sets the value in the first row and second column of the matrix.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.M21">
            <summary>
            Gets or sets the value in the second row and first column of the matrix.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.M22">
            <summary>
            Gets or sets the value in the second row and second column of the matrix.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.M31">
            <summary>
            Gets or sets the value in the third row and first column of the matrix.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.M32">
            <summary>
            Gets or sets the value in the third row and second column of the matrix.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F,JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F,JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.Equals(JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiMatrix3x2F.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc">
            <summary>
            Describes a display mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.width">
            <summary>
            A value that describes the resolution width.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.height">
            <summary>
            A value describing the resolution height.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.refreshRate">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> structure describing the refresh rate in hertz.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.format">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> enumeration describing the display format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.scanlineOrdering">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder"/> enumeration describing the scanline drawing mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.scaling">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling"/> enumeration describing the scaling mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.Width">
            <summary>
            Gets or sets a value that describes the resolution width.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.Height">
            <summary>
            Gets or sets a value describing the resolution height.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.RefreshRate">
            <summary>
            Gets or sets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> structure describing the refresh rate in hertz.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.Format">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> enumeration describing the display format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.ScanlineOrdering">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder"/> enumeration describing the scanline drawing mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.Scaling">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling"/> enumeration describing the scaling mode.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.Equals(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1">
            <summary>
            Describes a display mode and whether the display mode supports stereo.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.width">
            <summary>
            A value that describes the resolution width.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.height">
            <summary>
            A value describing the resolution height.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.refreshRate">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> structure describing the refresh rate in hertz.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.format">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> enumeration describing the display format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.scanlineOrdering">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder"/> enumeration describing the scanline drawing mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.scaling">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling"/> enumeration describing the scaling mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.stereo">
            <summary>
            Specifies whether the full-screen display mode is stereo. TRUE if stereo; otherwise, FALSE.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.Width">
            <summary>
            Gets or sets a value that describes the resolution width.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.Height">
            <summary>
            Gets or sets a value describing the resolution height.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.RefreshRate">
            <summary>
            Gets or sets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> structure describing the refresh rate in hertz.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.Format">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> enumeration describing the display format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.ScanlineOrdering">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder"/> enumeration describing the scanline drawing mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.Scaling">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling"/> enumeration describing the scaling mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.Stereo">
            <summary>
            Gets or sets a value indicating whether the full-screen display mode is stereo.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1,JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.Equals(JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc">
            <summary>
            Describes an output or physical connection between the adapter (video card) and a device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.deviceName">
            <summary>
            A string that contains the name of the output device.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.desktopCoordinates">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRect"/> structure containing the bounds of the output in desktop coordinates. Desktop coordinates depend on the dots per inch (DPI) of the desktop.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.isAttachedToDesktop">
            <summary>
            <value>true</value> if the output is attached to the desktop; otherwise, <value>false</value>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.rotation">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeRotation"/> enumeration describing on how an image is rotated by the output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.monitor">
            <summary>
            An handle that represents the display monitor.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.DeviceName">
            <summary>
            Gets a string that contains the name of the output device.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.DesktopCoordinates">
            <summary>
            Gets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRect"/> structure containing the bounds of the output in desktop coordinates. Desktop coordinates depend on the dots per inch (DPI) of the desktop.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.IsAttachedToDesktop">
            <summary>
            Gets a value indicating whether the output is attached to the desktop.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.Rotation">
            <summary>
            Gets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeRotation"/> enumeration describing on how an image is rotated by the output.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.Monitor">
            <summary>
            Gets an handle that represents the display monitor.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc,JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc,JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.Equals(JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiOutputDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiPoint">
            <summary>
            Defines the x- and y- coordinates of a point.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPoint.x">
            <summary>
            The x-coordinate of the point.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPoint.y">
            <summary>
            The y-coordinate of the point.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPoint"/> struct.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiPoint.X">
            <summary>
            Gets or sets the x-coordinate of the point.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiPoint.Y">
            <summary>
            Gets or sets the y-coordinate of the point.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPoint.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiPoint,JeremyAnsel.DirectX.Dxgi.DxgiPoint)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPoint"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPoint"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPoint"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPoint.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiPoint,JeremyAnsel.DirectX.Dxgi.DxgiPoint)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPoint"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPoint"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPoint"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPoint.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPoint.Equals(JeremyAnsel.DirectX.Dxgi.DxgiPoint)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters">
            <summary>
            Describes information about present that helps the operating system optimize presentation.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.dirtyRectsCount">
            <summary>
            The number of updated rectangles that you update in the back buffer for the presented frame. The operating system uses this information to optimize presentation. You can set this member to 0 to indicate that you update the whole frame.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.dirtyRects">
            <summary>
            A list of updated rectangles that you update in the back buffer for the presented frame. An application must update every single pixel in each rectangle that it reports to the runtime; the application cannot assume that the pixels are saved from the previous frame.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.scrollRect">
            <summary>
            A pointer to the scrolled rectangle. The scrolled rectangle is the rectangle of the previous frame from which the runtime bit-block transfers content. The runtime also uses the scrolled rectangle to optimize presentation in terminal server and indirect display scenarios.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.scrollOffset">
            <summary>
            A pointer to the offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame).
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.DirtyRectsCount">
            <summary>
            Sets the number of updated rectangles that you update in the back buffer for the presented frame. The operating system uses this information to optimize presentation. You can set this member to 0 to indicate that you update the whole frame.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.DirtyRects">
            <summary>
            Sets list of updated rectangles that you update in the back buffer for the presented frame. An application must update every single pixel in each rectangle that it reports to the runtime; the application cannot assume that the pixels are saved from the previous frame.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.ScrollRect">
            <summary>
            Sets the scrolled rectangle. The scrolled rectangle is the rectangle of the previous frame from which the runtime bit-block transfers content. The runtime also uses the scrolled rectangle to optimize presentation in terminal server and indirect display scenarios.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.ScrollOffset">
            <summary>
            Sets the offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame).
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters,JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters,JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.Equals(JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiPresentParameters.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiRational">
            <summary>
            Represents a rational number.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiRational.numerator">
            <summary>
            An unsigned integer value representing the top of the rational number.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiRational.denominator">
            <summary>
            An unsigned integer value representing the bottom of the rational number.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRational.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> struct.
            </summary>
            <param name="numerator">An unsigned integer value representing the top of the rational number.</param>
            <param name="denominator">An unsigned integer value representing the bottom of the rational number.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiRational.Numerator">
            <summary>
            Gets an unsigned integer value representing the top of the rational number.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiRational.Denominator">
            <summary>
            Gets an unsigned integer value representing the bottom of the rational number.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRational.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiRational,JeremyAnsel.DirectX.Dxgi.DxgiRational)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRational.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiRational,JeremyAnsel.DirectX.Dxgi.DxgiRational)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRational.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRational.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRational.Equals(JeremyAnsel.DirectX.Dxgi.DxgiRational)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRational.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiRect">
            <summary>
            Defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiRect.left">
            <summary>
            The x-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiRect.top">
            <summary>
            The y-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiRect.right">
            <summary>
            The x-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiRect.bottom">
            <summary>
            The y-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRect"/> struct.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of a rectangle.</param>
            <param name="top">The y-coordinate of the upper-left corner of a rectangle.</param>
            <param name="right">The x-coordinate of the lower-right corner of a rectangle.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of a rectangle.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiRect.Left">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiRect.Top">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of a rectangle.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiRect.Right">
            <summary>
            Gets or sets the x-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiRect.Bottom">
            <summary>
            Gets or sets the y-coordinate of the lower-right corner of a rectangle.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRect.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiRect,JeremyAnsel.DirectX.Dxgi.DxgiRect)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRect"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRect"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRect"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRect.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiRect,JeremyAnsel.DirectX.Dxgi.DxgiRect)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRect"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRect"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRect"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRect.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRect.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRect.Equals(JeremyAnsel.DirectX.Dxgi.DxgiRect)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiRect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc">
            <summary>
            Describes multi-sampling parameters for a resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.count">
            <summary>
            The number of multi-samples per pixel.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.quality">
            <summary>
            The image quality level. The higher the quality, the lower the performance.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> struct.
            </summary>
            <param name="count">The number of multi-samples per pixel.</param>
            <param name="quality">The image quality level. The higher the quality, the lower the performance.</param>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.Count">
            <summary>
            Gets or sets the number of multi-samples per pixel.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.Quality">
            <summary>
            Gets or sets the image quality level. The higher the quality, the lower the performance.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc,JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc,JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.Equals(JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource">
            <summary>
            Represents a handle to a shared resource.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource.handle">
            <summary>
            A handle to a shared resource.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource.Handle">
            <summary>
            Gets a handle to a shared resource.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiSharedResource,JeremyAnsel.DirectX.Dxgi.DxgiSharedResource)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiSharedResource,JeremyAnsel.DirectX.Dxgi.DxgiSharedResource)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource.Equals(JeremyAnsel.DirectX.Dxgi.DxgiSharedResource)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSharedResource.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc">
            <summary>
            Describes a surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.width">
            <summary>
            A value describing the surface width.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.height">
            <summary>
            A value describing the surface height.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.format">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> enumeration that describes the surface format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.sampleDesc">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> structure that describes multi-sampling parameters for the surface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.Width">
            <summary>
            Gets or sets a value describing the surface width.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.Height">
            <summary>
            Gets or sets a value describing the surface height.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.Format">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> enumeration that describes the surface format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.SampleDesc">
            <summary>
            Gets or sets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> structure that describes multi-sampling parameters for the surface.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc,JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc,JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.Equals(JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSurfaceDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc">
            <summary>
            Describes a swap chain.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.bufferDescription">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> structure that describes the back buffer display mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.sampleDescription">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> structure that describes multi-sampling parameters.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.bufferUsage">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiUsages"/> enumeration that describes the surface usage and CPU access options for the back buffer. The back buffer can be used for shader input or render-target output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.bufferCount">
            <summary>
            A value that describes the number of buffers in the swap chain.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.outputWindowHandle">
            <summary>
            An handle to the output window. This member must not be <value>Zero</value>.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.isWindowed">
            <summary>
            A value indicating whether the output is in windowed mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.swapEffect">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect"/> enumeration that describes options for handling the contents of the presentation buffer after presenting a surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.options">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions"/> enumeration that describes options for swap-chain behavior.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.BufferDescription">
            <summary>
            Gets or sets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeDesc"/> structure that describes the back buffer display mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.SampleDescription">
            <summary>
            Gets or sets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> structure that describes multi-sampling parameters.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.BufferUsage">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiUsages"/> enumeration that describes the surface usage and CPU access options for the back buffer. The back buffer can be used for shader input or render-target output.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.BufferCount">
            <summary>
            Gets or sets a value that describes the number of buffers in the swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.OutputWindowHandle">
            <summary>
            Gets or sets an handle to the output window. This member must not be <value>Zero</value>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.IsWindowed">
            <summary>
            Gets or sets a value indicating whether the output is in windowed mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.SwapEffect">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect"/> enumeration that describes options for handling the contents of the presentation buffer after presenting a surface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.Options">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions"/> enumeration that describes options for swap-chain behavior.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.Equals(JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1">
            <summary>
            Describes a swap chain.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.width">
            <summary>
            A value that describes the resolution width.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.height">
            <summary>
            A value describing the resolution height.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.format">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> enumeration describing the display format.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.stereo">
            <summary>
            Specifies whether the full-screen display mode is stereo. TRUE if stereo; otherwise, FALSE.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.sampleDescription">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> structure that describes multi-sampling parameters.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.bufferUsage">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiUsages"/> enumeration that describes the surface usage and CPU access options for the back buffer. The back buffer can be used for shader input or render-target output.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.bufferCount">
            <summary>
            A value that describes the number of buffers in the swap chain.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.scaling">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiScaling"/> enumeration describing the scaling mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.swapEffect">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect"/> enumeration that describes options for handling the contents of the presentation buffer after presenting a surface.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.alphaMode">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAlphaMode"/> enumeration that identifies the transparency behavior of the swap-chain back buffer.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.options">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions"/> enumeration that describes options for swap-chain behavior.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.Width">
            <summary>
            Gets or sets a value that describes the resolution width.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.Height">
            <summary>
            Gets or sets a value describing the resolution height.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.Format">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiFormat"/> enumeration describing the display format.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.Stereo">
            <summary>
            Gets or sets a value indicating whether the full-screen display mode is stereo.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.SampleDescription">
            <summary>
            Gets or sets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSampleDesc"/> structure that describes multi-sampling parameters.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.BufferUsage">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiUsages"/> enumeration that describes the surface usage and CPU access options for the back buffer. The back buffer can be used for shader input or render-target output.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.BufferCount">
            <summary>
            Gets or sets a value that describes the number of buffers in the swap chain.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.Scaling">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiScaling"/> enumeration describing the scaling mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.SwapEffect">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapEffect"/> enumeration that describes options for handling the contents of the presentation buffer after presenting a surface.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.AlphaMode">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiAlphaMode"/> enumeration that identifies the transparency behavior of the swap-chain back buffer.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.Options">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainOptions"/> enumeration that describes options for swap-chain behavior.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.Equals(JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainDesc1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc">
            <summary>
            Describes full-screen mode for a swap chain.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.refreshRate">
            <summary>
            A <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> structure that describes the refresh rate in hertz.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.scanlineOrdering">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder"/> enumeration that describes the scan-line drawing mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.scaling">
            <summary>
            A member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling"/> enumeration that describes the scaling mode.
            </summary>
        </member>
        <member name="F:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.isWindowed">
            <summary>
            A value that specifies whether the swap chain is in windowed mode. <value>true</value> if the swap chain is in windowed mode; otherwise, <value>false</value>.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.RefreshRate">
            <summary>
            Gets or sets a <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiRational"/> structure that describes the refresh rate in hertz.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.ScanlineOrdering">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScanlineOrder"/> enumeration that describes the scan-line drawing mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.Scaling">
            <summary>
            Gets or sets a member of the <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiModeScaling"/> enumeration that describes the scaling mode.
            </summary>
        </member>
        <member name="P:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.IsWindowed">
            <summary>
            Gets or sets a value indicating whether the swap chain is in windowed mode.
            </summary>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.op_Equality(JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc"/> objects. The result specifies whether the values of the two objects are equal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right are equal; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.op_Inequality(JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc,JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc)">
            <summary>
            Compares two <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc"/> objects. The result specifies whether the values of the two objects are unequal.
            </summary>
            <param name="left">The left <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc"/> to compare.</param>
            <param name="right">The right <see cref="T:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc"/> to compare.</param>
            <returns><value>true</value> if the values of left and right differ; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.Equals(JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns><value>true</value> if the specified object is equal to the current object; otherwise, <value>false</value>.</returns>
        </member>
        <member name="M:JeremyAnsel.DirectX.Dxgi.DxgiSwapChainFullscreenDesc.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
    </members>
</doc>
